<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Centos_7安装Transmission下载bt、pt文件</title>
    <url>/2023/7973/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Transmission是一种BitTorrent客户端，特点是一个跨平台的后端和其上的简洁的用户界面。Transmission以MIT许可证和GNU通用公共许可证双许可证授权，因此是一款自由软件。本文主要介绍如何在centos7上安装Transmission以及安装中文界面。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>针对安装来说，有两种选择，一种是第三方的yum源，一种当然就是编译安装了，我这里都介绍一下，看自己喜好吧。</p>
<h2 id="一、yum安装，这个源是官方认可的，所以请不用担心"><a href="#一、yum安装，这个源是官方认可的，所以请不用担心" class="headerlink" title="一、yum安装，这个源是官方认可的，所以请不用担心"></a>一、yum安装，这个源是官方认可的，所以请不用担心</h2><h3 id="1、首先-需要在系统上启用-EPEL-repository"><a href="#1、首先-需要在系统上启用-EPEL-repository" class="headerlink" title="1、首先, 需要在系统上启用 EPEL repository"></a>1、首先, 需要在系统上启用 EPEL repository</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install epel-release</span><br><span class="line">yum -y update</span><br></pre></td></tr></table></figure>

<h3 id="2、开始安装-transmission"><a href="#2、开始安装-transmission" class="headerlink" title="2、开始安装 transmission"></a>2、开始安装 transmission</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install transmission-daemon</span><br></pre></td></tr></table></figure>

<h3 id="3、完成之后-检查一下是否已安装成功"><a href="#3、完成之后-检查一下是否已安装成功" class="headerlink" title="3、完成之后, 检查一下是否已安装成功"></a>3、完成之后, 检查一下是否已安装成功</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start transmission-daemon.service</span><br><span class="line">systemctl stop transmission-daemon.service</span><br></pre></td></tr></table></figure>

<h3 id="4、修改配置文件"><a href="#4、修改配置文件" class="headerlink" title="4、修改配置文件"></a>4、修改配置文件</h3><p>修改配置文件 vi /var/lib/transmission/.config/transmission-daemon/settings.json<br>主要有以下地方</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;rpc-authentication-required&quot;: true,</span><br><span class="line">  &quot;rpc-enabled&quot;: true,</span><br><span class="line">  &quot;rpc-port&quot;: 9091,</span><br><span class="line">  &quot;rpc-password&quot;: &quot;admin&quot;,</span><br><span class="line">  &quot;rpc-username&quot;: &quot;adminadmin&quot;,</span><br><span class="line">  &quot;rpc-whitelist-enabled&quot;: false,</span><br><span class="line">  &quot;rpc-whitelist&quot;: &quot;0.0.0.0”</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果仅允许指定 IP 才能访问，则需要修改下面的项（ip支持*作为通配符）：<br><code>rpc-whitelist</code>: <code>127.0.0.1,192.168.1.*</code>,<br><code>rpc-whitelist-enabled: true</code>,<br>如果允许任意 IP 都可以访问，则需要修改：<br><code>rpc-whitelist-enabled: false</code>,<br><code>rpc-whitelist: 0.0.0.0</code>,<br>如果需要设定访问用户和密码，则需要修改：<br><code>rpc-authentication-required: true</code>,<br><code>rpc-password : adminadmin</code>,<br><code>rpc-username : admin</code>,<br>需要注意的是 password 设置成了明文。当启动 daemon 之后，daemon 会自动检测密码设置。如果发现密码配置被修改了，daemon 会自动计算修改后的密码的HASH值，并用这个HASH值替换掉配置文件中的明文密码，这样会更安全。</p>
<h3 id="5、全部配置的汉化说明"><a href="#5、全部配置的汉化说明" class="headerlink" title="5、全部配置的汉化说明"></a>5、全部配置的汉化说明</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#计划限速下载最大值,KB/s</span><br><span class="line">&quot;alt-speed-down&quot;: 50,</span><br><span class="line">#是否启用计划限速,默认关闭</span><br><span class="line">&quot;alt-speed-enabled&quot;: false,</span><br><span class="line">#计划限速开始时间,计算方法见下方结束时间处</span><br><span class="line">&quot;alt-speed-time-begin&quot;: 540,</span><br><span class="line">#计划限速结束时间</span><br><span class="line">&quot;alt-speed-time-day&quot;: 127,</span><br><span class="line">#计划限速日期(星期几),127表示每天,是用7位二进制数表示,然后转换成十进制数填入.</span><br><span class="line">#例如0000001表示周日,1000000表示周六,0000010表示周一,0000100表示周二.</span><br><span class="line">#如果你只要在周六周日限速,该数应该为1000001,转换为十进制就是65；</span><br><span class="line">#如果你只要在工作日(周一至周五)限速,该数应该为0111110,转换为十进制就是62</span><br><span class="line">#启用计划限速日期,默认不开启,如果开启,那么alt-speed-enabled一定要是false,两者之间只能启用一项,如果同时设置为true,则alt-speed-enabled有效</span><br><span class="line">&quot;alt-speed-time-enabled&quot;: false,</span><br><span class="line">#计划限速结束时间,从0点到开始时间的分钟数,例如8:00就是8*60=480.该时间用的是GMT,即北京时间-8小时,例如计划北京时间8:30分开始,这个数字就应该是(8-8+24)*60+30=1470</span><br><span class="line">&quot;alt-speed-time-end&quot;: 1020,</span><br><span class="line">#计划限速值,单位KB/s</span><br><span class="line">&quot;alt-speed-up&quot;: 50,</span><br><span class="line">#IPv4地址绑定</span><br><span class="line">&quot;bind-address-ipv4&quot;: &quot;0.0.0.0&quot;,</span><br><span class="line">#IPv6地址绑定</span><br><span class="line">&quot;bind-address-ipv6&quot;: &quot;::&quot;,</span><br><span class="line">#启用黑名单</span><br><span class="line">&quot;blocklist-enabled&quot;: false,</span><br><span class="line">#黑名单地址</span><br><span class="line">&quot;blocklist-url&quot;: &quot;http://www.example.com/blocklist&quot;,</span><br><span class="line">#缓存大小,单位MB,建议设置内存大小的1/6~1/4,这玩意基本上速度一快就吃满分配的内存,但是会减少对硬盘的损耗,如果是家用机器建议拉大,租用的服务器和盒子的话看着办吧,如果速度很快调大这个能使得速度更稳定</span><br><span class="line">&quot;cache-size-mb&quot;: 4,</span><br><span class="line">#启用DHT网络(通过tracker寻找节点),默认启用,PT需要禁用,但是一般PT种子默认禁用</span><br><span class="line">&quot;dht-enabled&quot;: true,</span><br><span class="line">#下载完成的保存路径</span><br><span class="line">&quot;download-dir&quot;: &quot;/home/transmission/Downloads&quot;,</span><br><span class="line">#开启下载队列,其实就是最大可同时下载数</span><br><span class="line">&quot;download-queue-enabled&quot;: true,</span><br><span class="line">#下载队列数设置,默认5,表示同时最多只能下载5个任务,多余的需要等待</span><br><span class="line">&quot;download-queue-size&quot;: 5,</span><br><span class="line">#等于0时不加密,1是优先加密,2是必须加密,如果BT下载的话不加密容易被迅雷吸血,但是加密了可能没那么多Peer,所以看你自己资源了</span><br><span class="line">&quot;encryption&quot;: 1,</span><br><span class="line">#空闲做种限时,默认30,即空闲30分钟后停止做种</span><br><span class="line">&quot;idle-seeding-limit&quot;: 30,</span><br><span class="line">#是否启用空闲做种限时</span><br><span class="line">&quot;idle-seeding-limit-enabled&quot;: false,</span><br><span class="line">#未完成目录,下载未完成时文件保存位置</span><br><span class="line">&quot;incomplete-dir&quot;: &quot;/home/transmission/unDownloads&quot;,</span><br><span class="line">#启用未完成目录</span><br><span class="line">&quot;incomplete-dir-enabled&quot;: false,</span><br><span class="line">#关闭LDP(本地节点发现),PT需要关闭</span><br><span class="line">&quot;lpd-enabled&quot;: false,</span><br><span class="line">#日志消息等级</span><br><span class="line">&quot;message-level&quot;: 2,</span><br><span class="line">#拥堵算法</span><br><span class="line">&quot;peer-congestion-algorithm&quot;: &quot;&quot;,</span><br><span class="line">&quot;peer-id-ttl-hours&quot;: 6,</span><br><span class="line">#全局种子最大连接数,这个看你下载队列和下面那个参数决定,反正大了速度快,但是更吃资源,如果是VPS建议不要太大,容易被当做滥用</span><br><span class="line">&quot;peer-limit-global&quot;: 200,</span><br><span class="line">#每个种子最多连接数</span><br><span class="line">&quot;peer-limit-per-torrent&quot;: 50,</span><br><span class="line">#传入端口号</span><br><span class="line">&quot;peer-port&quot;: 51413,</span><br><span class="line">#传入端口号随机值范围上限</span><br><span class="line">&quot;peer-port-random-high&quot;: 65535,</span><br><span class="line">#传入端口号随机值范围下限</span><br><span class="line">&quot;peer-port-random-low&quot;: 49152,</span><br><span class="line">#启用随机端口,默认是关闭的,如果改成true,则启动transmission时会在传入端口号范围上限和下限随机选择一个端口</span><br><span class="line">&quot;peer-port-random-on-start&quot;: false,</span><br><span class="line">#设置传输TCP数据包的服务类型https://en.wikipedia.org/wiki/Type_of_service</span><br><span class="line">&quot;peer-socket-tos&quot;: &quot;default&quot;,</span><br><span class="line">#节点交换,参考https://en.wikipedia.org/wiki/Peer_exchange ,PT请务必关闭,不然你肯定会被封号</span><br><span class="line">&quot;pex-enabled&quot;: true,</span><br><span class="line">#启用端口转发(uPnP),如果路由支持并且也开启了uPnP,则路由会自动做端口映射</span><br><span class="line">&quot;port-forwarding-enabled&quot;: true,</span><br><span class="line">#预分配文件磁盘空间,0=关闭,1=快速,2=完全,默认取1,防止文件下载了一半后才发现磁盘空间不够,取2时耗时较多,但是可以减少磁盘碎片</span><br><span class="line">&quot;preallocation&quot;: 1,</span><br><span class="line">#启用预取缓存</span><br><span class="line">&quot;prefetch-enabled&quot;: true,</span><br><span class="line">#启用队列暂停</span><br><span class="line">&quot;queue-stalled-enabled&quot;: true,</span><br><span class="line">#队列暂停分钟</span><br><span class="line">&quot;queue-stalled-minutes&quot;: 30,</span><br><span class="line">#分享率限制,即上传下载比例达到多少停止做种</span><br><span class="line">&quot;ratio-limit&quot;: 2,</span><br><span class="line">#启用分享率限制</span><br><span class="line">&quot;ratio-limit-enabled&quot;: false,</span><br><span class="line">#重命名未完成文件,在未完成的文件名后添加后缀,默认true,未完成目录中的文件会带上.part后缀</span><br><span class="line">&quot;rename-partial-files&quot;: true,</span><br><span class="line">#RPC远程控制验证,默认关闭</span><br><span class="line">&quot;rpc-authentication-required&quot;: false,</span><br><span class="line">#远程控制地址绑定,默认表示任何地址都能访问</span><br><span class="line">&quot;rpc-bind-address&quot;: &quot;0.0.0.0&quot;,</span><br><span class="line">#启用远程连接,默认启用</span><br><span class="line">&quot;rpc-enabled&quot;: true,</span><br><span class="line">#默认密码这里是加密的,直接以明文修改,启动后会自动加密</span><br><span class="line">&quot;rpc-password&quot;: &quot;&#123;e013e79faa7d1d0f616bed0ccbaa24b51a33e727bE7LzgYv&quot;,</span><br><span class="line">#Web控制台的端口号</span><br><span class="line">&quot;rpc-port&quot;: 9091,</span><br><span class="line">#这个地址会自动跳转</span><br><span class="line">&quot;rpc-url&quot;: &quot;/transmission/&quot;,</span><br><span class="line">#远程访问的用户名称</span><br><span class="line">&quot;rpc-username&quot;: &quot;senra&quot;,</span><br><span class="line">#允许远程连接的IP地址白名单,支持通配符,多个IP以逗号分隔,默认只允许本地</span><br><span class="line">&quot;rpc-whitelist&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">#启用IP认证模式,如果启用,那么只能在白名单的地址才能连接</span><br><span class="line">&quot;rpc-whitelist-enabled&quot;: false,</span><br><span class="line">#忽略暂停的种子</span><br><span class="line">&quot;scrape-paused-torrents-enabled&quot;: true,</span><br><span class="line">#在torrent完成时运行脚本,默认关闭,这功能可以实现下载完成自动回调啥的</span><br><span class="line">&quot;script-torrent-done-enabled&quot;: false,</span><br><span class="line">#脚本路径</span><br><span class="line">&quot;script-torrent-done-filename&quot;: &quot;&quot;,</span><br><span class="line">#启用做种队列</span><br><span class="line">&quot;seed-queue-enabled&quot;: false,</span><br><span class="line">#做种队列大小</span><br><span class="line">&quot;seed-queue-size&quot;: 10,</span><br><span class="line">#下载速度限制,单位KB/s</span><br><span class="line">&quot;speed-limit-down&quot;: 100,</span><br><span class="line">#启用下载速度限制.默认关闭</span><br><span class="line">&quot;speed-limit-down-enabled&quot;: false,</span><br><span class="line">#上传速度限制,单位KB/s</span><br><span class="line">&quot;speed-limit-up&quot;: 100,</span><br><span class="line">#启用上传速度限制.默认关闭</span><br><span class="line">&quot;speed-limit-up-enabled&quot;: false,</span><br><span class="line">#添加种子文件后,自动开始,如果为false,添加种子后不会自动开始</span><br><span class="line">&quot;start-added-torrents&quot;: true,</span><br><span class="line">#是否删除监控目录添加的种子文件,也就是说在watch-dir监控的目录下添加种子文件后,任务开始后会自动删除添加的种子文件</span><br><span class="line">&quot;trash-original-torrent-files&quot;: false,</span><br><span class="line">#文件权限的掩码,默认18即755权限,如果改成0是最高权限,下载回来的文件权限就是777</span><br><span class="line">&quot;umask&quot;: 18,</span><br><span class="line">#每个种子上传连接数</span><br><span class="line">&quot;upload-slots-per-torrent&quot;: 14,</span><br><span class="line">#UTP传输是否启用</span><br><span class="line">&quot;utp-enabled&quot;: true,</span><br><span class="line">#自动监控种子目录,将种子文件下载或放在此文件夹下,会自动开始下载文件,该配置不在默认配置文件中,需要手动添加</span><br><span class="line">&quot;watch-dir&quot;: &quot;/home/transmission/Torrents&quot;,</span><br><span class="line">#是否开启自动监控种子目录,该配置不在默认配置文件中,需要手动添加</span><br><span class="line">&quot;watch-dir-enabled&quot;: true</span><br><span class="line"> </span><br><span class="line">####请注意每行配置参数都是以逗号结尾,最后一行参数没有逗号####</span><br></pre></td></tr></table></figure>

<h3 id="6、保存修改后-需重启服务"><a href="#6、保存修改后-需重启服务" class="headerlink" title="6、保存修改后, 需重启服务"></a>6、保存修改后, 需重启服务</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart transmission-daemon.service</span><br></pre></td></tr></table></figure>

<h3 id="7、其它的启动方法"><a href="#7、其它的启动方法" class="headerlink" title="7、其它的启动方法:"></a>7、其它的启动方法:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service transmission-daemon start</span><br><span class="line">service transmission-daemon stop</span><br></pre></td></tr></table></figure>

<h2 id="二、编译安装"><a href="#二、编译安装" class="headerlink" title="二、编译安装"></a>二、编译安装</h2><p>这个方法会比较麻烦一点，推荐使用第一种方法。</p>
<h3 id="1、安装相关依赖"><a href="#1、安装相关依赖" class="headerlink" title="1、安装相关依赖"></a>1、安装相关依赖</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum groupinstall -y &#x27;development tools&#x27;</span><br><span class="line">yum -y install gcc gcc-c++ m4 make automake libtool gettext openssl-devel wget perl-ExtUtils-CBuilder perl-ExtUtils-MakeMaker psmisc</span><br></pre></td></tr></table></figure>

<h3 id="2、编译libevent"><a href="#2、编译libevent" class="headerlink" title="2、编译libevent"></a>2、编译libevent</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/local/src</span><br><span class="line">wget https://down.whsir.com/downloads/libevent-2.1.8-stable.tar.gz</span><br><span class="line">tar zxf libevent-2.1.8-stable.tar.gz</span><br><span class="line">cd libevent-2.1.8-stable</span><br><span class="line">./configure --prefix=/usr</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">cd ..</span><br></pre></td></tr></table></figure>

<h3 id="3、编译expat"><a href="#3、编译expat" class="headerlink" title="3、编译expat"></a>3、编译expat</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://down.whsir.com/downloads/expat-2.2.5.tar.bz2</span><br><span class="line">tar xf expat-2.2.5.tar.bz2</span><br><span class="line">cd expat-2.2.5</span><br><span class="line">./configure --prefix=/usr</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">cd ..</span><br></pre></td></tr></table></figure>

<h3 id="4、编译XML-Parser"><a href="#4、编译XML-Parser" class="headerlink" title="4、编译XML-Parser"></a>4、编译XML-Parser</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://down.whsir.com/downloads/XML-Parser-2.44.tar.gz</span><br><span class="line">tar zxf XML-Parser-2.44.tar.gz</span><br><span class="line">cd XML-Parser-2.44</span><br><span class="line">perl Makefile.PL</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">cd ..</span><br></pre></td></tr></table></figure>

<h3 id="5、编译intltool"><a href="#5、编译intltool" class="headerlink" title="5、编译intltool"></a>5、编译intltool</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://down.whsir.com/downloads/intltool-0.51.0.tar.gz</span><br><span class="line">tar zxf intltool-0.51.0.tar.gz</span><br><span class="line">cd intltool-0.51.0</span><br><span class="line">./configure --prefix=/usr</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">cd ..</span><br></pre></td></tr></table></figure>

<h3 id="6、编译libcurl"><a href="#6、编译libcurl" class="headerlink" title="6、编译libcurl"></a>6、编译libcurl</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://curl.haxx.se/download/curl-7.60.0.tar.gz</span><br><span class="line">tar zxf curl-7.60.0.tar.gz</span><br><span class="line">cd curl-7.60.0</span><br><span class="line">./configure --prefix=/usr</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">cd ..</span><br></pre></td></tr></table></figure>

<h3 id="7、编译zlib"><a href="#7、编译zlib" class="headerlink" title="7、编译zlib"></a>7、编译zlib</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://down.whsir.com/downloads/zlib-1.2.11.tar.gz</span><br><span class="line">tar zxf zlib-1.2.11.tar.gz</span><br><span class="line">cd zlib-1.2.11</span><br><span class="line">./configure --prefix=/usr</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">echo &quot;export PKG_CONFIG_PATH=/usr/lib/pkgconfig&quot; &gt;&gt; ~/.bashrc</span><br><span class="line">source ~/.bashrc</span><br><span class="line">cd ..</span><br></pre></td></tr></table></figure>

<h3 id="8、最后下载编译transmission"><a href="#8、最后下载编译transmission" class="headerlink" title="8、最后下载编译transmission"></a>8、最后下载编译transmission</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://down.whsir.com/downloads/transmission-2.94.tar.xz</span><br><span class="line">tar xf transmission-2.94.tar.xz</span><br><span class="line">cd transmission-2.94</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<p><a href="https://wwu.lanzoui.com/ic1oYx0kkgj">https://wwu.lanzoui.com/ic1oYx0kkgj</a><br>密码:gu9t</p>
<h3 id="9、初始化transmission配置文件，-g是指定transmission配置文件路径"><a href="#9、初始化transmission配置文件，-g是指定transmission配置文件路径" class="headerlink" title="9、初始化transmission配置文件，-g是指定transmission配置文件路径"></a>9、初始化transmission配置文件，-g是指定transmission配置文件路径</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">transmission-daemon -g /usr/local/transmission</span><br></pre></td></tr></table></figure>

<h3 id="10、停止transmission（想要修改transmission配置，一定要先停止）"><a href="#10、停止transmission（想要修改transmission配置，一定要先停止）" class="headerlink" title="10、停止transmission（想要修改transmission配置，一定要先停止）"></a>10、停止transmission（想要修改transmission配置，一定要先停止）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">killall transmission-daemon</span><br></pre></td></tr></table></figure>

<h3 id="11、修改transmission配置文件"><a href="#11、修改transmission配置文件" class="headerlink" title="11、修改transmission配置文件"></a>11、修改transmission配置文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /usr/local/transmission/settings.json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;download-dir&quot;: &quot;/sdb/bt/Downloads&quot;, 下载完成的保存路径</span><br><span class="line">&quot;incomplete-dir&quot;: &quot;/sdb/bt/tmp&quot;, 未下载完成的保存路径</span><br><span class="line">&quot;incomplete-dir-enabled&quot;: true, 启用未下载完成的保存路径</span><br><span class="line">&quot;rpc-authentication-required&quot;: true, 远程控制验证，默认关闭</span><br><span class="line">&quot;rpc-password&quot;: &quot;whsir&quot;, 默认密码这里是加密的，启动后会自动加密</span><br><span class="line">&quot;rpc-port&quot;: 9091, 网页GUI的端口号，可自行修改</span><br><span class="line">&quot;rpc-username&quot;: &quot;whsir&quot;, 远程电脑登录网页GUI的用户名称</span><br><span class="line">&quot;rpc-whitelist&quot;: &quot;127.0.0.1&quot;, 允许远程连接的IP地址白名单，支持通配符，多个IP以逗号分隔</span><br><span class="line">&quot;rpc-whitelist-enabled&quot;: false, 启用IP认证模式，如果启用，那么只能在白名单的地址才能连接</span><br></pre></td></tr></table></figure>

<h3 id="12、修改后使用新配置运行"><a href="#12、修改后使用新配置运行" class="headerlink" title="12、修改后使用新配置运行"></a>12、修改后使用新配置运行</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">transmission-daemon -g /usr/local/transmission</span><br></pre></td></tr></table></figure>

<h1 id="使用-transmission-服务"><a href="#使用-transmission-服务" class="headerlink" title="使用 transmission 服务"></a>使用 transmission 服务</h1><p>transmission BitTorrent 客户端默认端口是 9091, 你可以在浏览器打开 <a href="http://ip/">http://IP</a>地址:9091/ 打开 UI 界面, 然后用上面配的账号和密码登录. 更多的配置参数例如文件保存地址, 下载速度, 上传速度都可以在界面上配置. 更详细的使用说明推荐访问官方文档。</p>
<h1 id="最后进行汉化"><a href="#最后进行汉化" class="headerlink" title="最后进行汉化"></a>最后进行汉化</h1><p>此汉化包来自于“栽培者”，github地址：<a href="https://github.com/ronggang/transmission-web-control">https://github.com/ronggang/transmission-web-control</a>，在此感谢作者的汉化。<br>本地下载地址：<a href="https://down.whsir.com/downloads/transmission-zh-CN-web-1.6.tar.gz">https://down.whsir.com/downloads/transmission-zh-CN-web-1.6.tar.gz</a><br>下载后将web文件夹内容覆盖原有Transmission web文件内容/usr/local/share/transmission/web<br>浏览器再次打开就会发现全中文了，右上角可以随时切换回原版UI。</p>
<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>如果打开浏览器访问不了，请去看看服务是否启动了以及是否防火墙阻止了9091这个端口。</p>
<h3 id="1、开放和关闭端口"><a href="#1、开放和关闭端口" class="headerlink" title="1、开放和关闭端口"></a>1、开放和关闭端口</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=9091/tcp --permanent     # 开放端口</span><br><span class="line">firewall-cmd --zone=public --remove-port=9091/tcp --permanent  # 关闭端口</span><br><span class="line">firewall-cmd --reload                                          # 重新载入配置，让开放或关闭的端口配置生效</span><br><span class="line"></span><br><span class="line">--zone=public：表示作用域为公共</span><br><span class="line"></span><br><span class="line">--permanent：表示永久生效</span><br></pre></td></tr></table></figure>

<h3 id="2、查看端口开放情况"><a href="#2、查看端口开放情况" class="headerlink" title="2、查看端口开放情况"></a>2、查看端口开放情况</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --list-ports            # 查询端口开放列表</span><br><span class="line">firewall-cmd --zone=public --query-port=9091       # 查询具体端口是否开放</span><br></pre></td></tr></table></figure>

<h3 id="3、开启和关闭防火墙"><a href="#3、开启和关闭防火墙" class="headerlink" title="3、开启和关闭防火墙"></a>3、开启和关闭防火墙</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start firewalld      # 启动防火墙</span><br><span class="line">systemctl status firewalld     # 查看防火墙状态</span><br><span class="line">systemctl stop firewalld       # 关闭防火墙</span><br><span class="line"></span><br><span class="line">systemctl disable firewalld    # 开启不启动防火墙</span><br><span class="line">systemctl enable firewalld     # 开机启动防火墙</span><br></pre></td></tr></table></figure>

<h3 id="4、其他"><a href="#4、其他" class="headerlink" title="4、其他"></a>4、其他</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firewall-cmd --version    # 查看版本</span><br><span class="line">firewall-cmd --help       # 查看帮助</span><br><span class="line">firewall-cmd --state      # 查看运行状态</span><br></pre></td></tr></table></figure>
<p>参考文档</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum安装</span><br><span class="line">http://www.senra.me/awesome-downloader-series-transmission-classical-bt-pt-tool/?utm_source=tuicool&amp;utm_medium=referral</span><br><span class="line">编译安装</span><br><span class="line">https://blog.whsir.com/post-2881.html</span><br></pre></td></tr></table></figure>



<span id="more"></span>

]]></content>
  </entry>
  <entry>
    <title>EXSI虚拟机OpenWrt存储空间扩容</title>
    <url>/2023/37735/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<p>当我们使用esxi创建openwrt的虚拟机时,采取直接添加现有硬盘时可能会出现根目录内存不足的情况,本文将介绍一种为虚拟机添加硬盘的方法.首先在esxi后台停止openwrt的虚拟机,然后为openwrt添加一块新标准硬盘容量自己随意.</p>
<h2 id="磁盘分区"><a href="#磁盘分区" class="headerlink" title="磁盘分区"></a>磁盘分区</h2><p>SSH 终端连接 Open­Wrt，运行下面命令查看磁盘信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fdisk -l</span><br></pre></td></tr></table></figure>
<p>此时，会显示一个未被使用的磁盘 sdb 即新磁盘，，屏幕打印信息如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@xiaoming:~# fdisk -l</span><br><span class="line">Disk /dev/loop0: 874.75 MiB, 917241856 bytes, 1791488 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">GPT PMBR size mismatch (2130463 != 2130494) will be corrected by write.</span><br><span class="line">The backup GPT table is corrupt, but the primary appears OK, so that will be used.</span><br><span class="line">The backup GPT table is not on the end of the device.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/sda: 1.02 GiB, 1090813440 bytes, 2130495 sectors</span><br><span class="line">Disk model: Virtual disk    </span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel type: gpt</span><br><span class="line">Disk identifier: 79C88912-01B9-8267-AA0B-42099DBC2600</span><br><span class="line"></span><br><span class="line">Device      Start     End Sectors  Size Type</span><br><span class="line">/dev/sda1     512   33279   32768   16M Linux filesystem</span><br><span class="line">/dev/sda2   33280 2130431 2097152    1G Linux filesystem</span><br><span class="line">/dev/sda128    34     511     478  239K BIOS boot</span><br><span class="line"></span><br><span class="line">Partition table entries are not in disk order.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/sdb: 2 GiB, 2147483648 bytes, 4194304 sectors</span><br><span class="line">Disk model: Virtual disk    </span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br></pre></td></tr></table></figure>
<p>若要使用这块新磁盘，就需要对新磁盘进行分区，运行以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fdisk /dev/sdb</span><br></pre></td></tr></table></figure>
<p>创建一个主分区，分区操作步骤如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@xiaoming:~# fdisk /dev/sdb</span><br><span class="line"></span><br><span class="line">Welcome to fdisk (util-linux 2.37.3).</span><br><span class="line">Changes will remain in memory only, until you decide to write them.</span><br><span class="line">Be careful before using the write command.</span><br><span class="line"></span><br><span class="line">Device does not contain a recognized partition table.</span><br><span class="line">Created a new DOS disklabel with disk identifier 0x91cff149.</span><br><span class="line"></span><br><span class="line">Command (m for help): n (输入n 创建分区)</span><br><span class="line">Partition type</span><br><span class="line">   p   primary (0 primary, 0 extended, 4 free)</span><br><span class="line">   e   extended (container for logical partitions)</span><br><span class="line">Select (default p): p (输入p 创建主分区)</span><br><span class="line">Partition number (1-4, default 1):  (直接回车,默认创建一个分区)</span><br><span class="line">First sector (2048-4194303, default 2048): (直接回车)</span><br><span class="line">Last sector, +/-sectors or +/-size&#123;K,M,G,T,P&#125; (2048-4194303, default 4194303):(直接回车) </span><br><span class="line"></span><br><span class="line">Created a new partition 1 of type &#x27;Linux&#x27; and of size 2 GiB.</span><br><span class="line"></span><br><span class="line">Command (m for help): w (输入w 写入分区表)</span><br><span class="line">The partition table has been altered.</span><br><span class="line">Calling ioctl() to re-read partition table.</span><br><span class="line">Syncing disks.</span><br></pre></td></tr></table></figure>
<p>查看磁盘信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fdisk -l</span><br></pre></td></tr></table></figure>
<p>屏幕打印信息如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@xiaoming:~# fdisk -l</span><br><span class="line">Disk /dev/loop0: 874.75 MiB, 917241856 bytes, 1791488 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">GPT PMBR size mismatch (2130463 != 2130494) will be corrected by write.</span><br><span class="line">The backup GPT table is corrupt, but the primary appears OK, so that will be used.</span><br><span class="line">The backup GPT table is not on the end of the device.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/sda: 1.02 GiB, 1090813440 bytes, 2130495 sectors</span><br><span class="line">Disk model: Virtual disk    </span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel type: gpt</span><br><span class="line">Disk identifier: 79C88912-01B9-8267-AA0B-42099DBC2600</span><br><span class="line"></span><br><span class="line">Device      Start     End Sectors  Size Type</span><br><span class="line">/dev/sda1     512   33279   32768   16M Linux filesystem</span><br><span class="line">/dev/sda2   33280 2130431 2097152    1G Linux filesystem</span><br><span class="line">/dev/sda128    34     511     478  239K BIOS boot</span><br><span class="line"></span><br><span class="line">Partition table entries are not in disk order.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/sdb: 2 GiB, 2147483648 bytes, 4194304 sectors</span><br><span class="line">Disk model: Virtual disk    </span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel type: dos</span><br><span class="line">Disk identifier: 0x91cff149</span><br><span class="line"></span><br><span class="line">Device     Boot Start     End Sectors Size Id Type</span><br><span class="line">/dev/sdb1        2048 4194303 4192256   2G 83 Linux</span><br></pre></td></tr></table></figure>
<p>其中 /dev/sdb1 即新创建的新分区分配的盘符格式化将分区格式化 ext4 文件系统：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkfs.ext4 /dev/sdb1</span><br></pre></td></tr></table></figure>
<h2 id="挂载分区"><a href="#挂载分区" class="headerlink" title="挂载分区"></a>挂载分区</h2><p>进入 Open­Wrt 管理后台，依次点击 <strong>系统</strong> - <strong>挂载点</strong> 找到并点击全局设置中的 <strong>生成配置</strong> 。<img src="http://img.duya233.top/duya-image1652108818291-4e6d0633-7917-4adc-a817-50c4cafd6004.png">在 <strong>挂载点</strong> 找到创建的新分区，点击 <strong>修改</strong> 重新调整挂载项目的设置。<img src="http://img.duya233.top/duya-image1652108842548-3f4c5036-6b45-4c2f-9ef9-c71ac3f94205.png">勾选 <strong>启用此挂载点</strong>，<strong>挂载点</strong> 选择为 <strong>作为根文件系统使用</strong> ，完整复制根目录准备中的所有命令行后，点击 <strong>保存并应用</strong>。<img src="http://img.duya233.top/duya-image1652108926158-0a57b49b-9879-4459-8731-4c459d8a595d.png" alt="image.png">⚠️ <strong>上面复制得到的命令行不要直接运行！！！不要直接运行！！！否则报错。</strong>需要手动修改命令行中 <code>mount /dev/sda1 /tmp/extroot</code> 为 fdisk 创建的新分区盘符，例如这里应修改为 <code>mount /dev/sdb1 /tmp/extroot</code>，然后进入 SSH 终端，运行修改后的完整命令行，如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p /tmp/introot</span><br><span class="line">mkdir -p /tmp/extroot</span><br><span class="line">mount --bind / /tmp/introot</span><br><span class="line">mount /dev/sdb1 /tmp/extroot # 修改后</span><br><span class="line">tar -C /tmp/introot -cvf - . | tar -C /tmp/extroot -xf -</span><br><span class="line">umount /tmp/introot</span><br><span class="line">umount /tmp/extroot</span><br></pre></td></tr></table></figure>
<p>回车键到底，直到跑完所有命令行。然后运行 reboot 重启 Open­Wrt ～<img src="http://img.duya233.top/duya-image1652109278616-aad0a9b3-42f3-46e2-abaf-bb3e9c523f51.png" alt="image.png"></p>
<span id="more"></span>

]]></content>
      <tags>
        <tag>ESXI</tag>
        <tag>OpenWrt</tag>
      </tags>
  </entry>
  <entry>
    <title>Element-UI的Cascader级联选择器懒加载插件封装</title>
    <url>/2023/17868/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<p>直接上代码，使用的接口还是上一篇文章的给出的接口。<br>实现懒加载数据。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;block&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-cascader</span> <span class="attr">v-model</span>=<span class="string">&quot;value&quot;</span> <span class="attr">:props</span>=<span class="string">&quot;props&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;handleChange&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-cascader</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; getprovinces, getcities, getareas, getstreets &#125; <span class="keyword">from</span> <span class="string">&#x27;@/api/riskarea&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  data () &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">value</span>: [],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">props</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">value</span>: <span class="string">&#x27;code&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">label</span>: <span class="string">&#x27;name&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">lazy</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">async</span> lazyLoad (node, resolve) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">console</span>.<span class="title function_">log</span>(node)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">const</span> &#123; level &#125; = node</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">if</span> (node.<span class="property">level</span> === <span class="number">0</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 获取省</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> <span class="title function_">resolve</span>(<span class="keyword">await</span> <span class="title function_">getprovinces</span>())</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.<span class="property">level</span> === <span class="number">1</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 获取市</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> <span class="title function_">resolve</span>(<span class="keyword">await</span> <span class="title function_">getcities</span>(node.<span class="property">value</span>))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (level === <span class="number">2</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 获取县/区</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> <span class="title function_">resolve</span>(<span class="keyword">await</span> <span class="title function_">getareas</span>(node.<span class="property">value</span>))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (level === <span class="number">3</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 获取乡级</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> <span class="title function_">resolve</span>(<span class="keyword">await</span> <span class="title function_">getstreets</span>(node.<span class="property">value</span>))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> <span class="title function_">resolve</span>([])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    handleChange (value) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<span id="more"></span>

]]></content>
      <tags>
        <tag>Element-UI</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Git使用笔记笔记</title>
    <url>/2023/22275/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />



<h4 id="一-走入Git"><a href="#一-走入Git" class="headerlink" title="一. 走入Git"></a>一. 走入Git</h4><h5 id="1-Git介绍"><a href="#1-Git介绍" class="headerlink" title="1.Git介绍"></a>1.Git介绍</h5><blockquote>
<p>Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</p>
<p>Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</p>
</blockquote>
<ul>
<li><p>版本控制</p>
<p>版本控制（Revision control）是一种在开发的过程中用于管理我们对文件、目录或工程等内容的修改历史，方便查看更改历史记录，备份以便恢复以前的版本的软件工程技术。</p>
</li>
<li><p>团队协作</p>
<p>从单兵作战转换为团队开发。</p>
</li>
</ul>
<h5 id="2-Git对比SVN"><a href="#2-Git对比SVN" class="headerlink" title="2.Git对比SVN"></a>2.Git对比SVN</h5><img src="http://img.duya233.top/duya-imageimage-20220907110802124.png" alt="image-20220907110331660" style="zoom:67%;" />



<ol>
<li><p>SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而工作的时候，用的都是自己的电脑，所以首先要从中央服务器得到最新的版本，然后工作，完成工作后，需要把自己的代码推送到中央服务器。集中式版本控制系统是必须联网才能工作。</p>
</li>
<li><p>Git是分布式版本控制系统，没有中央服务器，每个人的电脑就是一个完整的版本库，工作的时候不需要联网了，因为版本都在自己电脑上，可以离线工作。</p>
</li>
</ol>
<h5 id="3-Git安装"><a href="#3-Git安装" class="headerlink" title="3.Git安装"></a>3.Git安装</h5><blockquote>
<p><a href="https://git-scm.com/">https://git-scm.com/</a></p>
</blockquote>
<img src="http://img.duya233.top/duya-imageimage-20220908074740564.png" alt="image-20220907110802124" style="zoom:50%;float:left" />

<ul>
<li><p>下载好以后，直接双击进行安装就行</p>
</li>
<li><p>一直下一步就可以，安装再默认路径就行</p>
</li>
<li><p>安装完毕后检测一下安装是否成功</p>
<ol>
<li><p>方法一： 打开 <code>cmd</code> 窗口，输入指令检查</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检测 git 是否安装</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git --version</span></span><br></pre></td></tr></table></figure>

<ul>
<li>出现版本号，说明安装成功</li>
</ul>
</li>
</ol>
</li>
<li><p>安装完毕，接下来我们就可以开始使用了</p>
</li>
</ul>
<h4 id="二-Git常用命令"><a href="#二-Git常用命令" class="headerlink" title="二.Git常用命令"></a>二.Git常用命令</h4><h5 id="1-设置用户签名"><a href="#1-设置用户签名" class="headerlink" title="1.设置用户签名"></a>1.设置用户签名</h5><blockquote>
<p>签名的作用就是用来标识用户，以区分不同的开发人员。</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">  git config --global user.email &quot;you@example.com&quot;</span><br><span class="line">  git config --global user.name &quot;Your Name&quot;</span><br></pre></td></tr></table></figure>



<h5 id="2-初始化本地库"><a href="#2-初始化本地库" class="headerlink" title="2.初始化本地库"></a>2.初始化本地库</h5><ul>
<li><p>我们希望一个文件夹被 <code>git</code> 管理的话，那么就要在一个文件夹下进行 <strong>git 初始化</strong></p>
</li>
<li><p>找到一个希望被 <code>git</code> 管理的文件夹</p>
</li>
<li><p>在文件夹内单击鼠标右键，点开 <code>Git Bash Here</code></p>
</li>
<li><p>输入指令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">git 初始化的指令</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git init</span></span><br></pre></td></tr></table></figure></li>
<li><p>然后文件夹内会多一个 <code>.git</code> 的文件夹（这个文件夹是一个隐藏文件夹）</p>
</li>
<li><p>这个时候，我的这个 <code>git_demo</code> 文件夹就被 <code>git</code> 管理了</p>
<ul>
<li><code>git</code> 不光管理这一个文件夹，包括所有的子文件夹和子文件都会被管理</li>
</ul>
</li>
<li><p>注意： <strong>只有当一个文件夹被 git 管理以后，我们才可以使用 git 的功能去做版本管理</strong></p>
<ul>
<li>也就是说，我们必须要把我们电脑中的某一个文件夹授权给 <code>git</code></li>
<li><code>git</code> 才能对这个文件夹里面的内容进行各种操作</li>
<li>而 <code>git init</code> 就是在进行这个授权的操作</li>
</ul>
</li>
</ul>
<h5 id="3-Git工作区、暂存区和版本库"><a href="#3-Git工作区、暂存区和版本库" class="headerlink" title="3.Git工作区、暂存区和版本库"></a>3.Git工作区、暂存区和版本库</h5><p><img src="http://img.duya233.top/duya-imageimage-20220907110331660.png" alt="image-20220907112424167"></p>
<p><strong>托管平台</strong></p>
<ul>
<li>局域网(内网)<ul>
<li>gitlab</li>
</ul>
</li>
<li>公网（外网）<ul>
<li>gitlab</li>
<li>github</li>
<li>gitee 码云</li>
</ul>
</li>
</ul>
<h5 id="4-git-add"><a href="#4-git-add" class="headerlink" title="4.git add"></a>4.git add</h5><ul>
<li><p>我们要放入暂存区，要使用 <code>git add</code> 指令</p>
</li>
<li><p>把单独一个文件放在暂存区</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">把文件夹下的 index.txt 文本放在暂存区</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add index.txt</span></span><br></pre></td></tr></table></figure></li>
<li><p>把单独一个文件夹放在暂存区（暂存区不能存放空文件夹）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">把文件夹下的 ceshi文件夹 放在暂存区</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add ceshi/</span></span><br></pre></td></tr></table></figure></li>
<li><p>把所有文件都放在暂存区</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">把文件夹下所有的内容都放在暂存区</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add --all</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">git add --all 有一个简单的写法</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add .</span></span><br></pre></td></tr></table></figure>

<ul>
<li>全部存放的时候使用上面两个指令哪个都行</li>
</ul>
</li>
</ul>
<h5 id="5-git-commit"><a href="#5-git-commit" class="headerlink" title="5.git commit"></a>5.git commit</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">把暂存区的内容放到历史区</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -m <span class="string">&quot;我是第一个版本&quot;</span></span></span><br></pre></td></tr></table></figure>

<p>我们使用 <code>git log</code> 这个指令查看版本信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前历史区版本信息</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span></span></span><br></pre></td></tr></table></figure>




<ul>
<li><p>我们使用 <code>git reset --hard 版本编号</code> 进行历史回退</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">回退到上一次提交的版本</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reset --hard HEAD^</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">回退到上上次提交的版本</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reset --hard HEAD^^</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reset --hard HEAD~2</span></span><br></pre></td></tr></table></figure></li>
</ul>
<img src="http://img.duya233.top/duya-imageimage-20220907112424167.png" alt="image-20220908074740564" style="zoom:67%;float:left" />

<h5 id="6-git-revert-与-git-reset"><a href="#6-git-revert-与-git-reset" class="headerlink" title="6.git revert 与 git reset"></a>6.git revert 与 git reset</h5><p><img src="http://img.duya233.top/duya-imageimage-20220910091354495.png" alt="image-20220908075826032"></p>
<ul>
<li>git reset 是回滚到对应的commit-id，相当于是删除了commit-id以后的所有的提交，并且不会产生新的commit-id记录，如果要推送到远程服务器的话，需要强制推送-f</li>
<li>git revert 是反做撤销其中的commit-id，然后重新生成一个commit-id。本身不会对其他的提交commit-id产生影响，如果要推送到远程服务器的话，就是普通的操作git push就好了</li>
</ul>
<h4 id="三-Git-分支"><a href="#三-Git-分支" class="headerlink" title="三. Git 分支"></a>三. Git 分支</h4><h5 id="1-初识分支"><a href="#1-初识分支" class="headerlink" title="1.初识分支"></a>1.初识分支</h5><ul>
<li><p><code>git</code> 分支，就是我们自己把我们的整个文件夹分成一个一个独立的区域</p>
</li>
<li><p>比如我在开发 <strong>登录</strong> 功能的时候，可以放在 <code>login</code> 分支下进行开发</p>
<ul>
<li>开发 <strong>列表</strong> 功能的时候，可以放在 <code>list</code> 分支下进行开发</li>
<li>大家互不干扰，每一个功能都是一个独立的功能分支</li>
</ul>
</li>
<li><p>这样开发就会好很多</p>
</li>
<li><p><code>git</code> 在初始化的时候，会自动生成一个分支，叫做 <code>master</code> </p>
</li>
<li><p>是表示主要分支的意思</p>
</li>
<li><p>我们就可以自己开辟出很多独立分支</p>
</li>
</ul>
<h5 id="2-创建分支"><a href="#2-创建分支" class="headerlink" title="2.创建分支"></a>2.创建分支</h5><ul>
<li><p>开辟一个分支使用 <code>git branch 分支名称</code> 指令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开辟一个 login 分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch login</span></span><br></pre></td></tr></table></figure></li>
<li><p>查看一下当前分支情况</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前分支情况</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch</span></span><br></pre></td></tr></table></figure>

<ul>
<li>会看到，当前有两个分支了</li>
<li>一个是 <code>master</code>，一个是 <code>login</code></li>
<li>前面有个 <code>*</code> 号，并且有高亮显示的，表示你当前所处的分支</li>
</ul>
</li>
</ul>
<h5 id="3-切换分支"><a href="#3-切换分支" class="headerlink" title="3.切换分支"></a>3.切换分支</h5><ul>
<li><p>我们对 <strong>登录</strong> 功能的开发要移动到 <code>login</code> 分支去完成</p>
</li>
<li><p>我们切换所处分支使用 <code>git checkout 分支名称</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到 login 分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout login</span></span><br></pre></td></tr></table></figure></li>
<li><p>然后我们在整个分支上进行 <strong>登录</strong> 功能的开发</p>
</li>
<li><p>开发完毕以后，我们就在当前分支上进行提交</p>
</li>
<li><p>提交以后我们进行分支切换</p>
<ul>
<li>发现 <code>master</code> 上面还是最初始的状态</li>
<li>而 <code>login</code> 分支上有我们新写的 <strong>登录</strong> 功能的代码</li>
</ul>
</li>
<li><p>我们按照分支把所有功能都开发完毕了以后</p>
<ul>
<li>只要把所有代码都合并到 <code>master</code> 主分支上就行了</li>
</ul>
</li>
</ul>
<h5 id="4-合并分支"><a href="#4-合并分支" class="headerlink" title="4.合并分支"></a>4.合并分支</h5><ul>
<li><p><code>git</code> 的合并分支，只能是把别的分支的内容合并到自己的分支上</p>
</li>
<li><p>使用的指令是 <code>git merge</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到 master 分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout master</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">把 login 的内容合并到自己的分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git merge login</span></span><br></pre></td></tr></table></figure></li>
<li><p>这个时候，我们刚才在 <code>login</code> 上开发的东西就都来到了 <code>master</code> 主分支上</p>
</li>
<li><p>如果是有多个分支的话，那么所有的最后都合并到 <code>master</code> 分支上的时候</p>
</li>
<li><p>我们的主分支上就有完整网站的所有页面</p>
<ul>
<li>各个分支上都是单独的页面和功能</li>
</ul>
</li>
</ul>
<h5 id="5-删除分支"><a href="#5-删除分支" class="headerlink" title="5.删除分支"></a>5.删除分支</h5><ul>
<li><p>这个时候我们开辟的分支就没有什么用了，就可以删除分支了</p>
<ol>
<li><p>先切换到别的分支</p>
</li>
<li><p>使用指令 <code>git branch -d 分支名称</code> 来删除</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">先切换到别的分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout master</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除 login 分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -d login</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<h4 id="四-远程仓库"><a href="#四-远程仓库" class="headerlink" title="四.远程仓库"></a>四.远程仓库</h4><ul>
<li>我们的所有内容已经全部保留在了本地历史区</li>
<li>理论上是不会丢失了<ul>
<li>但是如果把文件夹删除了，还是没有了</li>
</ul>
</li>
<li>所以我们要使用 <code>git</code> 把我们所有的内容推送到 <code>github</code> 上面保存起来</li>
<li>那么就本地文件夹就算删除了，那么远程上面还有一份，还可以拿回来使用</li>
<li>所以我们现在就要把本地内容推送到远程</li>
<li>这个时候我们接需要一个 <code>github</code> 的账号了</li>
<li>先去 <a href="https://github.com/">github官网</a> 注册一个账号</li>
</ul>
<h5 id="1-创建一个远程仓库"><a href="#1-创建一个远程仓库" class="headerlink" title="1.创建一个远程仓库"></a>1.创建一个远程仓库</h5><ul>
<li><p>有了 <code>github</code>  账号以后</p>
</li>
<li><p>我们就登录 <code>github</code> 网站，开辟一个远程仓库</p>
</li>
<li><p><code>github</code> 的远程也是以一个仓库一个仓库的形式来保存代码</p>
<ul>
<li>我们可以在一个 <code>github</code> 上保存很多的项目</li>
<li>只要一个项目一个仓库就可以了</li>
</ul>
</li>
<li><p>按照下面步骤开辟仓库</p>
<ol>
<li><p>先点击新建仓库</p>
<p><img src="http://img.duya233.top/duya-imageimage-20220910091438534.png"></p>
</li>
</ol>
</li>
</ul>
<h5 id="2-添加仓库地址"><a href="#2-添加仓库地址" class="headerlink" title="2.添加仓库地址"></a>2.添加仓库地址</h5><ul>
<li><p>接下来，要使用 <code>git</code> 上传代码了</p>
</li>
<li><p>我们先要告诉 <code>git</code> 上传到哪里</p>
</li>
<li><p>也就是给 <code>git</code> 添加一个上传的地址</p>
</li>
<li><p>我们还是来到我们的项目文件夹</p>
</li>
<li><p>使用 <code>git remote add origin 仓库地址</code> 来添加</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在项目文件夹下打开 git base</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加仓库地址</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote add origin *********************</span></span><br></pre></td></tr></table></figure>

<ul>
<li>remote：远程的意思</li>
<li>add：添加的意思</li>
<li>origin：是一个变量名（就是指代后面一长串的地址）</li>
</ul>
</li>
</ul>
<h5 id="3-git-push"><a href="#3-git-push" class="headerlink" title="3.git push"></a>3.git push</h5><ul>
<li><p>上传到哪里的地址我们已经添加好了</p>
</li>
<li><p>接下来就是上传内容了</p>
<ul>
<li>上传要保证 <strong>历史区</strong> 里面有内容</li>
<li>上传的过程会把 <strong>历史区</strong> 里面所有的内容上传到远端</li>
</ul>
</li>
<li><p>我们使用 <code>git push</code> 指令来上传</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">上传内容</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push -u origin master</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">表示把内容上传到 origin 这个地址</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">master 是上传到远程的 master 分支</span></span><br></pre></td></tr></table></figure>

<ul>
<li>如果当前分支与多个主机存在追踪关系，则可以使用-u选项指定一个默认主机，这样后面就可以不加任何参数使用git push。</li>
</ul>
</li>
<li><p>第二次上传</p>
<ul>
<li><p>第二次上传的时候，因为有刚才的记录，就不需要再写 <code>origin</code> 和 <code>master</code> 了</p>
</li>
<li><p>会默认传递到 <code>origin</code> 这个地址的 <code>master</code> 分支上</p>
</li>
<li><p>除非你要传递到别的分支上的时候再进行书写</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">第二次上传</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>到这里，就完成了一次 <code>git</code> 推送</p>
</li>
<li><p>这个时候本地的文件夹就真的可以删除了</p>
</li>
<li><p>因为远程有一份我们的内容，本地的删除了，可以直接把远程的拉回来就行</p>
</li>
</ul>
<h5 id="4-git-clone"><a href="#4-git-clone" class="headerlink" title="4.git clone"></a>4.git clone</h5><ul>
<li><p><code>git</code> 克隆是指把远程仓库里面的内容克隆一份到本地</p>
</li>
<li><p>可以克隆别人的 <strong>公开</strong> 的仓库，也可以克隆自己的仓库</p>
</li>
<li><p>克隆别人的仓库，我们只能拿下来用，修改后不能从新上传</p>
</li>
<li><p>克隆自己的仓库，我们修改后还可以再次上传更新</p>
</li>
<li><p>输入克隆指令 <code>git clone 仓库地址</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">直接克隆仓库</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> *************</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="5-git-pull"><a href="#5-git-pull" class="headerlink" title="5.git pull"></a>5.git pull</h5><ul>
<li><p>当人家的代码更新以后，你想获得最新的代码</p>
</li>
<li><p>我们不需要从新克隆</p>
</li>
<li><p>只要拉取一次代码就可以了</p>
</li>
<li><p>直接在项目文件夹里面使用指令下拉</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拉取远程最新代码</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git pull</span></span><br></pre></td></tr></table></figure></li>
<li><p>这样一来，你本地的仓库就可远程的仓库同步了</p>
</li>
</ul>
<h4 id="五-VScode集成Git"><a href="#五-VScode集成Git" class="headerlink" title="五.VScode集成Git"></a>五.VScode集成Git</h4><p>VSCode内置版本控制机制，并自带对Git和Github的支持，你也可以安装插件以支持其他控制软件，如SVN(需要先安装 SVN )等。</p>
<ol>
<li><p>初始化</p>
<img src="http://img.duya233.top/duya-imageimage-20220908075826032.png" alt="image-20220910091354495" style="zoom:50%;float:left;" /></li>
<li><p>可视化界面管理项目</p>
 <img src="http://img.duya233.top/duya-imagegithub开辟仓库1.png" alt="image-20220910091438534" style="zoom:67%;float:left;" /></li>
</ol>
<h4 id="六-gitignore"><a href="#六-gitignore" class="headerlink" title="六. gitignore"></a>六. gitignore</h4><blockquote>
<p>在一些项目中，我们不想让本地仓库的所有文件都上传到远程仓库中，而是有选择的上传，比如：一些依赖文件（node_modules下的依赖）、bin 目录下的文件、测试文件等。一方面将一些依赖、测试文件都上传到远程传输量很大，另一方面，一些文件对于你这边是可用的，在另一个人那可能就不可用了，比如：本地配置文件。</p>
</blockquote>
<ul>
<li><p>空行不匹配任何文件；</p>
</li>
<li><p>如果本地仓库文件已被跟踪，那么即使在 .gitignore 中设置了忽略，也不起作用。</p>
</li>
<li><p>.gitignore 文件也会被上传的到远程仓库，所以，同一个仓库的人可以使用同一个.gitignore 文件。</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># <span class="title class_">See</span> <span class="attr">https</span>:<span class="comment">//help.github.com/articles/ignoring-files/ for more about ignoring files.</span></span><br><span class="line"># dependencies</span><br><span class="line"># #开头的便是注释</span><br><span class="line"></span><br><span class="line"># 忽略文件和目录</span><br><span class="line">/node_modules</span><br><span class="line">/.<span class="property">pnp</span></span><br><span class="line">.<span class="property">pnp</span>.<span class="property">js</span></span><br><span class="line"></span><br><span class="line"># testing</span><br><span class="line">/coverage</span><br><span class="line"></span><br><span class="line"># production</span><br><span class="line">/build</span><br><span class="line"></span><br><span class="line"># misc</span><br><span class="line">.<span class="property">DS_Store</span></span><br><span class="line">.<span class="property">env</span>.<span class="property">local</span></span><br><span class="line">.<span class="property">env</span>.<span class="property">development</span>.<span class="property">local</span></span><br><span class="line">.<span class="property">env</span>.<span class="property">test</span>.<span class="property">local</span></span><br><span class="line">.<span class="property">env</span>.<span class="property">production</span>.<span class="property">local</span></span><br><span class="line"></span><br><span class="line"># 使用通配符</span><br><span class="line">npm-debug.<span class="property">log</span>*</span><br><span class="line">yarn-debug.<span class="property">log</span>*</span><br><span class="line">yarn-error.<span class="property">log</span>*   </span><br><span class="line"></span><br></pre></td></tr></table></figure>




<span id="more"></span>

]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客的部署和使用</title>
    <url>/2023/24265/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h1 id="Hexo-博客的部署和使用"><a href="#Hexo-博客的部署和使用" class="headerlink" title="Hexo 博客的部署和使用"></a>Hexo 博客的部署和使用</h1><hr>
<h3 id="部署要求："><a href="#部署要求：" class="headerlink" title="部署要求："></a>部署要求：</h3><ol>
<li>本地安装<code>Git</code></li>
<li>本地安装<code>Node.js</code></li>
</ol>
<h3 id="1、安装Git"><a href="#1、安装Git" class="headerlink" title="1、安装Git"></a>1、安装<code>Git</code></h3><p>1.2、验证<code>Git</code>是否安装成功</p>
<h3 id="2、安装Node-js"><a href="#2、安装Node-js" class="headerlink" title="2、安装Node.js"></a>2、安装<code>Node.js</code></h3><p>2.2、验证<code>Node.js</code>是否安装成功</p>
<h3 id="3、本地部署-Hexo-博客"><a href="#3、本地部署-Hexo-博客" class="headerlink" title="3、本地部署 Hexo 博客"></a>3、本地部署 Hexo 博客</h3><h4 id="3-1、使用-npm-安装-hexo"><a href="#3-1、使用-npm-安装-hexo" class="headerlink" title="3.1、使用 npm 安装 hexo"></a>3.1、使用 npm 安装 hexo</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line"></span><br><span class="line">//如果一直卡在不动或者报错可以尝试使用下面命令切换淘宝源安装</span><br><span class="line"></span><br><span class="line">npm install -g hexo-cli --registry==https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<ul>
<li><p>如果提示 Windows 不能执行 xx 脚本就打开设置——隐私和安全性——开发者选项——找到 PowerShell，打开它，还报错的话请你检查一下是否正确安装了<code>Git</code>和<code>Node.js</code>。</p>
<h4 id="3-2、验证是否安装成功"><a href="#3-2、验证是否安装成功" class="headerlink" title="3.2、验证是否安装成功"></a>3.2、验证是否安装成功</h4></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure>

<p><img src="https://article.biliimg.com/bfs/article/ba3b9f1c268b172b02e4b0a4e26b02e358f60830.png" alt="image-20230415175510242"></p>
<h4 id="3-3、初始化-Hexo"><a href="#3-3、初始化-Hexo" class="headerlink" title="3.3、初始化 Hexo"></a>3.3、初始化 Hexo</h4><ul>
<li>在你想要存放 blog 的地方执行下面命令，初始化 Hexo；如果失败或者报错，那请多试几次有一定概率是网络问题。</li>
<li>执行命令后会创建一个名为<code>blog</code>的文件夹，并下载一些文件在里面。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure>

<p><img src="https://article.biliimg.com/bfs/article/39a31d75110e0e2762a49d50b1487ca0b4dcab54.png" alt="image-20230415175828219"></p>
<h4 id="3-4、进入blog文件夹来创建你的第一个博客页面吧"><a href="#3-4、进入blog文件夹来创建你的第一个博客页面吧" class="headerlink" title="3.4、进入blog文件夹来创建你的第一个博客页面吧"></a>3.4、进入<code>blog</code>文件夹来创建你的第一个博客页面吧</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//进入blog文件夹</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line"></span><br><span class="line">//生成静态页面文件</span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">//本地查看页面效果</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<img src="https://article.biliimg.com/bfs/article/c59f4f7b8a27f0afb4b214e91fc921c4a4acb43c.png" alt="image-20230415181655950" style="zoom: 45%;" />

<ul>
<li>这样你就简单生成了你的第一个博客页面，接下来进行一些简单的配置，让这个页面看起来更5好看。</li>
</ul>
<h4 id="3-5、Hexo-常用三大命令"><a href="#3-5、Hexo-常用三大命令" class="headerlink" title="3.5、Hexo 常用三大命令"></a>3.5、Hexo 常用三大命令</h4><p>1、删除旧的网页，产生新的内容都需要执行此命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>

<p>2、生成静态文件，会在当前目录下生成一个新的叫做 public 的文件夹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">//或者</span><br><span class="line"></span><br><span class="line">hexo generate</span><br></pre></td></tr></table></figure>

<p>3、启动本地服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>4、推送到 Github</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<h3 id="4、修改配置文件和添加以一个主题"><a href="#4、修改配置文件和添加以一个主题" class="headerlink" title="4、修改配置文件和添加以一个主题"></a>4、修改配置文件和添加以一个主题</h3><h4 id="1、修改配置文件"><a href="#1、修改配置文件" class="headerlink" title="1、修改配置文件"></a>1、修改配置文件</h4><p>进到你的博客文件夹这里我的是<code>blog</code>，建议使用 VS Code 打开<code>blog</code>一整个文件夹，当然其他代码编辑软件也可以。因为 Hexo 的配置文件的格式要求严格，多一个少一个缩进都会造成运行失败。</p>
<img src="https://article.biliimg.com/bfs/article/33f7ef4ecfe9fc8c438ce045b6786ddf2e8aad7c.png" alt="image-20230415194008227" style="zoom:50%;" />

<p>我们目前主要是编辑<code>_config.yml</code>文件</p>
<p><img src="https://article.biliimg.com/bfs/article/d7ea856c76d51d0244092a372ae00b3a764f8ad8.png" alt="image-20230415194624163"></p>
<p><img src="https://article.biliimg.com/bfs/article/ce3201b41d22a76e65a688d6a331e9ca9a9c0053.png" alt="image-20230415195235075"></p>
<h4 id="2、主题安装"><a href="#2、主题安装" class="headerlink" title="2、主题安装"></a>2、主题安装</h4><p>我这边比较推荐<code>Butterfly</code>这个主题，这次也已<code>Butterfly</code>主题为例讲一下怎么来安装一个主题</p>
<ul>
<li><a href="https://butterfly.js.org/posts/21cfbf15/">Butterfly 文档</a></li>
<li><a href="https://github.com/jerryc127/hexo-theme-butterfly">GitHub 项目地址</a></li>
</ul>
<p><strong>安装</strong></p>
<p>文档提供三种安装方式根据你的喜好自行选择就好，我这边就采用 npm 方式来演示了</p>
<p><img src="https://article.biliimg.com/bfs/article/5eaa30c36104a228487d5b30dbbe2849367c1c4e.png" alt="image-20230415200557607"></p>
<p>在博客的根目录，就是<code>blog</code>文件中执行下面代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-theme-butterfly</span><br></pre></td></tr></table></figure>

<p><strong>应用主题</strong></p>
<p>修改博客根目录下的 <code>_config.yml</code>，把主题改为 <code>butterfly</code></p>
<p>安装渲染插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure>

<p>重新生成渲染博客页面</p>
<p>执行 Hexo 三大命令来重新渲染生成一个全新的博客页面，加了主题后比之前就高级了很多吧</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<h3 id="5、部署到-Github"><a href="#5、部署到-Github" class="headerlink" title="5、部署到 Github"></a>5、部署到 Github</h3><p>1、在你的<code>blog</code>文件下右键菜单选中<code>Git Bash Here</code>打开，执行下面命令初始化仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line"></span><br><span class="line">//本地添加远程库，前提是你已经创建好了一个Github Pages仓库</span><br><span class="line">git remote add origin https://github.com/xxx/xxx.github.io.git</span><br></pre></td></tr></table></figure>

<p>2、安装 hexo-deployer-git 插件，将博客推到 GitHub 上面</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>3、执行下面命令就可以将博客内容推送到 GitHub 上了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<ul>
<li>当出现如图所示的 git 字样的时候，就说明成功了；浏览器访问<code>https://你的用户名.github.io/</code>就可能看到你的博客页面了。</li>
</ul>
<p><img src="https://article.biliimg.com/bfs/article/04e88b478343ad4b1923f61a6dacb853e553b746.png" alt="image-20230415192257928"></p>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>KMS激活Windows系统与Office</title>
    <url>/2023/54224/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h2 id="一、激活Windows系统"><a href="#一、激活Windows系统" class="headerlink" title="一、激活Windows系统"></a>一、激活Windows系统</h2><p>这里教大家一个免费激活Windows系统的方法，不用下载什么激活软件或者某宝购买激活码。这次用的事kms的激活方法，至于什么是kms激活这可以去百度百科看一下。下面进入正题！<br>（建议通过<a href="https://msdn.itellyou.cn/">https://msdn.itellyou.cn/</a>下载所需软件，注意office要选择OVL版本）<br>1、安装好系统之后以管理员身份打开power shell<br><img src="http://img.duya233.top/duya-image1630237985158-14154cac-c129-4680-97fd-bbe986f0d314.png" alt="image.png"><br>2、在这输入下面命令安装密钥</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">slmgr /ipk W269N-WFGWX-YVC9B-4J6C9-T83GX</span><br></pre></td></tr></table></figure>
<p><img src="http://img.duya233.top/duya-image1630237798728-6614279e-3f91-4d22-89a6-d08096e09f74.png" alt="image.png"><br>3、再接着输入下面命令来设置kms服务器，这些服务器网上有很多。但是最好自建安全一些，我这边是路由器安装openwrt系统，用里面已经有的ksm插件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">slmgr /skms 10.1.1.1</span><br><span class="line">````</span><br><span class="line">![image.png](http://img.duya233.top/duya-image1630238039343-6a4921e8-72f3-4e01-ad1e-3ed464a5488e.png)</span><br><span class="line">![image.png](http://img.duya233.top/duya-image1630238120531-b57d16e8-2ef5-4ae0-b7b5-50868d7bd118.png)</span><br><span class="line">4、最后输入下面命令来激活系统</span><br><span class="line">```bash</span><br><span class="line">slmgr /ato</span><br></pre></td></tr></table></figure>
<p><img src="http://img.duya233.top/duya-image1630238295893-17ea3991-019f-45f0-bc6e-5fc57a51aeab.png" alt="image.png"><br>5、最后的最后可以用这个命令来查看是否激活成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">slmgr.vbs -xpr</span><br></pre></td></tr></table></figure>
<p><img src="http://img.duya233.top/duya-image1630237554012-fc2ba76b-55df-4a31-a44e-ae35d0a270a7.png" alt="image.png"><br>以上就是激活Windows系统的方法了，不要浪费那几款钱去某宝买激活码。几条命令的事，就可以省到几瓶快乐水的钱这不香吗？<br><a href="https://docs.microsoft.com/zh-cn/windows-server/get-started/kmsclientkeys">https://docs.microsoft.com/zh-cn/windows-server/get-started/kmsclientkeys</a>（附上其他版本激活码)</p>
<h1 id="二、激活Office"><a href="#二、激活Office" class="headerlink" title="二、激活Office"></a>二、激活Office</h1><p>1、在终端里转到Office安装的位置（注意不同版本对应的路径略有差别2016对用的是Office19）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="string">&quot;C:\Program Files\Microsoft Office\Office16&quot;</span></span><br></pre></td></tr></table></figure>

<p>2、安装 Office GVLK 激活密钥</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cscript ospp.vbs /inpkey:XQNVK-8JYDB-WJ9W3-YJ8YR-WFG99</span><br></pre></td></tr></table></figure>

<p>注意：如果提示错误，可能原因：key值与说安装版本不匹配</p>
<p>3、设置 KMS 服务器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cscript ospp.vbs /sethst:10.1.1.1</span><br></pre></td></tr></table></figure>

<p>4、激活Office</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cscript ospp.vbs /act</span><br></pre></td></tr></table></figure>

<p>5、查看是否激活</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cscript <span class="string">&quot;C:\Program Files\Microsoft Office\Office16\ospp.vbs&quot;</span> /dstatus</span><br></pre></td></tr></table></figure>

<p><a href="https://docs.microsoft.com/en-us/DeployOffice/vlactivation/gvlks">https://docs.microsoft.com/en-us/DeployOffice/vlactivation/gvlks</a>（附上其他版本激活码）</p>
<h1 id="三、附件"><a href="#三、附件" class="headerlink" title="三、附件"></a>三、附件</h1><p>以管理员方式运行下面文件，即可激活Windows专业版</p>
<p><a href="https://www.yuque.com/attachments/yuque/0/2023/bat/2053325/1674109830420-2ccbb5fc-6855-4325-86d5-e3b296cd6f8a.bat">win10激活.bat</a></p>
<span id="more"></span>

]]></content>
      <tags>
        <tag>KMS</tag>
      </tags>
  </entry>
  <entry>
    <title>VUE项目中的CSS样式重置</title>
    <url>/2023/17142/</url>
    <content><![CDATA[<p>前言：</p>
<ul>
<li>新建vue项目后，会发现在不同的浏览器中样式不一样，且部分标签自带一些 margin 或 padding值。为了减少浏览器在默认行高、页边距和标题字体大小等方面的不一致，我们需要重置样式表。</li>
<li>项目中的css重置，可以引用一个第三方库，以及手写一个css重置样式配合使用。</li>
</ul>
<h3 id="1-首先安装normalize-css"><a href="#1-首先安装normalize-css" class="headerlink" title="1.首先安装normalize.css"></a>1.首先安装<code>normalize.css</code></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save normalize.css</span><br></pre></td></tr></table></figure>

<p>然后在<code>mian.js</code>中引入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import <span class="string">&#x27;normalize.css&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-在src-assets目录下新建css文件夹，该文件夹下面新建三个css文件（less或sass都可以）"><a href="#2-在src-assets目录下新建css文件夹，该文件夹下面新建三个css文件（less或sass都可以）" class="headerlink" title="2.在src/assets目录下新建css文件夹，该文件夹下面新建三个css文件（less或sass都可以）"></a>2.在src/assets目录下新建css文件夹，该文件夹下面新建三个css文件（less或sass都可以）</h3><p><img src="https://img2023.cnblogs.com/blog/1222453/202212/1222453-20221222113716238-489405795.png" alt="234234324"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">common 写一些全局变量，全局样式等</span><br><span class="line">reset 写一些项目统一的重置样式，比如 a元素重置，ul, ol, li重置，margin/padding重置等等</span><br><span class="line">index 中导入以上两个文件，然后作为统一导出窗口，然后导入到main.ts 中</span><br></pre></td></tr></table></figure>
<p>然后在<code>mian.js</code>中引入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import <span class="string">&#x27;./assets/css/index.less&#x27;</span></span><br></pre></td></tr></table></figure>

<p>以上操作就完成了整个项目的css样式重置</p>
<meta name="referrer" content="no-referrer" />



<span id="more"></span>

]]></content>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中main.js里的render是干什么的</title>
    <url>/2023/34477/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<p>以下是我在学习Vue时，对main.js中render函数的个人理解。</p>
<p>在打开利用Vue脚手架创建的项目文件main.js之前，我们猜想它应该长这样</p>
<p><img src="http://img.duya233.top/duya-imaged62b2de4ed09f4ecd847290ceac5f344.png"></p>
<p>实际上的mian.js如下</p>
<p><img src="http://img.duya233.top/duya-image45f478f298c7d8c542f37fba0ae5ce79.png"></p>
<p>跟我们想的不一样，那这里的render又是什么呢？</p>
<p>我们可以先假设，如果按照我们猜想的写法，会发生什么？</p>
<p><img src="http://img.duya233.top/duya-image3bc0cdb2175500b47600905d063096d1.png"></p>
<p>报错了 ，意料之中</p>
<p><img src="http://img.duya233.top/duya-imagee512aa1430d65da6332b579751ea2d71.png"></p>
<p>那么我们来分析一下错误提示</p>
<p><img src="http://img.duya233.top/duya-imagebb2ee722a4746c6158f7fabf22ce3533.png"></p>
<p>错误提示我们引入的是非完整版的Vue，缺少模板解析器，并给出了两种解决方法</p>
<p>我们先来试试第二种方法，引入完整版的Vue，我们怎么知道引入的是不是完整版的？完整版的又在哪呢？</p>
<p>看代码</p>
<p><img src="http://img.duya233.top/duya-image7cc28c949cebe5285de6275eca7393e6.png"></p>
<p>实际上我们引入的是vue.runtime.esm.js，是精简版的Vue，它与完整版的不同就是少了模板解析器，那完整版的Vue哪里呢？</p>
<p><img src="http://img.duya233.top/duya-imaged7dae9831266d61d9404d578a95bbbaa.png"></p>
<p>引入完整版的Vue我们只要改一行代码就行</p>
<p>import Vue from ‘vue/dist/vue’</p>
<p>运行成功！第二种方法可行</p>
<p>接下来我们再来试一下第一种办法，使用非完整版的Vue，把render函数写上去</p>
<p><img src="http://img.duya233.top/duya-image3e39cd05b1fc6ad1779f3254f9e6f6c4.png"></p>
<p>同样运行成功</p>
<p><img src="http://img.duya233.top/duya-imageb6bcb8c6ea993ef48e6ac819023e5d1e.png"></p>
<p>此时我们发现，这不就是Vue一开始采用的解决方法吗？</p>
<p>从vue官网中知道，vue提供了两个版本，完整版和只包含运行时版，差别是完整版包含编译器，就是将template模板编译成AST，再转化为render函数的过程，而运行时版不包含模板解析器，因此必须提供render函数。总而言之就是为了确保页面能正常渲染。</p>
<p>那么问题来了，既然有完整版，为什么不直接用？为什么要用不包含模板解析器的版本？</p>
<p>因为，没必要。</p>
<p>当我们的项目编写完成，经过webpack打包之后，模板解析器就没有用了，我们没必要再留着它，所以一开始引入不包含模板解析器的版本即可。</p>
<p>举个例子，就像你要铺瓷砖，你需要瓷砖和工人，工作完成之后，得到的是铺好的瓷砖，此时工人就没必要再留在你家了。这里的工人就相当于模板解析器，我们没必要把工人也买回家对不对？</p>
<p>对于这个render函数一般只会在main.js中使用，在一些组件中都不会去使用，因为组件中写得都是template标签，vue专门设置了一个库去解析它。</p>
<span id="more"></span>

]]></content>
      <tags>
        <tag>Vue</tag>
        <tag>render</tag>
      </tags>
  </entry>
  <entry>
    <title>WebSockets的简单使用</title>
    <url>/2023/15011/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h2 id="0-前言："><a href="#0-前言：" class="headerlink" title="0. 前言："></a>0. 前言：</h2><p>自从HTML5里的WebSocket出现后，彻底改变了以往Web端即时通讯技术的基础通道这个“痛点”（在此之前，开发者们不得不弄出了诸如：短轮询、长轮询、Comet、SSE等技术，可谓苦之久矣…），如今再也不用纠结到底该用“轮询”还是“Comet”技术来保证数据的实时性了。</p>
<h2 id="1-什么是WebSocket"><a href="#1-什么是WebSocket" class="headerlink" title="1. 什么是WebSocket"></a>1. 什么是WebSocket</h2><p>WebSocket 协议在2008年诞生，2011年成为国际标准，所有浏览器都已经支持了。其是基于TCP的一种新的网络协议，是 HTML5 开始提供的一种在单个TCP连接上进行全双工通讯的协议，它实现了浏览器与服务器全双工(full-duplex)通信——允许服务器主动发送信息给客户端。</p>
<p><strong>WebSocket特点：</strong></p>
<ul>
<li>WebSocket可以在浏览器里使用</li>
<li>支持双向通信</li>
<li>使用简单</li>
<li>支持扩展。ws协议定义了扩展，用户可以扩展协议，或者实现自定义的子协议。（比如支持自定义压缩算法等）</li>
<li>较少的控制开销。连接创建后，ws客户端、服务端进行数据交换时，协议控制的数据包头部较小。</li>
<li>协议标识符是ws（如果加密，则为wss），服务器网址就是 URL。</li>
<li>与 HTTP 协议有着良好的兼容性。默认端口也是80和443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。</li>
</ul>
<h2 id="2-使用WebSocket"><a href="#2-使用WebSocket" class="headerlink" title="2. 使用WebSocket"></a>2. 使用WebSocket</h2><h3 id="2-1-服务端"><a href="#2-1-服务端" class="headerlink" title="2.1 服务端"></a>2.1 服务端</h3><p>这里服务端用了ws这个库。相比大家熟悉的<a href="https://socket.io/zh-CN/">socket.io</a>，ws实现更轻量，更适合学习的目的。</p>
<p><strong>安装</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save ws</span><br></pre></td></tr></table></figure>

<p><strong>创建WebSocket服务器的示例代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">WebSocketServer</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;ws&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> wss = <span class="keyword">new</span> <span class="title class_">WebSocketServer</span>(&#123; <span class="attr">port</span>: <span class="number">8080</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写一个数组，保持连接数</span></span><br><span class="line"><span class="keyword">const</span> array = []</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有个新的连接创建了</span></span><br><span class="line">wss.<span class="title function_">on</span>(<span class="string">&#x27;connection&#x27;</span>, <span class="keyword">function</span> <span class="title function_">connection</span>(<span class="params">ws</span>) &#123;</span><br><span class="line"></span><br><span class="line">    array.<span class="title function_">push</span>(ws)</span><br><span class="line"></span><br><span class="line">    ws.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="variable language_">console</span>.<span class="property">error</span>);</span><br><span class="line"></span><br><span class="line">    ws.<span class="title function_">on</span>(<span class="string">&#x27;message&#x27;</span>, <span class="keyword">function</span> <span class="title function_">message</span>(<span class="params">data</span>) &#123;</span><br><span class="line">        array.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123; item.<span class="title function_">send</span>(data.<span class="title function_">toString</span>()) &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    ws.<span class="title function_">send</span>(<span class="string">&#x27;连接创建了&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h3 id="2-2-浏览器"><a href="#2-2-浏览器" class="headerlink" title="2.2 浏览器"></a>2.2 浏览器</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入消息，按回车发送&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 创建socket连接</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> socket = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&#x27;ws://localhost:8080&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 监听socket打开</span></span></span><br><span class="line"><span class="language-javascript">    socket.<span class="title function_">addEventListener</span>(<span class="string">&#x27;open&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;连接成功&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 监听服务器发来的消息</span></span></span><br><span class="line"><span class="language-javascript">    socket.<span class="title function_">addEventListener</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 把服务器发过来的消息放到页面上</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">newMessage</span>(event.<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 渲染一条新消息</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">newMessage</span>(<span class="params">msg</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 获取ul，消息容器</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 创建一条li标签</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      li.<span class="property">textContent</span> = msg;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 把li标签插入到ul列表</span></span></span><br><span class="line"><span class="language-javascript">      ul.<span class="title function_">appendChild</span>(li);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取输入框</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> input = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    input.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>, <span class="function">(<span class="params">&#123; key &#125;</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (key === <span class="string">&#x27;Enter&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 给服务器发消息</span></span></span><br><span class="line"><span class="language-javascript">        socket.<span class="title function_">send</span>(input.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">        input.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="3-为什么要使用WebSocket"><a href="#3-为什么要使用WebSocket" class="headerlink" title="3. 为什么要使用WebSocket"></a>3. 为什么要使用WebSocket</h2><p>WebSocket的目的就是解决网络传输中的双向通信的问题，HTTP1.1默认使用持久连接（persistent connection），在一个TCP连接上也可以传输多个Request/Response消息对，但是HTTP的基本模型还是一个Request对应一个Response。这在双向通信（客户端要向服务器传送数据，同时服务器也需要实时的向客户端传送信息，一个聊天系统就是典型的双向通信）时一般会使用这样几种解决方案：</p>
<ol>
<li>轮询（polling），轮询就会造成对网络和通信双方的资源的浪费，且非实时。</li>
<li>长轮询，客户端发送一个超时时间很长的Request，服务器hold住这个连接，在有新数据到达时返回Response，相比 <code>1</code>，占用的网络带宽少了，其他类似。</li>
<li>长连接，其实有些人对长连接的概念是模糊不清的，我这里讲的其实是HTTP的长连接。如果你使用Socket来建立TCP的长连接，那么，这个长连接跟我们这里要讨论的WebSocket是一样的，实际上TCP长连接就是WebSocket的基础，但是如果是HTTP的长连接，本质上还是Request/Response消息对，仍然会造成资源的浪费、实时性不强等问题。</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>element-ui表格组件设置单元格不换行显示</title>
    <url>/2023/10759/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<p>在一个项目中运用到了element-ui的表格组件，但是遇到一个问题就是，当一个单元格内的数据特别多的时候，但是单元格宽度又不够放下全部的内容。于是就会发生在单元格内部换行，这就会让这个页面的布局变得不可控，经过一番搜索找到了一个算是解决问题的方法。</p>
<ul>
<li>给el-table 设置属性 cell-class-name，自定义 className</li>
</ul>
<p>代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 表格部分 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;tableData&quot;</span> <span class="attr">:header-cell-style</span>=<span class="string">&quot;headClass&quot;</span> <span class="attr">cell-class-name</span>=<span class="string">&quot;table_cell&quot;</span> <span class="attr">:cell-style</span>=<span class="string">&quot;rowClass&quot;</span> <span class="attr">border</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- css部分 ::v-deep 表示将样式穿透到element-ui里面，记得给&lt;style&gt;标签里面加上scoped，不然这个样式就变成全局样式了。 --&gt;</span></span><br><span class="line">::v-deep .table_cell .cell&#123;</span><br><span class="line">    white-space: nowrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img.duya233.top/Snipaste_2023-06-05_13-24-20.png" alt="Snipaste_2023-06-05_13-24-20.png"></p>
<span id="more"></span>

]]></content>
  </entry>
  <entry>
    <title>elementui中el-tree控件懒加载和局部刷新</title>
    <url>/2023/813/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<p>​    最近项目上一个组件需要使用到tree组件来选择省市县乡，因为数据量比较大所以打算使用懒加载的方式来解决一次性加载太多数据而造成体验不好的问题。树组件如果数据比较多的话，一次性把整棵树的数据都请求到，略有耗时。所以为了优化性能，我们就要实现树组件懒加载的效果，也就是当我们点击树节点的时候，再去向后端发请求，获取对应点击的树节点下的数据。这样的话，点击哪里，加载哪里，性能会提高不少。</p>
<h2 id="tree组件常见属性"><a href="#tree组件常见属性" class="headerlink" title="tree组件常见属性"></a>tree组件常见属性</h2><ul>
<li><p>data—-用来展示数据</p>
</li>
<li><p>props—-树状图配置</p>
</li>
<li><p>label—指定节点标签为节点对象的某个属性值</p>
</li>
<li><p>children—指定子树为节点对象的某个属性值</p>
</li>
<li><p>disabled—指定节点选择框是否禁用为节点对象的某个属性值</p>
</li>
<li><p>show-checkbox—显示选择框</p>
</li>
<li><p>getCheckedKeys—-获取当前选中的节点的keys</p>
</li>
<li><p>default-expand—–all-默认展开</p>
</li>
<li><p>check-strictly—-设置true，可以关闭父子关联</p>
</li>
<li><p>this.$refs.tree.setCheckedKeys([])—–清空当前的选择</p>
</li>
</ul>
<h2 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h2><p>按照 <a href="https://element.eleme.cn/#/zh-CN/component/tree">elementui</a>官方文档示例，效果图</p>
<p><img src="http://img.duya233.top/duya-imagea1079094b6e58796c3ed75c4bdc29190.gif" alt="duya-imagea1079094b6e58796c3ed75c4bdc29190"></p>
<p>template部分，需要结合 <code>lazy</code> 和 <code>load</code> 一起使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;el-tree</span><br><span class="line">   show-checkbox</span><br><span class="line">   node-key=<span class="string">&quot;id&quot;</span></span><br><span class="line">   lazy</span><br><span class="line">   :load=<span class="string">&quot;loadNode&quot;</span></span><br><span class="line">   :props=<span class="string">&quot;defaultProps&quot;</span></span><br><span class="line">   v-loading=<span class="string">&quot;list.loading&quot;</span></span><br><span class="line">   ref=<span class="string">&quot;tree&quot;</span>&gt;</span><br><span class="line"> &lt;/el-tree&gt;</span><br></pre></td></tr></table></figure>

<p>js 部分</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">list</span>: &#123;</span><br><span class="line">        <span class="attr">loading</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">isExpand</span>: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">defaultProps</span>: &#123; <span class="comment">// tree 控件的数据结构，需要设置 isLeaf</span></span><br><span class="line">        <span class="attr">children</span>: <span class="string">&#x27;children&#x27;</span>,</span><br><span class="line">        <span class="attr">label</span>: <span class="string">&#x27;name&#x27;</span>,</span><br><span class="line">        <span class="attr">isLeaf</span>: <span class="string">&#x27;leaf&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">loading</span>:<span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">loadNode</span>(<span class="params">node, resolve</span>) &#123; <span class="comment">// 懒加载</span></span><br><span class="line">      <span class="keyword">if</span> (node.<span class="property">level</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">resolve</span>(<span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">getTagList</span>())</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.<span class="property">level</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">resolve</span>(<span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">getTagApiList</span>(node.<span class="property">label</span>))</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">resolve</span>([]) <span class="comment">// 防止该节点没有子节点时一直转圈的问题出现</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">async</span> getTagList () &#123; <span class="comment">// 获取所有接口所属模块 -&gt; 第一层</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">list</span>.<span class="property">loading</span> = <span class="literal">true</span></span><br><span class="line">      <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="variable language_">this</span>.$API(&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;getApiTagList&#x27;</span>,</span><br><span class="line">        <span class="attr">requireAuth</span>: <span class="literal">true</span></span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">const</span> tags = res.<span class="property">data</span>.<span class="property">data</span></span><br><span class="line">      tags.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123; <span class="comment">// 节点需要构建为 tree 的结构</span></span><br><span class="line">        item.<span class="property">name</span> = item.<span class="property">ta</span></span><br><span class="line">        item.<span class="property">id</span> = index</span><br><span class="line">        item.<span class="property">leaf</span> = <span class="literal">false</span></span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">list</span>.<span class="property">loading</span> = <span class="literal">false</span></span><br><span class="line">      <span class="keyword">return</span> tags</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">async</span> getTagApiList (tag) &#123; <span class="comment">// 查询模块下的接口列表 -&gt; 第二层 </span></span><br><span class="line">      <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="variable language_">this</span>.$API(&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;getTagApiList&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: &#123;</span><br><span class="line">          tag</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">requireAuth</span>: <span class="literal">true</span></span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">const</span> results = res.<span class="property">data</span>.<span class="property">data</span></span><br><span class="line">      results.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        item.<span class="property">name</span></span><br><span class="line">        item.<span class="property">id</span></span><br><span class="line">        item.<span class="property">leaf</span> = <span class="literal">true</span></span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">return</span> results</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://img.duya233.top/duya-imageimage-20230603205603792.png" alt="image-20230603205603792"></p>
<h3 id="附上完整代码"><a href="#附上完整代码" class="headerlink" title="附上完整代码"></a>附上完整代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app-container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-card</span> <span class="attr">class</span>=<span class="string">&quot;left-card&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;filterText&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">slot</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">class</span>=<span class="string">&quot;el-input__icon el-icon-search icon-ss&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-tree</span> <span class="attr">ref</span>=<span class="string">&quot;tree&quot;</span> <span class="attr">node-key</span>=<span class="string">&quot;code&quot;</span>  <span class="attr">:lazy</span>=<span class="string">&quot;true&quot;</span> <span class="attr">:data</span>=<span class="string">&quot;data&quot;</span> <span class="attr">:props</span>=<span class="string">&quot;defaultProps&quot;</span> <span class="attr">:filter-node-method</span>=<span class="string">&quot;filterNode&quot;</span> <span class="attr">:load</span>=<span class="string">&quot;handleNodeClick&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-tree</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-card</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right-container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span>&gt;</span>低风险区<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span>中风险区<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span>&gt;</span>高风险区<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-card</span> <span class="attr">class</span>=<span class="string">&quot;right-card&quot;</span>&gt;</span>右边<span class="tag">&lt;/<span class="name">el-card</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; getprovinces, getcities, getareas, getstreets &#125; <span class="keyword">from</span> <span class="string">&#x27;@/api/riskarea&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">watch</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    filterText (val) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">tree</span>.<span class="title function_">filter</span>(val)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  data () &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">data</span>: [&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">children</span>: []</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">defaultProps</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">children</span>: <span class="string">&#x27;children&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">label</span>: <span class="string">&#x27;name&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">filterText</span>: <span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  created () &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">this</span>.<span class="title function_">getlpcasinfo</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 获取省份</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">async</span> getlpcasinfo () &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">data</span> = <span class="keyword">await</span> <span class="title function_">getprovinces</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">async</span> handleNodeClick (data, resolve) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> code = data.<span class="property">data</span>.<span class="property">code</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">if</span> (data.<span class="property">level</span> === <span class="number">1</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 获取市</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> <span class="title function_">resolve</span>(<span class="keyword">await</span> <span class="title function_">getcities</span>(code))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data.<span class="property">level</span> === <span class="number">2</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 获取县/区</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> <span class="title function_">resolve</span>(<span class="keyword">await</span> <span class="title function_">getareas</span>(code))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data.<span class="property">level</span> === <span class="number">3</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 获取乡级</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> <span class="title function_">resolve</span>(<span class="keyword">await</span> <span class="title function_">getstreets</span>(code))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 防止该节点没有子节点时一直转圈的问题出现</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> <span class="title function_">resolve</span>([])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 搜索</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    filterNode (value, data) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;11&#x27;</span>, value)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;22&#x27;</span>, data)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">if</span> (!value) <span class="keyword">return</span> <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> data.<span class="property">name</span>.<span class="title function_">indexOf</span>(value) !== -<span class="number">1</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>请求接口</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;@/utils/request&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取省份</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getprovinces</span> () &#123;</span><br><span class="line">  <span class="keyword">return</span> request.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:3001/provinces&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取市</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getcities</span> (id) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(id)</span><br><span class="line">  <span class="keyword">return</span> request.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:3001/cities&#x27;</span>, &#123; <span class="attr">params</span>: &#123; <span class="attr">provinceCode</span>: id &#125; &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取县/区</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getareas</span> (id) &#123;</span><br><span class="line">  <span class="keyword">return</span> request.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:3001/areas&#x27;</span>, &#123; <span class="attr">params</span>: &#123; <span class="attr">cityCode</span>: id &#125; &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取乡级</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getstreets</span> (id) &#123;</span><br><span class="line">  <span class="keyword">return</span> request.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:3001/streets&#x27;</span>, &#123; <span class="attr">params</span>: &#123; <span class="attr">areaCode</span>: id &#125; &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="局部刷新"><a href="#局部刷新" class="headerlink" title="局部刷新"></a>局部刷新</h2><p>想要实现的效果是，新增节点，点击确定后局部刷新，渲染新数据<br>效果图<br><img src="http://img.duya233.top/duya-imagec8f6885f70513bd936da9e55286011da.gif" alt="duya-imagec8f6885f70513bd936da9e55286011da"><br>关键代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-tree</span></span></span><br><span class="line"><span class="tag">  <span class="attr">node-key</span>=<span class="string">&quot;id&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">lazy</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:load</span>=<span class="string">&quot;loadNode&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:props</span>=<span class="string">&quot;defaultProps&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:expand-on-click-node</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:check-on-click-node</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-loading</span>=<span class="string">&quot;list.loading&quot;</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">node-click</span>=<span class="string">&quot;nodeClick&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">ref</span>=<span class="string">&quot;tree&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-tree</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 点击节点，把 node 保存下来，供局部刷新中的 node 使用</span></span><br><span class="line">nodeClick (data, node) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">curPath</span> = data.<span class="property">path</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">curNode</span> = node</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 实现局部刷新，在点击弹窗处调用的</span></span><br><span class="line">partialRefreshpartialRefresh (node) &#123;</span><br><span class="line">  node.<span class="property">loaded</span> = <span class="literal">false</span> <span class="comment">// 设置loaded为false；模拟一次节点展开事件，加载重命名后的新数据；</span></span><br><span class="line">  node.<span class="title function_">expand</span>() <span class="comment">// 新建子节点是刷新一次本节点的展开请求，而重命名和删除则需要刷新父级节点的的展开事件，可以设置node.parent.loaded = false;node.parent.expand();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>参考文章：<a href="https://segmentfault.com/a/1190000040763345">https://segmentfault.com/a/1190000040763345</a><br>中华人民共和国行政区划（五级）：省级、地级、县级、乡级和村级数据。：<a href="https://github.com/modood/Administrative-divisions-of-China">https://github.com/modood/Administrative-divisions-of-China</a></p>
</blockquote>
<span id="more"></span>

]]></content>
      <tags>
        <tag>Element-UI</tag>
        <tag>Vue</tag>
        <tag>tree树状组件</tag>
      </tags>
  </entry>
  <entry>
    <title>iptv直播源</title>
    <url>/2023/32718/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<table>
<thead>
<tr>
<th>源名称</th>
<th>长按拷贝（复制）网址链接到远程订阅即可</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td><a href="https://pastebin.com/raw/EsjqkNjB">pastebin.com/raw/EsjqkNjB</a></td>
</tr>
<tr>
<td>测试时不需要魔法</td>
<td><a href="https://img.whalenas.com:283/file/iptv.m3u">img.whalenas.com:283/file/iptv.m3u</a></td>
</tr>
<tr>
<td><del>卷毛鼠，有时候不需要魔法（转变为按天签到收费源，免费不维护了）</del></td>
<td><del><a href="https://jmstv.github.io/">jmstv.github.io/</a></del></td>
</tr>
<tr>
<td></td>
<td><a href="https://www.hefentv.cn/hzfxh.m3u">www.hefentv.cn/hzfxh.m3u</a></td>
</tr>
<tr>
<td>测试的时候不需要魔法</td>
<td><a href="http://live.cooltv.top/tv.php">live.cooltv.top/tv.php</a></td>
</tr>
<tr>
<td></td>
<td><a href="https://fastly.jsdelivr.net/gh/vamoschuck/TV@main/M3U">fastly.jsdelivr.net/gh/vamoschuck/TV@main/M3U</a></td>
</tr>
<tr>
<td>APTV开发者维护源（需要魔法+ipv6）</td>
<td><a href="https://bit.ly/3y3yzwe">bit.ly/3y3yzwe</a></td>
</tr>
<tr>
<td>APTV开发者维护源</td>
<td><a href="https://bit.ly/3BTBM2z">bit.ly/3BTBM2z</a></td>
</tr>
<tr>
<td>茶客源，据说有人维护，需要魔法</td>
<td><a href="https://bit.ly/3tOK73n">bit.ly/3tOK73n</a></td>
</tr>
<tr>
<td>乌云影音，据说有人维护，测试时不需要魔法</td>
<td><a href="https://cx342662.github.io/cy.txt">cx342662.github.io/cy.txt</a></td>
</tr>
<tr>
<td>学习专用源，不只有有没有人维护，需要魔法</td>
<td><a href="https://raw.githubusercontent.com/YanG-1989/m3u/main/Adult.m3u">raw.githubusercontent.com/YanG-1989/m3u/main/Adult.m3u</a></td>
</tr>
<tr>
<td>测试无需魔法</td>
<td><a href="https://cdn.jsdelivr.net/gh/YueChan/IPTV@main/IPTV.m3u">cdn.jsdelivr.net/gh/YueChan/IPTV@main/IPTV.m3u</a></td>
</tr>
<tr>
<td>测试无需魔法</td>
<td><a href="https://fastly.jsdelivr.net/gh/vamoschuck/TV@main/M3U">fastly.jsdelivr.net/gh/vamoschuck/TV@main/M3U</a></td>
</tr>
<tr>
<td>测试无需魔法</td>
<td><a href="https://cx342662.github.io/cy.txt">cx342662.github.io/cy.txt</a></td>
</tr>
<tr>
<td>ipv6源</td>
<td><a href="https://github.com/hxhlb/TVChannels/raw/master/Normal/IPTV-ipv6-source.m3u">github.com/hxhlb/TVChannels/raw/master/Normal/IPTV-ipv6-source.m3u</a></td>
</tr>
<tr>
<td>itv开发者维护测试源</td>
<td><a href="https://raw.githubusercontent.com/strengthen/iTV/master/M3U/test_ip.m3u">raw.githubusercontent.com/strengthen/iTV/master/M3U/test_ip.m3u</a></td>
</tr>
<tr>
<td>itv开发者维护测试源2</td>
<td><a href="https://raw.githubusercontent.com/strengthen/iTV/master/M3U/test_ap_playback.m3u">raw.githubusercontent.com/strengthen/iTV/master/M3U/test_ap_playback.m3u</a></td>
</tr>
<tr>
<td>有人维护的直播源汇总主页</td>
<td><a href="https://github.com/imDazui/Tvlist-awesome-m3u-m3u8">github.com/imDazui/Tvlist-awesome-m3u-m3u8</a></td>
</tr>
<tr>
<td>别人维护的直播源汇总<a href="https://dajiayouxuan.com/tag/%E7%BD%91%E7%AB%99">网站</a></td>
<td><a href="https://dajiayouxuan.com/xinchanpin/6387.html">终于有人站出来整理维护直播源了</a></td>
</tr>
</tbody></table>
<span id="more"></span>

]]></content>
      <tags>
        <tag>iptv</tag>
        <tag>直播源</tag>
      </tags>
  </entry>
  <entry>
    <title>mklink命令创建软硬目录链接与删除链接</title>
    <url>/2023/6717/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h2 id="1-mklink链接的创建"><a href="#1-mklink链接的创建" class="headerlink" title="1. mklink链接的创建"></a>1. mklink链接的创建</h2><p>“mklink” 命令在 Windows 系统中用于创建硬链接、符号链接和目录链接。以下是 “mklink” 命令的常用参数：</p>
<ul>
<li><code>/D</code>：用于创建目录软链接。当使用该参数时，需要指定目标目录的路径。</li>
<li><code>/H</code>：用于创建硬链接（硬链接只适用于文件）。当使用该参数时，需要指定目标文件的路径。</li>
<li><code>/J</code>：用于创建目录链接。与 <code>/D</code> 相似，但它创建的是一个目录联接，而不是目录软链接。</li>
<li><code>/I</code>：用于创建符号链接（默认为符号链接）。当使用该参数时，需要指定目标文件或目录的路径。</li>
<li><code>/Y</code>：在创建链接之前，自动确认覆盖现有目标。</li>
</ul>
<p>下面是一些示例：</p>
<ul>
<li><p>创建文件软链接：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mklink 软链接文件 目标文件</span><br></pre></td></tr></table></figure></li>
<li><p>创建目录软链接：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mklink /D 软链接目录 目标目录</span><br></pre></td></tr></table></figure></li>
<li><p>创建符号链接（默认）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mklink 软链接 目标文件或目录</span><br></pre></td></tr></table></figure></li>
<li><p>创建硬链接：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mklink /H 硬链接 目标文件</span><br></pre></td></tr></table></figure></li>
<li><p>创建目录链接：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mklink /J 目录链接 目标目录</span><br></pre></td></tr></table></figure></li>
</ul>
<p>请注意，在创建链接时，确保 “mklink” 命令的参数和路径正确无误，并具有足够的权限。</p>
<h2 id="2-软链接、硬链接、目录链接区别"><a href="#2-软链接、硬链接、目录链接区别" class="headerlink" title="2. 软链接、硬链接、目录链接区别"></a>2. 软链接、硬链接、目录链接区别</h2><p>软链接、硬链接和目录链接是在文件系统中创建链接引用的不同方法，它们有以下区别：</p>
<ol>
<li><p>软链接（Symbolic Link）：</p>
<ul>
<li>软链接是一个指向目标文件或目录的特殊文件。它创建了一个新的文件（或目录）路径，该路径指向实际的目标位置。</li>
<li>软链接可以跨越不同的文件系统，并且可以链接到文件或目录。</li>
<li>修改软链接的权限或属性不会影响实际目标文件或目录。</li>
<li>如果删除软链接，原始文件或目录仍然存在。</li>
</ul>
</li>
<li><p>硬链接（Hard Link）：</p>
<ul>
<li>硬链接是在文件系统中创建多个指向同一物理文件的链接。它们共享相同的 inode（索引节点）和数据块。</li>
<li>硬链接只能链接到文件，不能链接到目录。</li>
<li>硬链接必须在同一文件系统中创建，不能跨越不同的文件系统。</li>
<li>修改硬链接也会修改实际的物理文件，因为它们共享相同的数据和属性。</li>
<li>当所有硬链接都被删除时，才会真正删除文件。</li>
</ul>
</li>
<li><p>目录链接（Junction）：</p>
<ul>
<li>目录链接是将一个目录链接到另一个目录的链接方式。</li>
<li>目录链接只能链接到目录，不能链接到文件。</li>
<li>目录链接类似于软链接，但是在 Windows 系统中使用 <code>/J</code> 参数来创建。</li>
<li>修改目录链接的权限或属性不会影响实际目标目录。</li>
<li>如果删除目录链接，原始目录仍然存在。</li>
</ul>
</li>
</ol>
<p>总结起来，软链接是指向文件或目录的链接，硬链接是指向文件的链接，而目录链接是指向目录的链接。</p>
<h2 id="3-mklink链接的删除"><a href="#3-mklink链接的删除" class="headerlink" title="3. mklink链接的删除"></a>3. mklink链接的删除</h2><p>要删除创建的链接，您可以使用 <code>del</code> 命令或 <code>rmdir</code> 命令来删除软链接和目录链接，而对于硬链接，您可以使用 <code>del</code> 命令。</p>
<p>删除软链接：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">del 软链接文件路径</span><br></pre></td></tr></table></figure>

<p>删除目录链接：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rmdir</span> /S 目录链接路径</span><br></pre></td></tr></table></figure>
<p>其中，<code>/S</code> 参数用于删除目录链接及其子目录和文件。</p>
<p>删除硬链接：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">del 硬链接路径</span><br></pre></td></tr></table></figure>

<p>请注意，删除链接将只删除链接本身，并不会影响实际的原始文件或目录。确保您删除的是链接而不是原始文件或目录。在执行删除操作之前，请确保您具有足够的权限来删除链接。</p>
]]></content>
      <tags>
        <tag>mklink链接</tag>
      </tags>
  </entry>
  <entry>
    <title>uni-app+vue3+vite+uni-ui+piniaH5项目搭建</title>
    <url>/2023/39734/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h2><ul>
<li>最近在把一个uni-app项目从原来的vue2重构到vue3上，趁这次机会记录一下这个项目打搭建方便自己后面再次用到就可以直接拉代码了。</li>
<li>这篇文章很多实现和思路都是参考其他大佬的，如果有哪里不对欢迎大家指出。</li>
</ul>
<h2 id="1-项目初始化"><a href="#1-项目初始化" class="headerlink" title="1. 项目初始化"></a>1. 项目初始化</h2><h3 id="1-1-通过vue-cli命令创建"><a href="#1-1-通过vue-cli命令创建" class="headerlink" title="1.1 通过vue-cli命令创建"></a>1.1 通过vue-cli命令创建</h3><ul>
<li><strong>全局安装vue-cli</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -g @vue/cli</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>使用Vue3/Vite版</strong></li>
<li>创建以 typescript 开发的工程（如命令行创建失败，请直接访问 <a href="https://link.juejin.cn/?target=https://gitee.com/dcloud/uni-preset-vue/repository/archive/vite-ts.zip">gitee</a> 下载模板）</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx degit dcloudio/uni-preset-vue<span class="comment">#vite uniapp-vue3-vite</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>tips：</p>
<ul>
<li>Vue3/Vite版要求 node 版本^14.18.0 || &gt;=16.0.0</li>
</ul>
</blockquote>
<h3 id="1-2-ESLint"><a href="#1-2-ESLint" class="headerlink" title="1.2 ESLint"></a>1.2 ESLint</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 根据提示和项目情况选择y/n</span></span><br><span class="line">npx eslint --init</span><br></pre></td></tr></table></figure>

<blockquote>
<p>配置参考文章</p>
<p><a href="https://blog.duya233.top/2023/47276/">vs-code安装和配置ESLint</a></p>
</blockquote>
<h3 id="1-3-prettier"><a href="#1-3-prettier" class="headerlink" title="1.3 prettier"></a>1.3 prettier</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i prettier eslint-config-prettier eslint-plugin-prettier -D</span><br></pre></td></tr></table></figure>

<ul>
<li>在根目录创建<code>.prettierrc.js</code>文件</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .prettierrc.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">printWidth</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="attr">tabWidth</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">useTabs</span>: <span class="literal">false</span>, <span class="comment">// 是否使用tab进行缩进，默认为false</span></span><br><span class="line">  <span class="attr">singleQuote</span>: <span class="literal">true</span>, <span class="comment">// 是否使用单引号代替双引号，默认为false</span></span><br><span class="line">  <span class="attr">semi</span>: <span class="literal">true</span>, <span class="comment">// 行尾是否使用分号，默认为true</span></span><br><span class="line">  <span class="attr">arrowParens</span>: <span class="string">&#x27;always&#x27;</span>,</span><br><span class="line">  <span class="attr">endOfLine</span>: <span class="string">&#x27;auto&#x27;</span>,</span><br><span class="line">  <span class="attr">vueIndentScriptAndStyle</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">htmlWhitespaceSensitivity</span>: <span class="string">&#x27;strict&#x27;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>配置<code>.eslintrc.js</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .eslintrc.js</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">root</span>: <span class="literal">true</span>, <span class="comment">// 停止向上查找父级目录中的配置文件</span></span><br><span class="line">  <span class="attr">env</span>: &#123;</span><br><span class="line">    <span class="attr">browser</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">es2021</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">node</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">extends</span>: [</span><br><span class="line">    <span class="string">&#x27;eslint:recommended&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;plugin:vue/vue3-essential&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;plugin:prettier/recommended&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;prettier&#x27;</span>, <span class="comment">// eslint-config-prettier 的缩写</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">parser</span>: <span class="string">&#x27;vue-eslint-parser&#x27;</span>, <span class="comment">// 指定要使用的解析器</span></span><br><span class="line">  <span class="comment">// 给解析器传入一些其他的配置参数</span></span><br><span class="line">  <span class="attr">parserOptions</span>: &#123;</span><br><span class="line">    <span class="attr">ecmaVersion</span>: <span class="string">&#x27;latest&#x27;</span>, <span class="comment">// 支持的es版本</span></span><br><span class="line">    <span class="attr">parser</span>: <span class="string">&#x27;@typescript-eslint/parser&#x27;</span>,</span><br><span class="line">    <span class="attr">sourceType</span>: <span class="string">&#x27;module&#x27;</span>, <span class="comment">// 模块类型，默认为script，我们设置为module</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="string">&#x27;vue&#x27;</span>, <span class="string">&#x27;prettier&#x27;</span>], <span class="comment">// eslint-plugin- 可以省略</span></span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;vue/multi-word-component-names&#x27;</span>: <span class="string">&#x27;off&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>根目录<code>package.json</code>添加lint命令</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"># package.json</span><br><span class="line"></span><br><span class="line"># 可以运行&#x27;npm run lint&#x27;检查代码</span><br><span class="line"><span class="attr">&quot;lint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eslint --ext .js,.vue,.ts src --fix&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-4-保存文件自动格式化"><a href="#1-4-保存文件自动格式化" class="headerlink" title="1.4 保存文件自动格式化"></a>1.4 保存文件自动格式化</h3><ul>
<li>在vscode中项目文件里面的.vscode设置</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">//.vscode/settings.json</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// 保存时eslint自动修复错误</span></span><br><span class="line">  <span class="attr">&quot;editor.codeActionsOnSave&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;source.fixAll.eslint&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 保存自动格式化</span></span><br><span class="line">  <span class="attr">&quot;editor.formatOnSave&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-环境变量"><a href="#2-环境变量" class="headerlink" title="2. 环境变量"></a>2. 环境变量</h2><blockquote>
<p><strong>vite官方文档：</strong></p>
<p><a href="https://cn.vitejs.dev/guide/env-and-mode.html">环境变量和模式</a></p>
</blockquote>
<ol>
<li>创建环境变量</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 根目录创建.<span class="property">env</span>.[mode]文件</span><br><span class="line"></span><br><span class="line"># .<span class="property">env</span>.<span class="property">development</span></span><br><span class="line"></span><br><span class="line"># 开发环境</span><br><span class="line"><span class="variable constant_">NODE_ENV</span> = development</span><br><span class="line"><span class="variable constant_">VITE_APP_API_BASE_URL</span> = <span class="string">&#x27;http://10.204.xx.xx:9091&#x27;</span></span><br><span class="line"># 是否在打包时生成 sourcemap</span><br><span class="line"><span class="variable constant_">VITE_BUILD_SOURCEMAP</span> = <span class="literal">true</span></span><br><span class="line"># 是否在打包时删除 <span class="variable language_">console</span> 代码</span><br><span class="line"><span class="variable constant_">VITE_BUILD_DROP_CONSOLE</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"># .<span class="property">env</span>.<span class="property">test</span></span><br><span class="line"># .<span class="property">env</span>.<span class="property">production</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>.env.[mode]文件中的mode可自定义，如<code>.env.development</code>对应package.json脚本中的<code>--mode development</code><br>只有以 VITE_ 为前缀的变量才会暴露给经过 vite 处理的代码</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">//下面三条命令，分别表示开发环境、测试环境、生产环境的运行和打包命令</span></span><br><span class="line"></span><br><span class="line"><span class="attr">&quot;dev:h5&quot;</span><span class="punctuation">:</span> <span class="string">&quot;uni -p h5 --mode development&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;build:test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;uni build --mode test&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;build:pro&quot;</span><span class="punctuation">:</span> <span class="string">&quot;uni  build -p h5 --mode production&quot;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>使用环境变量</li>
</ol>
<ul>
<li>js,vue 文件中可使用<code>import.meta.env</code>获取环境变量，比如：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> baseUrl = <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">env</span>.<span class="property">VITE_APP_API_BASE_URL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> isProd = <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">env</span>.<span class="property">MODE</span> === <span class="string">&#x27;production&#x27;</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>vite.config.js使用环境变量</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vite.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig, loadEnv &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (&#123; command, mode &#125;) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> env = <span class="title function_">loadEnv</span>(mode, process.<span class="title function_">cwd</span>());</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">      <span class="title function_">uni</span>(),</span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">      <span class="attr">alias</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;@&#x27;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;src&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;@img&#x27;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;src/static/images&#x27;</span>),</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">build</span>: &#123;</span><br><span class="line">      <span class="attr">sourcemap</span>: env.<span class="property">VITE_BUILD_SOURCEMAP</span> === <span class="string">&#x27;true&#x27;</span>,</span><br><span class="line">      <span class="attr">minify</span>: <span class="string">&#x27;terser&#x27;</span>,</span><br><span class="line">      <span class="attr">terserOptions</span>: &#123;</span><br><span class="line">        <span class="attr">compress</span>: &#123;</span><br><span class="line">          <span class="attr">drop_console</span>: env.<span class="property">VITE_BUILD_DROP_CONSOLE</span> === <span class="string">&#x27;true&#x27;</span>, <span class="comment">// 去除 console</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">chunkSizeWarningLimit</span>: <span class="number">1500</span>, <span class="comment">// chunk 大小警告的限制（以 kbs 为单位）</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="3-Css预处理器"><a href="#3-Css预处理器" class="headerlink" title="3. Css预处理器"></a>3. Css预处理器</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 1、 安装sass</span><br><span class="line">npm i sass -D   或   yarn add sass -D  </span><br><span class="line"></span><br><span class="line">//安装 sass-loader</span><br><span class="line">npm i sass-loader@10.1.1 -D   或   yarn add sass-loader@10.1.1 -D</span><br></pre></td></tr></table></figure>

<ol>
<li>全局使用自定义变量<ul>
<li>根目录新建样式文件夹styles</li>
<li>index.scss - 自定义变量</li>
</ul>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vite.config.js</span></span><br><span class="line"><span class="attr">css</span>: &#123;</span><br><span class="line">      <span class="attr">preprocessorOptions</span>: &#123;</span><br><span class="line">        <span class="attr">scss</span>: &#123;</span><br><span class="line">          <span class="attr">additionalData</span>: <span class="string">`@import &quot;@/styles/vars.scss&quot;;`</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>vue文件使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.title &#123;</span><br><span class="line">	color: $font-color</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-uni-ui"><a href="#4-uni-ui" class="headerlink" title="4. uni-ui"></a>4. uni-ui</h2><blockquote>
<p><a href="https://uniapp.dcloud.net.cn/component/uniui/quickstart.html">uni-ui官方文档</a></p>
</blockquote>
<ol>
<li>安装uni-ui</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//安装 uni-ui</span><br><span class="line">npm i @dcloudio/uni-ui   或   yarn add @dcloudio/uni-ui</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>配置easycom</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">配置easycom</span><br><span class="line">使用 npm 安装好 uni-ui 之后，需要配置 easycom 规则，让 npm 安装的组件支持 easycom</span><br><span class="line">打开项目根目录下的 pages.json 并添加 easycom 节点</span><br><span class="line"></span><br><span class="line"><span class="comment">// pages.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;easycom&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;autoscan&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;custom&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">			<span class="comment">// uni-ui 规则如下配置</span></span><br><span class="line">			<span class="attr">&quot;^uni-(.*)&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@dcloudio/uni-ui/lib/uni-$1/uni-$1.vue&quot;</span></span><br><span class="line">		<span class="punctuation">&#125;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 其他内容</span></span><br><span class="line">	pages<span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">		<span class="comment">// ...</span></span><br><span class="line">	<span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="5-自动导入API"><a href="#5-自动导入API" class="headerlink" title="5. 自动导入API"></a>5. 自动导入API</h2><p><a href="https://github.com/antfu/unplugin-auto-import">unplugin-auto-import</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i unplugin-auto-import -D</span><br></pre></td></tr></table></figure>

<ul>
<li>Vite配置</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// vite.config.js</span><br><span class="line">import AutoImport from <span class="string">&#x27;unplugin-auto-import/vite&#x27;</span></span><br><span class="line"></span><br><span class="line">  plugins: [</span><br><span class="line">    AutoImport(&#123;</span><br><span class="line">      imports: [<span class="string">&#x27;vue&#x27;</span>, <span class="string">&#x27;uni-app&#x27;</span>],</span><br><span class="line">      // 可以选择auto-import.d.ts生成的位置，使用ts建议设置为<span class="string">&#x27;src/auto-import.d.ts&#x27;</span></span><br><span class="line">      // dts: <span class="string">&#x27;src/auto-import.d.ts&#x27;</span></span><br><span class="line">      // 自动生成<span class="string">&#x27;eslintrc-auto-import.json&#x27;</span>文件，在<span class="string">&#x27;.eslintrc.cjs&#x27;</span>的<span class="string">&#x27;extends&#x27;</span>中引入解决报错</span><br><span class="line">        eslintrc: &#123;</span><br><span class="line">          enabled: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure>

<ul>
<li>原理: 安装的时候会自动生成auto-imports.d文件(默认是在根目录)</li>
<li>其他插件 vue-router, vue-i18n, @vueuse/head, @vueuse/core等自动引入的自动引入请查看文档</li>
</ul>
<ul>
<li><code>.eslintrc.js</code>配置</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .eslintrc.js</span></span><br><span class="line"><span class="attr">extends</span>: [</span><br><span class="line">  <span class="comment">// 解决使用自动导入api报错</span></span><br><span class="line">  <span class="string">&#x27;./.eslintrc-auto-import.json&#x27;</span>,</span><br><span class="line">],</span><br></pre></td></tr></table></figure>

<p>接下来就可以全局使用 vue 相关 api，不用一个个手动导入了。哪些 api 可用请参考生成的 <code>src/auto-import.d.ts</code> 类型声明文件。</p>
<h2 id="6-Pinia"><a href="#6-Pinia" class="headerlink" title="6. Pinia"></a>6. Pinia</h2><p><a href="https://pinia.vuejs.org/">pinia官方文档</a></p>
<ol>
<li>安装</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i pinia</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>创建store</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/store/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> pinia;</span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&#x27;./modules/user&#x27;</span>;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>挂载store</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createSSRApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createApp</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> app = <span class="title function_">createSSRApp</span>(<span class="title class_">App</span>);</span><br><span class="line">  app.<span class="title function_">use</span>(store);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    app,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>创建useUserStore</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/store/modules/user/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useUserStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;user&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// id: &#x27;user&#x27;, // id必填，且需要唯一</span></span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="attr">nameLength</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> state.<span class="property">name</span>.<span class="property">length</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="title function_">updateName</span>(<span class="params">name</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>使用useUserStore</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pinia&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;name&quot;</span>&gt;</span>用户名:&#123;&#123; userStore.name &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;length&quot;</span>&gt;</span>长度:&#123;&#123; userStore.nameLength &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;updateName(true)&quot;</span>&gt;</span>action修改store中的name<span class="tag">&lt;/<span class="name">van-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-button</span> @<span class="attr">click</span>=<span class="string">&quot;updateName(false)&quot;</span>&gt;</span>patch修改store中的name<span class="tag">&lt;/<span class="name">van-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; useUserStore &#125; <span class="keyword">from</span> <span class="string">&#x27;@/store&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> userStore = <span class="title function_">useUserStore</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> <span class="title function_">updateName</span> = (<span class="params">isAction</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (isAction) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// action 修改 store 中的数据</span></span></span><br><span class="line"><span class="language-javascript">      userStore.<span class="title function_">updateName</span>(<span class="string">&#x27;userStore.updateName方式&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 未定义 action 时可以用 $patch 方法直接更改状态属性</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// $patch 修改 store 中的数据</span></span></span><br><span class="line"><span class="language-javascript">      userStore.$patch(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&#x27;userStore.$patch方式&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li>==注意点==</li>
</ol>
<p>在使用 pinia 中的变量时如果使用解构赋值，需要使用 <code>storeToRefs</code> 这个方法包裹一下，否则全局变量会失去响应式，变量更新时并不会重新渲染组件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useUserStore &#125; <span class="keyword">from</span> <span class="string">&#x27;@/store&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> &#123;name&#125; = <span class="title function_">useUserStore</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> (user) = <span class="title function_">storeToRefs</span>(<span class="title function_">useUserStore</span>())</span><br></pre></td></tr></table></figure>



<h2 id="7-请求封装"><a href="#7-请求封装" class="headerlink" title="7. 请求封装"></a>7. 请求封装</h2><p>封装请求的方式多种多样，根据自己喜欢的方式实现就好，还可以根据需求增加重试或者取消请求等方法。</p>
<ol>
<li>request请求统一封装</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/utils/http/request.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; getToken &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/auth&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useUserStore &#125; <span class="keyword">from</span> <span class="string">&#x27;@/store&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> baseUrl = <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">env</span>.<span class="property">VITE_APP_API_BASE_URL</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">request</span> = (<span class="params">&#123;</span></span><br><span class="line"><span class="params">  url = <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="params">  data = &#123;&#125;,</span></span><br><span class="line"><span class="params">  method = <span class="string">&#x27;POST&#x27;</span>,</span></span><br><span class="line"><span class="params">  header = &#123; token: getToken() &#125;,</span></span><br><span class="line"><span class="params">  hideLoading=<span class="literal">false</span>,</span></span><br><span class="line"><span class="params">  hideMessage,</span></span><br><span class="line"><span class="params">&#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> userStore = <span class="title function_">useUserStore</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// if (!hideLoading) &#123;</span></span><br><span class="line">    <span class="comment">//   uni.showLoading(&#123;&#125;);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    uni.<span class="title function_">request</span>(&#123;</span><br><span class="line">      <span class="attr">timeout</span>: <span class="number">60000</span>,</span><br><span class="line">      method,</span><br><span class="line">      <span class="attr">url</span>: baseUrl + url,</span><br><span class="line">      data,</span><br><span class="line">      header,</span><br><span class="line">      <span class="title function_">success</span>(<span class="params">response</span>) &#123;</span><br><span class="line">        <span class="comment">// if (!hideLoading) &#123;</span></span><br><span class="line">        <span class="comment">// 	uni.hideLoading();</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="keyword">let</span> res = response.<span class="property">data</span>;</span><br><span class="line">        <span class="comment">// 请求成功，状态码不等于0，报错处理</span></span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">resultCode</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (hideMessage) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(res || <span class="string">&#x27;Error&#x27;</span>);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (res.<span class="property">resultCode</span> === <span class="number">3</span> || res.<span class="property">resultCode</span> === -<span class="number">5</span>) &#123;</span><br><span class="line">              <span class="comment">// hideMessage 是否隐藏错误提示</span></span><br><span class="line">              uni.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">                <span class="attr">title</span>: res.<span class="property">resultMessage</span>,</span><br><span class="line">                <span class="attr">icon</span>: <span class="string">&#x27;none&#x27;</span>,</span><br><span class="line">                <span class="attr">duration</span>: <span class="number">3000</span>,</span><br><span class="line">              &#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res.<span class="property">resultCode</span> === -<span class="number">4</span>) &#123;</span><br><span class="line">              <span class="comment">//</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="keyword">if</span> (res.<span class="property">resultCode</span> === -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// to re-login</span></span><br><span class="line">                uni.<span class="title function_">showModal</span>(&#123;</span><br><span class="line">                  <span class="attr">title</span>: <span class="string">&#x27;提示&#x27;</span>,</span><br><span class="line">                  <span class="attr">content</span>: <span class="string">&#x27;登录失效，请重新登录！&#x27;</span>,</span><br><span class="line">                  <span class="attr">confirmColor</span>: <span class="string">&#x27;#0087FF&#x27;</span>,</span><br><span class="line">                  <span class="attr">cancelColor</span>: <span class="string">&#x27;#0087FF&#x27;</span>,</span><br><span class="line">                  <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (res.<span class="property">confirm</span>) &#123;</span><br><span class="line">                      <span class="comment">//*清空缓存重新登录</span></span><br><span class="line">                      userStore.<span class="title function_">resetToken</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                        uni.<span class="title function_">navigateTo</span>(&#123;</span><br><span class="line">                          <span class="attr">url</span>: <span class="string">&#x27;/subPackagesA/personal/chooseLoginType&#x27;</span>,</span><br><span class="line">                        &#125;);</span><br><span class="line">                      &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                  &#125;,</span><br><span class="line">                &#125;);</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                uni.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">                  <span class="attr">title</span>: <span class="string">`操作异常，请联系管理员(<span class="subst">$&#123;res.resultCode&#125;</span>)!`</span>,</span><br><span class="line">                  <span class="attr">icon</span>: <span class="string">&#x27;none&#x27;</span>,</span><br><span class="line">                  <span class="attr">duration</span>: <span class="number">3000</span>,</span><br><span class="line">                &#125;);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_">reject</span>(res || <span class="string">&#x27;Error&#x27;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 成功直接返回promise</span></span><br><span class="line">          <span class="title function_">resolve</span>(res);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">fail</span>(<span class="params">err</span>) &#123;</span><br><span class="line">        <span class="title function_">reject</span>(err);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> request;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>接口api管理</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/api/UserService.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;@/utils/request&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; requestPort &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/requestPort&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">login</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">`<span class="subst">$&#123;requestPort.users&#125;</span>/user/login`</span>,</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">      data,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">logout</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">`<span class="subst">$&#123;requestPort.users&#125;</span>/user/logout/3`</span>,</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">logoff</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">`<span class="subst">$&#123;requestPort.users&#125;</span>/user/logoff`</span>,</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">      data,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>使用接口</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// vue文件内</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;default&quot;</span> <span class="attr">class</span>=<span class="string">&quot;logout&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;logout&quot;</span>&gt;</span>注销<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span>&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">UserService</span> <span class="keyword">from</span> <span class="string">&#x27;@/api/UserService&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">logout</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> &#123; resultData &#125; = <span class="keyword">await</span> <span class="title class_">UserService</span>.<span class="title function_">logout</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(resultData, <span class="string">&#x27;resultData&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125; <span class="keyword">catch</span> (e) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e, <span class="string">&#x27;error&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript">&lt;script&gt;</span></span><br></pre></td></tr></table></figure>


<span id="more"></span>

]]></content>
      <tags>
        <tag>uni-app</tag>
      </tags>
  </entry>
  <entry>
    <title>vs-code安装和配置ESLint</title>
    <url>/2023/47276/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h2 id="安装ESLint"><a href="#安装ESLint" class="headerlink" title="安装ESLint"></a>安装ESLint</h2><ul>
<li>全局安装： <code>npm install -g eslint</code></li>
<li>项目安装： <code>npm install eslint --save-dev</code> <ol>
<li>如果你想你所有项目都使用eslint，请全局安装；如果你想当前项目使用，请局部安装。 </li>
<li>局部安装时请使用 <code>–save-dev</code>，因为 eslint 是适用于开发环境（Software Development Environment，SDE）的插件，请不要添加到生产环境中。</li>
</ol>
</li>
</ul>
<h2 id="初始化ESLint"><a href="#初始化ESLint" class="headerlink" title="初始化ESLint"></a>初始化ESLint</h2><ul>
<li><code>eslint --init</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">? How would you like to use ESLint? (Use arrow keys) // 你想怎样使用eslint</span><br><span class="line">  To check syntax only // 只检查语法</span><br><span class="line">&gt; To check syntax and find problems // 检查语法、发现问题</span><br><span class="line">  To check syntax, find problems, and enforce code style // 检查语法、发现问题并执行代码样式</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">? What <span class="built_in">type</span> of modules does your project use? (Use arrow keys) // 您的项目使用什么类型的模块?</span><br><span class="line">&gt; JavaScript modules (import/export)</span><br><span class="line">  CommonJS (require/exports)</span><br><span class="line">  None of these</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">? Which framework does your project use? (Use arrow keys) // 项目中使用的什么框架？</span><br><span class="line">&gt; React</span><br><span class="line">  Vue.js</span><br><span class="line">  None of these</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">? Where does your code run? (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection) // 你的代码运行在什么地方？(多选)</span><br><span class="line">&gt;(*) Browser // 浏览器</span><br><span class="line"> ( ) Node // node</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">? How would you like to define a style <span class="keyword">for</span> your project? (Use arrow keys) // 您想如何为您的项目定义一个样式?</span><br><span class="line">&gt; Use a popular style guide // 使用流行的风格指南</span><br><span class="line">  Answer questions about your style // 回答关于你的风格的问题</span><br><span class="line">  Inspect your JavaScript file(s) // 检查JavaScript文件</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">? What format <span class="keyword">do</span> you want your config file to be <span class="keyword">in</span>? // 您希望配置文件的格式是什么?</span><br><span class="line">&gt; JavaScript</span><br><span class="line">  YAML</span><br><span class="line">  JSON</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">? What style of indentation <span class="keyword">do</span> you use? (Use arrow keys) // 你用什么来进行缩进</span><br><span class="line">&gt; Tabs</span><br><span class="line">  Spaces</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">? What quotes <span class="keyword">do</span> you use <span class="keyword">for</span> strings? (Use arrow keys) // 字符串用什么引号？</span><br><span class="line">&gt; Double // 双引号</span><br><span class="line">  Single // 单引号</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">? What line endings <span class="keyword">do</span> you use? (Use arrow keys) // 你使用什么线条结尾</span><br><span class="line">&gt; Unix</span><br><span class="line">  Windows</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">? Do you require semicolons? (Y/n) // 你需要分号结尾吗?</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">? What format <span class="keyword">do</span> you want your config file to be <span class="keyword">in</span>? (Use arrow keys) // 您希望配置文件的格式是什么?</span><br><span class="line">&gt; JavaScript</span><br><span class="line">  YAML</span><br><span class="line">  JSON</span><br></pre></td></tr></table></figure>

<h2 id="eslintrc-js-文件"><a href="#eslintrc-js-文件" class="headerlink" title=".eslintrc.js 文件"></a>.eslintrc.js 文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    <span class="string">&quot;env&quot;</span>: &#123; // Environments，指定代码的运行环境。不同的运行环境，全局变量不一样，指明运行环境这样ESLint就能识别特定的全局变量。同时也会开启对应环境的语法支持，例如：es6。</span><br><span class="line">        <span class="string">&quot;browser&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;es6&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;node&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;extends&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;eslint:recommended&quot;</span>,</span><br><span class="line">        <span class="string">&quot;plugin:vue/essential&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;globals&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;Atomics&quot;</span>: <span class="string">&quot;readonly&quot;</span>,</span><br><span class="line">        <span class="string">&quot;SharedArrayBuffer&quot;</span>: <span class="string">&quot;readonly&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;parserOptions&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;ecmaVersion&quot;</span>: 2018,</span><br><span class="line">        <span class="string">&quot;sourceType&quot;</span>: <span class="string">&quot;module&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;plugins&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;vue&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;rules&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;no-alert&quot;</span>: 0,//禁止使用alert confirm prompt</span><br><span class="line">        <span class="string">&quot;no-array-constructor&quot;</span>: 2,//禁止使用数组构造器</span><br><span class="line">        <span class="string">&quot;no-bitwise&quot;</span>: 0,//禁止使用按位运算符</span><br><span class="line">        <span class="string">&quot;no-caller&quot;</span>: 1,//禁止使用arguments.caller或arguments.callee</span><br><span class="line">        <span class="string">&quot;no-catch-shadow&quot;</span>: 2,//禁止catch子句参数与外部作用域变量同名</span><br><span class="line">        <span class="string">&quot;no-class-assign&quot;</span>: 2,//禁止给类赋值</span><br><span class="line">        <span class="string">&quot;no-cond-assign&quot;</span>: 2,//禁止在条件表达式中使用赋值语句</span><br><span class="line">        <span class="string">&quot;no-console&quot;</span>: 2,//禁止使用console</span><br><span class="line">        <span class="string">&quot;no-const-assign&quot;</span>: 2,//禁止修改const声明的变量</span><br><span class="line">        <span class="string">&quot;no-constant-condition&quot;</span>: 2,//禁止在条件中使用常量表达式 <span class="keyword">if</span>(<span class="literal">true</span>) <span class="keyword">if</span>(1)</span><br><span class="line">        <span class="string">&quot;no-continue&quot;</span>: 0,//禁止使用<span class="built_in">continue</span></span><br><span class="line">        <span class="string">&quot;no-control-regex&quot;</span>: 2,//禁止在正则表达式中使用控制字符</span><br><span class="line">        <span class="string">&quot;no-debugger&quot;</span>: 2,//禁止使用debugger</span><br><span class="line">        <span class="string">&quot;no-delete-var&quot;</span>: 2,//不能对var声明的变量使用delete操作符</span><br><span class="line">        <span class="string">&quot;no-div-regex&quot;</span>: 1,//不能使用看起来像除法的正则表达式/=foo/</span><br><span class="line">        <span class="string">&quot;no-dupe-keys&quot;</span>: 2,//在创建对象字面量时不允许键重复 &#123;a:1,a:1&#125;</span><br><span class="line">        <span class="string">&quot;no-dupe-args&quot;</span>: 2,//函数参数不能重复</span><br><span class="line">        <span class="string">&quot;no-duplicate-case&quot;</span>: 2,//switch中的<span class="keyword">case</span>标签不能重复</span><br><span class="line">        <span class="string">&quot;no-else-return&quot;</span>: 2,//如果<span class="keyword">if</span>语句里面有<span class="built_in">return</span>,后面不能跟<span class="keyword">else</span>语句</span><br><span class="line">        <span class="string">&quot;no-empty&quot;</span>: 2,//块语句中的内容不能为空</span><br><span class="line">        <span class="string">&quot;no-empty-character-class&quot;</span>: 2,//正则表达式中的[]内容不能为空</span><br><span class="line">        <span class="string">&quot;no-empty-label&quot;</span>: 2,//禁止使用空label</span><br><span class="line">        <span class="string">&quot;no-eq-null&quot;</span>: 2,//禁止对null使用==或!=运算符</span><br><span class="line">        <span class="string">&quot;no-eval&quot;</span>: 1,//禁止使用<span class="built_in">eval</span></span><br><span class="line">        <span class="string">&quot;no-ex-assign&quot;</span>: 2,//禁止给catch语句中的异常参数赋值</span><br><span class="line">        <span class="string">&quot;no-extend-native&quot;</span>: 2,//禁止扩展native对象</span><br><span class="line">        <span class="string">&quot;no-extra-bind&quot;</span>: 2,//禁止不必要的函数绑定</span><br><span class="line">        <span class="string">&quot;no-extra-boolean-cast&quot;</span>: 2,//禁止不必要的bool转换</span><br><span class="line">        <span class="string">&quot;no-extra-parens&quot;</span>: 2,//禁止非必要的括号</span><br><span class="line">        <span class="string">&quot;no-extra-semi&quot;</span>: 2,//禁止多余的冒号</span><br><span class="line">        <span class="string">&quot;no-fallthrough&quot;</span>: 1,//禁止switch穿透</span><br><span class="line">        <span class="string">&quot;no-floating-decimal&quot;</span>: 2,//禁止省略浮点数中的0 .5 3.</span><br><span class="line">        <span class="string">&quot;no-func-assign&quot;</span>: 2,//禁止重复的函数声明</span><br><span class="line">        <span class="string">&quot;no-implicit-coercion&quot;</span>: 1,//禁止隐式转换</span><br><span class="line">        <span class="string">&quot;no-implied-eval&quot;</span>: 2,//禁止使用隐式<span class="built_in">eval</span></span><br><span class="line">        <span class="string">&quot;no-inline-comments&quot;</span>: 0,//禁止行内备注</span><br><span class="line">        <span class="string">&quot;no-inner-declarations&quot;</span>: [2, <span class="string">&quot;functions&quot;</span>],//禁止在块语句中使用声明（变量或函数）</span><br><span class="line">        <span class="string">&quot;no-invalid-regexp&quot;</span>: 2,//禁止无效的正则表达式</span><br><span class="line">        <span class="string">&quot;no-invalid-this&quot;</span>: 2,//禁止无效的this，只能用在构造器，类，对象字面量</span><br><span class="line">        <span class="string">&quot;no-irregular-whitespace&quot;</span>: 2,//不能有不规则的空格</span><br><span class="line">        <span class="string">&quot;no-iterator&quot;</span>: 2,//禁止使用__iterator__ 属性</span><br><span class="line">        <span class="string">&quot;no-label-var&quot;</span>: 2,//label名不能与var声明的变量名相同</span><br><span class="line">        <span class="string">&quot;no-labels&quot;</span>: 2,//禁止标签声明</span><br><span class="line">        <span class="string">&quot;no-lone-blocks&quot;</span>: 2,//禁止不必要的嵌套块</span><br><span class="line">        <span class="string">&quot;no-lonely-if&quot;</span>: 2,//禁止<span class="keyword">else</span>语句内只有<span class="keyword">if</span>语句</span><br><span class="line">        <span class="string">&quot;no-loop-func&quot;</span>: 1,//禁止在循环中使用函数（如果没有引用外部变量不形成闭包就可以）</span><br><span class="line">        <span class="string">&quot;no-mixed-requires&quot;</span>: [0, <span class="literal">false</span>],//声明时不能混用声明类型</span><br><span class="line">        <span class="string">&quot;no-mixed-spaces-and-tabs&quot;</span>: [2, <span class="literal">false</span>],//禁止混用tab和空格</span><br><span class="line">        <span class="string">&quot;linebreak-style&quot;</span>: [0, <span class="string">&quot;windows&quot;</span>],//换行风格</span><br><span class="line">        <span class="string">&quot;no-multi-spaces&quot;</span>: 1,//不能用多余的空格</span><br><span class="line">        <span class="string">&quot;no-multi-str&quot;</span>: 2,//字符串不能用\换行</span><br><span class="line">        <span class="string">&quot;no-multiple-empty-lines&quot;</span>: [1, &#123;<span class="string">&quot;max&quot;</span>: 2&#125;],//空行最多不能超过2行</span><br><span class="line">        <span class="string">&quot;no-native-reassign&quot;</span>: 2,//不能重写native对象</span><br><span class="line">        <span class="string">&quot;no-negated-in-lhs&quot;</span>: 2,//in 操作符的左边不能有!</span><br><span class="line">        <span class="string">&quot;no-nested-ternary&quot;</span>: 0,//禁止使用嵌套的三目运算</span><br><span class="line">        <span class="string">&quot;no-new&quot;</span>: 1,//禁止在使用new构造一个实例后不赋值</span><br><span class="line">        <span class="string">&quot;no-new-func&quot;</span>: 1,//禁止使用new Function</span><br><span class="line">        <span class="string">&quot;no-new-object&quot;</span>: 2,//禁止使用new Object()</span><br><span class="line">        <span class="string">&quot;no-new-require&quot;</span>: 2,//禁止使用new require</span><br><span class="line">        <span class="string">&quot;no-new-wrappers&quot;</span>: 2,//禁止使用new创建包装实例，new String new Boolean new Number</span><br><span class="line">        <span class="string">&quot;no-obj-calls&quot;</span>: 2,//不能调用内置的全局对象，比如Math() JSON()</span><br><span class="line">        <span class="string">&quot;no-octal&quot;</span>: 2,//禁止使用八进制数字</span><br><span class="line">        <span class="string">&quot;no-octal-escape&quot;</span>: 2,//禁止使用八进制转义序列</span><br><span class="line">        <span class="string">&quot;no-param-reassign&quot;</span>: 2,//禁止给参数重新赋值</span><br><span class="line">        <span class="string">&quot;no-path-concat&quot;</span>: 0,//node中不能使用__dirname或__filename做路径拼接</span><br><span class="line">        <span class="string">&quot;no-plusplus&quot;</span>: 0,//禁止使用++，--</span><br><span class="line">        <span class="string">&quot;no-process-env&quot;</span>: 0,//禁止使用process.env</span><br><span class="line">        <span class="string">&quot;no-process-exit&quot;</span>: 0,//禁止使用process.exit()</span><br><span class="line">        <span class="string">&quot;no-proto&quot;</span>: 2,//禁止使用__proto__属性</span><br><span class="line">        <span class="string">&quot;no-redeclare&quot;</span>: 2,//禁止重复声明变量</span><br><span class="line">        <span class="string">&quot;no-regex-spaces&quot;</span>: 2,//禁止在正则表达式字面量中使用多个空格 /foo bar/</span><br><span class="line">        <span class="string">&quot;no-restricted-modules&quot;</span>: 0,//如果禁用了指定模块，使用就会报错</span><br><span class="line">        <span class="string">&quot;no-return-assign&quot;</span>: 1,//return 语句中不能有赋值表达式</span><br><span class="line">        <span class="string">&quot;no-script-url&quot;</span>: 0,//禁止使用javascript:void(0)</span><br><span class="line">        <span class="string">&quot;no-self-compare&quot;</span>: 2,//不能比较自身</span><br><span class="line">        <span class="string">&quot;no-sequences&quot;</span>: 0,//禁止使用逗号运算符</span><br><span class="line">        <span class="string">&quot;no-shadow&quot;</span>: 2,//外部作用域中的变量不能与它所包含的作用域中的变量或参数同名</span><br><span class="line">        <span class="string">&quot;no-shadow-restricted-names&quot;</span>: 2,//严格模式中规定的限制标识符不能作为声明时的变量名使用</span><br><span class="line">        <span class="string">&quot;no-spaced-func&quot;</span>: 2,//函数调用时 函数名与()之间不能有空格</span><br><span class="line">        <span class="string">&quot;no-sparse-arrays&quot;</span>: 2,//禁止稀疏数组， [1,,2]</span><br><span class="line">        <span class="string">&quot;no-sync&quot;</span>: 0,//nodejs 禁止同步方法</span><br><span class="line">        <span class="string">&quot;no-ternary&quot;</span>: 0,//禁止使用三目运算符</span><br><span class="line">        <span class="string">&quot;no-trailing-spaces&quot;</span>: 1,//一行结束后面不要有空格</span><br><span class="line">        <span class="string">&quot;no-this-before-super&quot;</span>: 0,//在调用super()之前不能使用this或super</span><br><span class="line">        <span class="string">&quot;no-throw-literal&quot;</span>: 2,//禁止抛出字面量错误 throw <span class="string">&quot;error&quot;</span>;</span><br><span class="line">        <span class="string">&quot;no-undef&quot;</span>: 1,//不能有未定义的变量</span><br><span class="line">        <span class="string">&quot;no-undef-init&quot;</span>: 2,//变量初始化时不能直接给它赋值为undefined</span><br><span class="line">        <span class="string">&quot;no-undefined&quot;</span>: 2,//不能使用undefined</span><br><span class="line">        <span class="string">&quot;no-unexpected-multiline&quot;</span>: 2,//避免多行表达式</span><br><span class="line">        <span class="string">&quot;no-underscore-dangle&quot;</span>: 1,//标识符不能以_开头或结尾</span><br><span class="line">        <span class="string">&quot;no-unneeded-ternary&quot;</span>: 2,//禁止不必要的嵌套 var isYes = answer === 1 ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">        <span class="string">&quot;no-unreachable&quot;</span>: 2,//不能有无法执行的代码</span><br><span class="line">        <span class="string">&quot;no-unused-expressions&quot;</span>: 2,//禁止无用的表达式</span><br><span class="line">        <span class="string">&quot;no-unused-vars&quot;</span>: [2, &#123;<span class="string">&quot;vars&quot;</span>: <span class="string">&quot;all&quot;</span>, <span class="string">&quot;args&quot;</span>: <span class="string">&quot;after-used&quot;</span>&#125;],//不能有声明后未被使用的变量或参数</span><br><span class="line">        <span class="string">&quot;no-use-before-define&quot;</span>: 2,//未定义前不能使用</span><br><span class="line">        <span class="string">&quot;no-useless-call&quot;</span>: 2,//禁止不必要的call和apply</span><br><span class="line">        <span class="string">&quot;no-void&quot;</span>: 2,//禁用void操作符</span><br><span class="line">        <span class="string">&quot;no-var&quot;</span>: 0,//禁用var，用<span class="built_in">let</span>和const代替</span><br><span class="line">        <span class="string">&quot;no-warning-comments&quot;</span>: [1, &#123; <span class="string">&quot;terms&quot;</span>: [<span class="string">&quot;todo&quot;</span>, <span class="string">&quot;fixme&quot;</span>, <span class="string">&quot;xxx&quot;</span>], <span class="string">&quot;location&quot;</span>: <span class="string">&quot;start&quot;</span> &#125;],//不能有警告备注</span><br><span class="line">        <span class="string">&quot;no-with&quot;</span>: 2,//禁用with</span><br><span class="line"></span><br><span class="line">        <span class="string">&quot;array-bracket-spacing&quot;</span>: [2, <span class="string">&quot;never&quot;</span>],//是否允许非空数组里面有多余的空格</span><br><span class="line">        <span class="string">&quot;arrow-parens&quot;</span>: 0,//箭头函数用小括号括起来</span><br><span class="line">        <span class="string">&quot;arrow-spacing&quot;</span>: 0,//=&gt;的前/后括号</span><br><span class="line">        <span class="string">&quot;accessor-pairs&quot;</span>: 0,//在对象中使用getter/setter</span><br><span class="line">        <span class="string">&quot;block-scoped-var&quot;</span>: 0,//块语句中使用var</span><br><span class="line">        <span class="string">&quot;brace-style&quot;</span>: [1, <span class="string">&quot;1tbs&quot;</span>],//大括号风格</span><br><span class="line">        <span class="string">&quot;callback-return&quot;</span>: 1,//避免多次调用回调什么的</span><br><span class="line">        <span class="string">&quot;camelcase&quot;</span>: 2,//强制驼峰法命名</span><br><span class="line">        <span class="string">&quot;comma-dangle&quot;</span>: [2, <span class="string">&quot;never&quot;</span>],//对象字面量项尾不能有逗号</span><br><span class="line">        <span class="string">&quot;comma-spacing&quot;</span>: 0,//逗号前后的空格</span><br><span class="line">        <span class="string">&quot;comma-style&quot;</span>: [2, <span class="string">&quot;last&quot;</span>],//逗号风格，换行时在行首还是行尾</span><br><span class="line">        <span class="string">&quot;complexity&quot;</span>: [0, 11],//循环复杂度</span><br><span class="line">        <span class="string">&quot;computed-property-spacing&quot;</span>: [0, <span class="string">&quot;never&quot;</span>],//是否允许计算后的键名什么的</span><br><span class="line">        <span class="string">&quot;consistent-return&quot;</span>: 0,//return 后面是否允许省略</span><br><span class="line">        <span class="string">&quot;consistent-this&quot;</span>: [2, <span class="string">&quot;that&quot;</span>],//this别名</span><br><span class="line">        <span class="string">&quot;constructor-super&quot;</span>: 0,//非派生类不能调用super，派生类必须调用super</span><br><span class="line">        <span class="string">&quot;curly&quot;</span>: [2, <span class="string">&quot;all&quot;</span>],//必须使用 <span class="function"><span class="title">if</span></span>()&#123;&#125; 中的&#123;&#125;</span><br><span class="line">        <span class="string">&quot;default-case&quot;</span>: 2,//switch语句最后必须有default</span><br><span class="line">        <span class="string">&quot;dot-location&quot;</span>: 0,//对象访问符的位置，换行的时候在行首还是行尾</span><br><span class="line">        <span class="string">&quot;dot-notation&quot;</span>: [0, &#123; <span class="string">&quot;allowKeywords&quot;</span>: <span class="literal">true</span> &#125;],//避免不必要的方括号</span><br><span class="line">        <span class="string">&quot;eol-last&quot;</span>: 0,//文件以单一的换行符结束</span><br><span class="line">        <span class="string">&quot;eqeqeq&quot;</span>: 2,//必须使用全等</span><br><span class="line">        <span class="string">&quot;func-names&quot;</span>: 0,//函数表达式必须有名字</span><br><span class="line">        <span class="string">&quot;func-style&quot;</span>: [0, <span class="string">&quot;declaration&quot;</span>],//函数风格，规定只能使用函数声明/函数表达式</span><br><span class="line">        <span class="string">&quot;generator-star-spacing&quot;</span>: 0,//生成器函数*的前后空格</span><br><span class="line">        <span class="string">&quot;guard-for-in&quot;</span>: 0,//for <span class="keyword">in</span>循环要用<span class="keyword">if</span>语句过滤</span><br><span class="line">        <span class="string">&quot;handle-callback-err&quot;</span>: 0,//nodejs 处理错误</span><br><span class="line">        <span class="string">&quot;id-length&quot;</span>: 0,//变量名长度</span><br><span class="line">        <span class="string">&quot;indent&quot;</span>: [2, 4],//缩进风格</span><br><span class="line">        <span class="string">&quot;init-declarations&quot;</span>: 0,//声明时必须赋初值</span><br><span class="line">        <span class="string">&quot;key-spacing&quot;</span>: [0, &#123; <span class="string">&quot;beforeColon&quot;</span>: <span class="literal">false</span>, <span class="string">&quot;afterColon&quot;</span>: <span class="literal">true</span> &#125;],//对象字面量中冒号的前后空格</span><br><span class="line">        <span class="string">&quot;lines-around-comment&quot;</span>: 0,//行前/行后备注</span><br><span class="line">        <span class="string">&quot;max-depth&quot;</span>: [0, 4],//嵌套块深度</span><br><span class="line">        <span class="string">&quot;max-len&quot;</span>: [0, 80, 4],//字符串最大长度</span><br><span class="line">        <span class="string">&quot;max-nested-callbacks&quot;</span>: [0, 2],//回调嵌套深度</span><br><span class="line">        <span class="string">&quot;max-params&quot;</span>: [0, 3],//函数最多只能有3个参数</span><br><span class="line">        <span class="string">&quot;max-statements&quot;</span>: [0, 10],//函数内最多有几个声明</span><br><span class="line">        <span class="string">&quot;new-cap&quot;</span>: 2,//函数名首行大写必须使用new方式调用，首行小写必须用不带new方式调用</span><br><span class="line">        <span class="string">&quot;new-parens&quot;</span>: 2,//new时必须加小括号</span><br><span class="line">        <span class="string">&quot;newline-after-var&quot;</span>: 2,//变量声明后是否需要空一行</span><br><span class="line">        <span class="string">&quot;object-curly-spacing&quot;</span>: [0, <span class="string">&quot;never&quot;</span>],//大括号内是否允许不必要的空格</span><br><span class="line">        <span class="string">&quot;object-shorthand&quot;</span>: 0,//强制对象字面量缩写语法</span><br><span class="line">        <span class="string">&quot;one-var&quot;</span>: 1,//连续声明</span><br><span class="line">        <span class="string">&quot;operator-assignment&quot;</span>: [0, <span class="string">&quot;always&quot;</span>],//赋值运算符 += -=什么的</span><br><span class="line">        <span class="string">&quot;operator-linebreak&quot;</span>: [2, <span class="string">&quot;after&quot;</span>],//换行时运算符在行尾还是行首</span><br><span class="line">        <span class="string">&quot;padded-blocks&quot;</span>: 0,//块语句内行首行尾是否要空行</span><br><span class="line">        <span class="string">&quot;prefer-const&quot;</span>: 0,//首选const</span><br><span class="line">        <span class="string">&quot;prefer-spread&quot;</span>: 0,//首选展开运算</span><br><span class="line">        <span class="string">&quot;prefer-reflect&quot;</span>: 0,//首选Reflect的方法</span><br><span class="line">        <span class="string">&quot;quotes&quot;</span>: [1, <span class="string">&quot;single&quot;</span>],//引号类型 `` <span class="string">&quot;&quot;</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="string">&quot;quote-props&quot;</span>:[2, <span class="string">&quot;always&quot;</span>],//对象字面量中的属性名是否强制双引号</span><br><span class="line">        <span class="string">&quot;radix&quot;</span>: 2,//parseInt必须指定第二个参数</span><br><span class="line">        <span class="string">&quot;id-match&quot;</span>: 0,//命名检测</span><br><span class="line">        <span class="string">&quot;require-yield&quot;</span>: 0,//生成器函数必须有yield</span><br><span class="line">        <span class="string">&quot;semi&quot;</span>: [2, <span class="string">&quot;always&quot;</span>],//语句强制分号结尾</span><br><span class="line">        <span class="string">&quot;semi-spacing&quot;</span>: [0, &#123;<span class="string">&quot;before&quot;</span>: <span class="literal">false</span>, <span class="string">&quot;after&quot;</span>: <span class="literal">true</span>&#125;],//分号前后空格</span><br><span class="line">        <span class="string">&quot;sort-vars&quot;</span>: 0,//变量声明时排序</span><br><span class="line">        <span class="string">&quot;space-after-keywords&quot;</span>: [0, <span class="string">&quot;always&quot;</span>],//关键字后面是否要空一格</span><br><span class="line">        <span class="string">&quot;space-before-blocks&quot;</span>: [0, <span class="string">&quot;always&quot;</span>],//不以新行开始的块&#123;前面要不要有空格</span><br><span class="line">        <span class="string">&quot;space-before-function-paren&quot;</span>: [0, <span class="string">&quot;always&quot;</span>],//函数定义时括号前面要不要有空格</span><br><span class="line">        <span class="string">&quot;space-in-parens&quot;</span>: [0, <span class="string">&quot;never&quot;</span>],//小括号里面要不要有空格</span><br><span class="line">        <span class="string">&quot;space-infix-ops&quot;</span>: 0,//中缀操作符周围要不要有空格</span><br><span class="line">        <span class="string">&quot;space-return-throw-case&quot;</span>: 2,//return throw <span class="keyword">case</span>后面要不要加空格</span><br><span class="line">        <span class="string">&quot;space-unary-ops&quot;</span>: [0, &#123; <span class="string">&quot;words&quot;</span>: <span class="literal">true</span>, <span class="string">&quot;nonwords&quot;</span>: <span class="literal">false</span> &#125;],//一元运算符的前/后要不要加空格</span><br><span class="line">        <span class="string">&quot;spaced-comment&quot;</span>: 0,//注释风格要不要有空格什么的</span><br><span class="line">        <span class="string">&quot;strict&quot;</span>: 2,//使用严格模式</span><br><span class="line">        <span class="string">&quot;use-isnan&quot;</span>: 2,//禁止比较时使用NaN，只能用isNaN()</span><br><span class="line">        <span class="string">&quot;valid-jsdoc&quot;</span>: 0,//jsdoc规则</span><br><span class="line">        <span class="string">&quot;valid-typeof&quot;</span>: 2,//必须使用合法的typeof的值</span><br><span class="line">        <span class="string">&quot;vars-on-top&quot;</span>: 2,//var必须放在作用域顶部</span><br><span class="line">        <span class="string">&quot;wrap-iife&quot;</span>: [2, <span class="string">&quot;inside&quot;</span>],//立即执行函数表达式的小括号风格</span><br><span class="line">        <span class="string">&quot;wrap-regex&quot;</span>: 0,//正则表达式字面量用小括号包起来</span><br><span class="line">        <span class="string">&quot;yoda&quot;</span>: [2, <span class="string">&quot;never&quot;</span>]//禁止尤达条件</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<span id="more"></span>

]]></content>
      <tags>
        <tag>ESLint</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-element-admin_Excel导出使用</title>
    <url>/2023/56025/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<hr>
<p>介绍： vue-element-admin 中已经帮我们封装好的导入导出组件 ，我们直接拿过来使用就可以了。<br>Excel 的导入导出都是依赖于js-xlsx来实现的。<br>在 js-xlsx的基础上又封装了Export2Excel.js来方便导出数据。</p>
<h2 id="1-下载必须包"><a href="#1-下载必须包" class="headerlink" title="1.下载必须包"></a>1.下载必须包</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install xlsx file-saver -S</span><br><span class="line">npm install script-loader -S -D</span><br></pre></td></tr></table></figure>

<h2 id="2-下载或复制组件到自己项目"><a href="#2-下载或复制组件到自己项目" class="headerlink" title="2.下载或复制组件到自己项目"></a>2.下载或复制组件到自己项目</h2><p><a href="https://github.com/PanJiaChen/vue-element-admin/blob/master/src/vendor/Export2Excel.js">源代码地址</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable */</span></span><br><span class="line"><span class="keyword">import</span> &#123; saveAs &#125; <span class="keyword">from</span> <span class="string">&#x27;file-saver&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="variable constant_">XLSX</span> <span class="keyword">from</span> <span class="string">&#x27;xlsx&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">generateArray</span>(<span class="params">table</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> out = [];</span><br><span class="line">  <span class="keyword">var</span> rows = table.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;tr&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> ranges = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> R = <span class="number">0</span>; R &lt; rows.<span class="property">length</span>; ++R) &#123;</span><br><span class="line">    <span class="keyword">var</span> outRow = [];</span><br><span class="line">    <span class="keyword">var</span> row = rows[R];</span><br><span class="line">    <span class="keyword">var</span> columns = row.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;td&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> C = <span class="number">0</span>; C &lt; columns.<span class="property">length</span>; ++C) &#123;</span><br><span class="line">      <span class="keyword">var</span> cell = columns[C];</span><br><span class="line">      <span class="keyword">var</span> colspan = cell.<span class="title function_">getAttribute</span>(<span class="string">&#x27;colspan&#x27;</span>);</span><br><span class="line">      <span class="keyword">var</span> rowspan = cell.<span class="title function_">getAttribute</span>(<span class="string">&#x27;rowspan&#x27;</span>);</span><br><span class="line">      <span class="keyword">var</span> cellValue = cell.<span class="property">innerText</span>;</span><br><span class="line">      <span class="keyword">if</span> (cellValue !== <span class="string">&quot;&quot;</span> &amp;&amp; cellValue == +cellValue) cellValue = +cellValue;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//Skip ranges</span></span><br><span class="line">      ranges.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">range</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (R &gt;= range.<span class="property">s</span>.<span class="property">r</span> &amp;&amp; R &lt;= range.<span class="property">e</span>.<span class="property">r</span> &amp;&amp; outRow.<span class="property">length</span> &gt;= range.<span class="property">s</span>.<span class="property">c</span> &amp;&amp; outRow.<span class="property">length</span> &lt;= range.<span class="property">e</span>.<span class="property">c</span>) &#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= range.<span class="property">e</span>.<span class="property">c</span> - range.<span class="property">s</span>.<span class="property">c</span>; ++i) outRow.<span class="title function_">push</span>(<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//Handle Row Span</span></span><br><span class="line">      <span class="keyword">if</span> (rowspan || colspan) &#123;</span><br><span class="line">        rowspan = rowspan || <span class="number">1</span>;</span><br><span class="line">        colspan = colspan || <span class="number">1</span>;</span><br><span class="line">        ranges.<span class="title function_">push</span>(&#123;</span><br><span class="line">          <span class="attr">s</span>: &#123;</span><br><span class="line">            <span class="attr">r</span>: R,</span><br><span class="line">            <span class="attr">c</span>: outRow.<span class="property">length</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">e</span>: &#123;</span><br><span class="line">            <span class="attr">r</span>: R + rowspan - <span class="number">1</span>,</span><br><span class="line">            <span class="attr">c</span>: outRow.<span class="property">length</span> + colspan - <span class="number">1</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//Handle Value</span></span><br><span class="line">      outRow.<span class="title function_">push</span>(cellValue !== <span class="string">&quot;&quot;</span> ? cellValue : <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//Handle Colspan</span></span><br><span class="line">      <span class="keyword">if</span> (colspan)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> k = <span class="number">0</span>; k &lt; colspan - <span class="number">1</span>; ++k) outRow.<span class="title function_">push</span>(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    out.<span class="title function_">push</span>(outRow);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> [out, ranges];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">datenum</span>(<span class="params">v, date1904</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (date1904) v += <span class="number">1462</span>;</span><br><span class="line">  <span class="keyword">var</span> epoch = <span class="title class_">Date</span>.<span class="title function_">parse</span>(v);</span><br><span class="line">  <span class="keyword">return</span> (epoch - <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="title class_">Date</span>.<span class="title function_">UTC</span>(<span class="number">1899</span>, <span class="number">11</span>, <span class="number">30</span>))) / (<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sheet_from_array_of_arrays</span>(<span class="params">data, opts</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> ws = &#123;&#125;;</span><br><span class="line">  <span class="keyword">var</span> range = &#123;</span><br><span class="line">    <span class="attr">s</span>: &#123;</span><br><span class="line">      <span class="attr">c</span>: <span class="number">10000000</span>,</span><br><span class="line">      <span class="attr">r</span>: <span class="number">10000000</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">e</span>: &#123;</span><br><span class="line">      <span class="attr">c</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">r</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> R = <span class="number">0</span>; R != data.<span class="property">length</span>; ++R) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> C = <span class="number">0</span>; C != data[R].<span class="property">length</span>; ++C) &#123;</span><br><span class="line">      <span class="keyword">if</span> (range.<span class="property">s</span>.<span class="property">r</span> &gt; R) range.<span class="property">s</span>.<span class="property">r</span> = R;</span><br><span class="line">      <span class="keyword">if</span> (range.<span class="property">s</span>.<span class="property">c</span> &gt; C) range.<span class="property">s</span>.<span class="property">c</span> = C;</span><br><span class="line">      <span class="keyword">if</span> (range.<span class="property">e</span>.<span class="property">r</span> &lt; R) range.<span class="property">e</span>.<span class="property">r</span> = R;</span><br><span class="line">      <span class="keyword">if</span> (range.<span class="property">e</span>.<span class="property">c</span> &lt; C) range.<span class="property">e</span>.<span class="property">c</span> = C;</span><br><span class="line">      <span class="keyword">var</span> cell = &#123;</span><br><span class="line">        <span class="attr">v</span>: data[R][C]</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">if</span> (cell.<span class="property">v</span> == <span class="literal">null</span>) <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">var</span> cell_ref = <span class="variable constant_">XLSX</span>.<span class="property">utils</span>.<span class="title function_">encode_cell</span>(&#123;</span><br><span class="line">        <span class="attr">c</span>: C,</span><br><span class="line">        <span class="attr">r</span>: R</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> cell.<span class="property">v</span> === <span class="string">&#x27;number&#x27;</span>) cell.<span class="property">t</span> = <span class="string">&#x27;n&#x27;</span>;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> cell.<span class="property">v</span> === <span class="string">&#x27;boolean&#x27;</span>) cell.<span class="property">t</span> = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (cell.<span class="property">v</span> <span class="keyword">instanceof</span> <span class="title class_">Date</span>) &#123;</span><br><span class="line">        cell.<span class="property">t</span> = <span class="string">&#x27;n&#x27;</span>;</span><br><span class="line">        cell.<span class="property">z</span> = <span class="variable constant_">XLSX</span>.<span class="property">SSF</span>.<span class="property">_table</span>[<span class="number">14</span>];</span><br><span class="line">        cell.<span class="property">v</span> = <span class="title function_">datenum</span>(cell.<span class="property">v</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> cell.<span class="property">t</span> = <span class="string">&#x27;s&#x27;</span>;</span><br><span class="line"></span><br><span class="line">      ws[cell_ref] = cell;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (range.<span class="property">s</span>.<span class="property">c</span> &lt; <span class="number">10000000</span>) ws[<span class="string">&#x27;!ref&#x27;</span>] = <span class="variable constant_">XLSX</span>.<span class="property">utils</span>.<span class="title function_">encode_range</span>(range);</span><br><span class="line">  <span class="keyword">return</span> ws;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Workbook</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!(<span class="variable language_">this</span> <span class="keyword">instanceof</span> <span class="title class_">Workbook</span>)) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Workbook</span>();</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">SheetNames</span> = [];</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">Sheets</span> = &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">s2ab</span>(<span class="params">s</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> buf = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(s.<span class="property">length</span>);</span><br><span class="line">  <span class="keyword">var</span> view = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(buf);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i != s.<span class="property">length</span>; ++i) view[i] = s.<span class="title function_">charCodeAt</span>(i) &amp; <span class="number">0xFF</span>;</span><br><span class="line">  <span class="keyword">return</span> buf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">export_table_to_excel</span>(<span class="params">id</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> theTable = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(id);</span><br><span class="line">  <span class="keyword">var</span> oo = <span class="title function_">generateArray</span>(theTable);</span><br><span class="line">  <span class="keyword">var</span> ranges = oo[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* original data */</span></span><br><span class="line">  <span class="keyword">var</span> data = oo[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">var</span> ws_name = <span class="string">&quot;SheetJS&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> wb = <span class="keyword">new</span> <span class="title class_">Workbook</span>(),</span><br><span class="line">    ws = <span class="title function_">sheet_from_array_of_arrays</span>(data);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* add ranges to worksheet */</span></span><br><span class="line">  <span class="comment">// ws[&#x27;!cols&#x27;] = [&#x27;apple&#x27;, &#x27;banan&#x27;];</span></span><br><span class="line">  ws[<span class="string">&#x27;!merges&#x27;</span>] = ranges;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* add worksheet to workbook */</span></span><br><span class="line">  wb.<span class="property">SheetNames</span>.<span class="title function_">push</span>(ws_name);</span><br><span class="line">  wb.<span class="property">Sheets</span>[ws_name] = ws;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> wbout = <span class="variable constant_">XLSX</span>.<span class="title function_">write</span>(wb, &#123;</span><br><span class="line">    <span class="attr">bookType</span>: <span class="string">&#x27;xlsx&#x27;</span>,</span><br><span class="line">    <span class="attr">bookSST</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;binary&#x27;</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">saveAs</span>(<span class="keyword">new</span> <span class="title class_">Blob</span>([<span class="title function_">s2ab</span>(wbout)], &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;application/octet-stream&quot;</span></span><br><span class="line">  &#125;), <span class="string">&quot;test.xlsx&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">export_json_to_excel</span>(<span class="params">&#123;</span></span><br><span class="line"><span class="params">  multiHeader = [],</span></span><br><span class="line"><span class="params">  header,</span></span><br><span class="line"><span class="params">  data,</span></span><br><span class="line"><span class="params">  filename,</span></span><br><span class="line"><span class="params">  merges = [],</span></span><br><span class="line"><span class="params">  autoWidth = <span class="literal">true</span>,</span></span><br><span class="line"><span class="params">  bookType = <span class="string">&#x27;xlsx&#x27;</span></span></span><br><span class="line"><span class="params">&#125; = &#123;&#125;</span>) &#123;</span><br><span class="line">  <span class="comment">/* original data */</span></span><br><span class="line">  filename = filename || <span class="string">&#x27;excel-list&#x27;</span></span><br><span class="line">  data = [...data]</span><br><span class="line">  data.<span class="title function_">unshift</span>(header);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = multiHeader.<span class="property">length</span> - <span class="number">1</span>; i &gt; -<span class="number">1</span>; i--) &#123;</span><br><span class="line">    data.<span class="title function_">unshift</span>(multiHeader[i])</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> ws_name = <span class="string">&quot;SheetJS&quot;</span>;</span><br><span class="line">  <span class="keyword">var</span> wb = <span class="keyword">new</span> <span class="title class_">Workbook</span>(),</span><br><span class="line">    ws = <span class="title function_">sheet_from_array_of_arrays</span>(data);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (merges.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!ws[<span class="string">&#x27;!merges&#x27;</span>]) ws[<span class="string">&#x27;!merges&#x27;</span>] = [];</span><br><span class="line">    merges.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      ws[<span class="string">&#x27;!merges&#x27;</span>].<span class="title function_">push</span>(<span class="variable constant_">XLSX</span>.<span class="property">utils</span>.<span class="title function_">decode_range</span>(item))</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (autoWidth) &#123;</span><br><span class="line">    <span class="comment">/*设置worksheet每列的最大宽度*/</span></span><br><span class="line">    <span class="keyword">const</span> colWidth = data.<span class="title function_">map</span>(<span class="function"><span class="params">row</span> =&gt;</span> row.<span class="title function_">map</span>(<span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">/*先判断是否为null/undefined*/</span></span><br><span class="line">      <span class="keyword">if</span> (val == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="string">&#x27;wch&#x27;</span>: <span class="number">10</span></span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">/*再判断是否为中文*/</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (val.<span class="title function_">toString</span>().<span class="title function_">charCodeAt</span>(<span class="number">0</span>) &gt; <span class="number">255</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="string">&#x27;wch&#x27;</span>: val.<span class="title function_">toString</span>().<span class="property">length</span> * <span class="number">2</span></span><br><span class="line">        &#125;;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="string">&#x27;wch&#x27;</span>: val.<span class="title function_">toString</span>().<span class="property">length</span></span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;))</span><br><span class="line">    <span class="comment">/*以第一行为初始值*/</span></span><br><span class="line">    <span class="keyword">let</span> result = colWidth[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; colWidth.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; colWidth[i].<span class="property">length</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (result[j][<span class="string">&#x27;wch&#x27;</span>] &lt; colWidth[i][j][<span class="string">&#x27;wch&#x27;</span>]) &#123;</span><br><span class="line">          result[j][<span class="string">&#x27;wch&#x27;</span>] = colWidth[i][j][<span class="string">&#x27;wch&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ws[<span class="string">&#x27;!cols&#x27;</span>] = result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* add worksheet to workbook */</span></span><br><span class="line">  wb.<span class="property">SheetNames</span>.<span class="title function_">push</span>(ws_name);</span><br><span class="line">  wb.<span class="property">Sheets</span>[ws_name] = ws;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> wbout = <span class="variable constant_">XLSX</span>.<span class="title function_">write</span>(wb, &#123;</span><br><span class="line">    <span class="attr">bookType</span>: bookType,</span><br><span class="line">    <span class="attr">bookSST</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;binary&#x27;</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="title function_">saveAs</span>(<span class="keyword">new</span> <span class="title class_">Blob</span>([<span class="title function_">s2ab</span>(wbout)], &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;application/octet-stream&quot;</span></span><br><span class="line">  &#125;), <span class="string">`<span class="subst">$&#123;filename&#125;</span>.<span class="subst">$&#123;bookType&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-导入并使用组件组件"><a href="#3-导入并使用组件组件" class="headerlink" title="3.导入并使用组件组件"></a>3.导入并使用组件组件</h2><p>直接在事件函数里使用：懒加载方法只有再触发事件后再去找封装好的组件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>(<span class="string">&#x27;@/vendor/Export2Excel&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">excel</span> =&gt;</span> &#123;</span><br><span class="line">  excel.<span class="title function_">export_json_to_excel</span>(&#123;</span><br><span class="line">    <span class="attr">header</span>: tHeader, <span class="comment">//表头 必填</span></span><br><span class="line">    data, <span class="comment">//具体数据 必填</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;excel-list&#x27;</span>, <span class="comment">//非必填</span></span><br><span class="line">    <span class="attr">autoWidth</span>: <span class="literal">true</span>, <span class="comment">//非必填</span></span><br><span class="line">    <span class="attr">bookType</span>: <span class="string">&#x27;xlsx&#x27;</span> <span class="comment">//非必填</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>类型</th>
<th>可选值</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>header</td>
<td>导出数据的表头</td>
<td>Array</td>
<td>/</td>
<td>[]</td>
</tr>
<tr>
<td>data</td>
<td>导出的具体数据</td>
<td>Array</td>
<td>/</td>
<td>[[]]</td>
</tr>
<tr>
<td>filename</td>
<td>导出文件名</td>
<td>String</td>
<td>/</td>
<td>excel-list</td>
</tr>
<tr>
<td>autoWidth</td>
<td>单元格是否要自适应宽度</td>
<td>Boolean</td>
<td>true / false</td>
<td>true</td>
</tr>
<tr>
<td>bookType</td>
<td>导出文件类型</td>
<td>String</td>
<td>xlsx, csv, txt, <a href="https://github.com/SheetJS/js-xlsx#supported-output-formats">more</a></td>
<td>xlsx</td>
</tr>
</tbody></table>
<h4 id="案例代码："><a href="#案例代码：" class="headerlink" title="案例代码："></a>案例代码：</h4><p>实际使用一般表头和内容都是要做转换：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;exporExcel&quot;</span>&gt;</span>excel导出<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line">&lt;template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">async</span> <span class="title function_">transExcer</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> map = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;编号&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;密码&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="string">&#x27;mobile&#x27;</span>: <span class="string">&#x27;手机号&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;姓名&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="string">&#x27;timeOfEntry&#x27;</span>: <span class="string">&#x27;入职日期&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="string">&#x27;formOfEmployment&#x27;</span>: <span class="string">&#x27;聘用形式&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="string">&#x27;correctionTime&#x27;</span>: <span class="string">&#x27;转正日期&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="string">&#x27;workNumber&#x27;</span>: <span class="string">&#x27;工号&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="string">&#x27;departmentName&#x27;</span>: <span class="string">&#x27;部门&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="string">&#x27;staffPhoto&#x27;</span>: <span class="string">&#x27;头像地址&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125; <span class="comment">// 枚举</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> hireTypEnmu = &#123; <span class="number">1</span>: <span class="string">&#x27;正式&#x27;</span>, <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;非正式&#x27;</span> &#125; <span class="comment">// 枚举</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">getUserList</span>(<span class="variable language_">this</span>.<span class="property">pageObj</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;excel转换需要的数据&#x27;</span>, res)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> enKeys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(res.<span class="property">data</span>.<span class="property">rows</span>[<span class="number">0</span>]) <span class="comment">// 得到英文表头</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> header = enKeys.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> map[item]) <span class="comment">// 得到要导出中文表头</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> data = res.<span class="property">data</span>.<span class="property">rows</span>.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        item.<span class="property">formOfEmployment</span> = hireTypEnmu[item.<span class="property">formOfEmployment</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">values</span>(item)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;) <span class="comment">// 得到要导出的具体数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(header, data)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123; header, data &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;, <span class="comment">// 转换导出需要的数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">async</span> <span class="title function_">exporExcel</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> &#123; header, data &#125; = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">transExcer</span>()<span class="comment">// 转换excel数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">import</span>(<span class="string">&#x27;@/components/exportExcel/Export2Excel&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">excel</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        excel.<span class="title function_">export_json_to_excel</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          header, <span class="comment">// 表头 必填</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          data, <span class="comment">// 具体数据 必填</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">filename</span>: <span class="string">&#x27;excel-list&#x27;</span>, <span class="comment">// 非必填</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">autoWidth</span>: <span class="literal">true</span>, <span class="comment">// 非必填</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">bookType</span>: <span class="string">&#x27;xlsx&#x27;</span> <span class="comment">// 非必填</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;<span class="comment">// 导出excel</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

]]></content>
      <tags>
        <tag>Vue</tag>
        <tag>vue-element-admin</tag>
      </tags>
  </entry>
  <entry>
    <title>vue实现数字从1递增到指定值</title>
    <url>/2023/53257/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<p>vue封装一个组件实现，一个从1递增到指定值，这个指定值是通过父组件传递过来的。</p>
<p>实现代码：</p>
<ul>
<li><p>父组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 使用组件 --&gt;</span><br><span class="line">    &lt;digit-dance :digit=&quot;100&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 导入组件</span><br><span class="line">import DigitDance from &#x27;@/views/components/DigitDance.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    // 局部注册组件</span><br><span class="line">    DigitDance</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>子组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;span&gt;&#123;&#123; number &#125;&#125;&lt;/span&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    digit: Number</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      number: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    digit() &#123;</span><br><span class="line">      this.number = 0</span><br><span class="line">      // 如果是0，不需要处理</span><br><span class="line">      if (!this.digit) &#123;</span><br><span class="line">        return</span><br><span class="line">      &#125;</span><br><span class="line">      // 动画总时长</span><br><span class="line">      const duration = 2000</span><br><span class="line">      if (this.digit &lt;= 8) &#123;</span><br><span class="line">        const id2 = setInterval(() =&gt; &#123;</span><br><span class="line">          this.number++</span><br><span class="line">          if (this.number === this.digit) &#123;</span><br><span class="line">            clearInterval(id2)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, duration / this.digit)</span><br><span class="line">        return</span><br><span class="line">      &#125;</span><br><span class="line">      const start = duration * 0.6</span><br><span class="line">      const end = duration * 0.4</span><br><span class="line">      // 启动定时器</span><br><span class="line">      const id = setInterval(() =&gt; &#123;</span><br><span class="line">        this.number++</span><br><span class="line"></span><br><span class="line">        if (this.number === this.digit - 8) &#123;</span><br><span class="line">          clearInterval(id)</span><br><span class="line"></span><br><span class="line">          const id2 = setInterval(() =&gt; &#123;</span><br><span class="line">            this.number++</span><br><span class="line">            if (this.number === this.digit) &#123;</span><br><span class="line">              clearInterval(id2)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;, end / 8)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, start / (this.digit - 8))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">  &lt;style&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<span id="more"></span>

]]></content>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>【杂谈】浅谈社会公信力的丧失</title>
    <url>/2023/36412/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h2 id="0-前言："><a href="#0-前言：" class="headerlink" title="0. 前言："></a>0. 前言：</h2><p>在开始之前我想先说说什么是社会公信力。社会公信力是指一个个体、组织或机构在社会中获得的信任和声誉程度。它反映了人们对其行为、承诺和道德准则的信任程度。社会公信力是建立在诚信、透明度和责任感基础上的，它对于个人、企业、政府和其他组织来说都非常重要。</p>
<p>一个具有良好社会公信力的个体或者组织，通常表现出以下几个特征：</p>
<ul>
<li>诚信和守信：他们言行一致，信守承诺，不欺骗他人。</li>
<li>诚信和守信：他们言行一致，信守承诺，不欺骗他人。</li>
<li>透明度：他们公开信息，对外界保持开放和公正。</li>
<li>责任感：他们对自己的行为负责，并愿意承担应有的责任和后果。</li>
<li>反馈和改进能力：他们重视他人的反馈和意见，积极改进自身不足之处。</li>
<li>社会参与：他们积极参与社会公益事业，关注社会问题并为之做出贡献。</li>
</ul>
<span id="more"></span>

<h2 id="1-群众里面有坏人啊"><a href="#1-群众里面有坏人啊" class="headerlink" title="1. 群众里面有坏人啊"></a>1. 群众里面有坏人啊</h2><p>其实我对社会公信力逐渐丧失有比较直观的感受是在19年疫情开始的时候。</p>
]]></content>
      <tags>
        <tag>杂谈</tag>
        <tag>公信力</tag>
      </tags>
  </entry>
  <entry>
    <title>【算法】JS实现斐波那契数列</title>
    <url>/2023/36309/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<blockquote>
<p>斐波那契数列，又称黄金分割数列，是一种递归的数列，以它的递推公式和美丽的数学性质得到了广泛的应用。本文将介绍使用 JS 实现斐波那契数列的几种方法，包括递归和循环，以及优化方案等。</p>
</blockquote>
<span id="more"></span>

<h2 id="1-斐波那契数列定义"><a href="#1-斐波那契数列定义" class="headerlink" title="1. 斐波那契数列定义"></a>1. 斐波那契数列定义</h2><p>斐波那契数列（Fibonacci sequence）是一种递归的数列，以它的递推公式和美丽的数学性质得到了广泛的应用。它的定义如下：F(0)=0，F(1)=1，F(n)=F(n-1)+F(n-2)（n&gt;=2，n∈N*）。也就是说，第 n 个斐波那契数就是第 n-1 个和第 n-2 个斐波那契数之和。通常用 F(n)表示斐波那契数列中的第 n 个数。斐波那契数列是一个由 0 和 1 开始，后续的每一项都是前两项之和的数列。</p>
<h2 id="2-以终为始——递归实现"><a href="#2-以终为始——递归实现" class="headerlink" title="2. 以终为始——递归实现"></a>2. 以终为始——递归实现</h2><h3 id="2-1-普通递归"><a href="#2-1-普通递归" class="headerlink" title="2.1 普通递归"></a>2.1 普通递归</h3><p>对于普通递归我的总结就是：<strong>以终为始，套娃计算，适时终止</strong>。</p>
<ul>
<li>以始为终：用倒推的方式来思考。</li>
<li>套娃计算：找到套娃的公式。</li>
<li>适时终止：递归到能直接得到结果的地方就停并返回结果。</li>
</ul>
<p>下面我们来开始倒推。从后往前倒推就是 :</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">f</span>(n) = <span class="title function_">f</span>(n-<span class="number">1</span>) + <span class="title function_">f</span>(n-<span class="number">2</span>)</span><br><span class="line"><span class="title function_">f</span>(n-<span class="number">1</span>) = <span class="title function_">f</span>(n-<span class="number">2</span>) - <span class="title function_">f</span>(n-<span class="number">3</span>)</span><br><span class="line">...</span><br><span class="line"><span class="title function_">f</span>(<span class="number">3</span>) = <span class="title function_">f</span>(<span class="number">2</span>) + <span class="title function_">f</span>(<span class="number">1</span>)</span><br><span class="line"><span class="title function_">f</span>(<span class="number">2</span>) = <span class="number">1</span></span><br><span class="line"><span class="title function_">f</span>(<span class="number">1</span>) = <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>我们可以得到：</p>
<ul>
<li>公式：f(n) = f(n-1) + f(n-2)</li>
<li>终止条件：n=2 和 n=1</li>
</ul>
<p>最终代码实现如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fibonacci</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">fibonacci</span>(n - <span class="number">1</span>) + <span class="title function_">fibonacci</span>(n - <span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证</span></span><br><span class="line"><span class="title function_">fibonacci</span>(<span class="number">0</span>)</span><br><span class="line"><span class="title function_">fibonacci</span>(<span class="number">1</span>)</span><br><span class="line"><span class="title function_">fibonacci</span>(<span class="number">2</span>)</span><br><span class="line"><span class="title function_">fibonacci</span>(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>JavaScript 代码运行时，函数调用会在内存形成一个“调用记录”，又称“调用帧”（call frame），保存调用位置和内部变量等信息。<br>F(50)调用 F(49) 和 F(48)，F(49)调用 F(48) 和 F(47)，…<br>以此类推，所有的调用记录，就形成一个“调用栈”（call stack）。<br>如果栈深度过大，就会导致堆栈溢出。</p>
</blockquote>
<ul>
<li>测试一下你的调用栈</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">inc</span>(<span class="params"></span>) &#123;</span><br><span class="line">  i++;</span><br><span class="line">  <span class="title function_">inc</span>();</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="title function_">inc</span>();</span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你的浏览器中最大的调用栈是：&#x27;</span>, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-2-缓存重复计算"><a href="#2-2-缓存重复计算" class="headerlink" title="2.2 缓存重复计算"></a>2.2 缓存重复计算</h3><p>上面提到<code>fibonacci(50)</code>在浏览器中执行因为栈溢出会导致浏览器卡死的情况，让我们来优化一下。<br>观察下图我们不难发现，两个黄色实线圈和两个紫色的虚线的地方，都出现了重复计算,<code>fibonacci(n)</code>中的 n 越大，重复计算的地方越多。如果我们能缓存每次计算的结果，就能减少重复计算，提升运行效率。</p>
<p><img src="http://img.duya233.top/duya-imageimage-20230713154812257.png" alt="image-20230713154812257"></p>
<p>代码实现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fibonacci</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="comment">// 利用闭包缓存计算的结果</span></span><br><span class="line">  <span class="keyword">const</span> memo = [<span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">fib</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (memo[n] === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> memo[n] = <span class="title function_">fib</span>(n - <span class="number">2</span>) + <span class="title function_">fib</span>(n - <span class="number">1</span>);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> memo[n];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fib</span>(n));</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">fib</span>(n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证</span></span><br><span class="line"><span class="title function_">fibonacci</span>(<span class="number">0</span>)</span><br><span class="line"><span class="title function_">fibonacci</span>(<span class="number">1</span>)</span><br><span class="line"><span class="title function_">fibonacci</span>(<span class="number">2</span>)</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="title function_">fibonacci</span>(<span class="number">50</span>)</span><br></pre></td></tr></table></figure>

<h3 id="2-3-避免重复计算（尾调优化）"><a href="#2-3-避免重复计算（尾调优化）" class="headerlink" title="2.3 避免重复计算（尾调优化）"></a>2.3 避免重复计算（尾调优化）</h3><p>尾调用优化是一种有效的优化技术，可以减少函数调用次数，从而提升递归函数的效率。它的原理是将当前函数的返回值作为另一个函数的参数，并将函数的调用放到最后（即尾调），从而减少函数调用和堆栈的深度。这样，就可以让函数能够在堆栈中以更少的深度运行，从而提高函数的效率。</p>
<p><img src="http://img.duya233.top/duya-imageimage-20230713155213815.png" alt="image-20230713155213815"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数中多了两个参数不太优雅？传个参数默认值就可以解决！</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fibonacci</span>(<span class="params">n, sum = <span class="number">0</span>, last = <span class="number">1</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(sum)</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">fibonacci</span>(n - <span class="number">1</span>, last, sum + last);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证</span></span><br><span class="line"><span class="title function_">fibonacci</span>(<span class="number">0</span>)</span><br><span class="line"><span class="title function_">fibonacci</span>(<span class="number">1</span>)</span><br><span class="line"><span class="title function_">fibonacci</span>(<span class="number">2</span>)</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="title function_">fibonacci</span>(<span class="number">50</span>)</span><br></pre></td></tr></table></figure>

<h2 id="3-手法优化——循环实现"><a href="#3-手法优化——循环实现" class="headerlink" title="3. 手法优化——循环实现"></a>3. 手法优化——循环实现</h2><h3 id="3-1-普通for循环"><a href="#3-1-普通for循环" class="headerlink" title="3.1 普通for循环"></a>3.1 普通for循环</h3><p>使用普通的 for 循环实现斐波那契数列，只需要将前两个数字作为起始值，每次循环加上前两个数字的和，即可实现斐波那契数列。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fibonacci</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> arr = [<span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    arr[i] = arr[i-<span class="number">2</span>] + arr[i-<span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[n])</span><br><span class="line">  <span class="keyword">return</span> arr[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证</span></span><br><span class="line"><span class="title function_">fibonacci</span>(<span class="number">0</span>)</span><br><span class="line"><span class="title function_">fibonacci</span>(<span class="number">1</span>)</span><br><span class="line"><span class="title function_">fibonacci</span>(<span class="number">2</span>)</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="title function_">fibonacci</span>(<span class="number">50</span>)</span><br></pre></td></tr></table></figure>

<h3 id="3-2-空间上的优化"><a href="#3-2-空间上的优化" class="headerlink" title="3.2 空间上的优化"></a>3.2 空间上的优化</h3><p>就是省一个数组，如果只求第n个的值，也就没有必要用数组保存了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fibonacci</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> last = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> tmp = sum;</span><br><span class="line">    sum = last;</span><br><span class="line">    last = tmp + last;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(sum)</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证</span></span><br><span class="line"><span class="title function_">fibonacci</span>(<span class="number">0</span>)</span><br><span class="line"><span class="title function_">fibonacci</span>(<span class="number">1</span>)</span><br><span class="line"><span class="title function_">fibonacci</span>(<span class="number">2</span>)</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="title function_">fibonacci</span>(<span class="number">50</span>)</span><br></pre></td></tr></table></figure>

<h3 id="3-3-ES6解构赋值"><a href="#3-3-ES6解构赋值" class="headerlink" title="3.3 ES6解构赋值"></a>3.3 ES6解构赋值</h3><p>上面的代码看的有些许难受，因为循环的时候引入了一个临时变量<code>tmp</code>，其实我们用ES6中的解构赋值代码可读性会更好。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fibonacci</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> last = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    [sum, last] = [last, sum + last]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(sum)</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证</span></span><br><span class="line"><span class="title function_">fibonacci</span>(<span class="number">0</span>)</span><br><span class="line"><span class="title function_">fibonacci</span>(<span class="number">1</span>)</span><br><span class="line"><span class="title function_">fibonacci</span>(<span class="number">2</span>)</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="title function_">fibonacci</span>(<span class="number">50</span>)</span><br></pre></td></tr></table></figure>

<h3 id="3-4-ES6-Generator-函数写法"><a href="#3-4-ES6-Generator-函数写法" class="headerlink" title="3.4 ES6 Generator 函数写法"></a>3.4 ES6 Generator 函数写法</h3><p>ES6 中的 Generator 函数是一种可以在函数调用时，暂停和恢复运行的函数。<br>Generator 函数返回的是一个迭代器，因此可以使用 for…of… 语法进行遍历。for…of… 循环可以自动遍历 Generator 函数运行时生成的 Iterator 对象，从而不需要再调用 next 方法。这样，就可以对 Generator 函数中 yield 生成的数据进行处理。<br>是不是发现了：这里使用 Generator 函数和 for…of… 来写斐波那契数列也挺合适。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">fibGenerator</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> [prev, curr] = [<span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">yield</span> prev;</span><br><span class="line">    [prev, curr] = [curr, prev + curr];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fibonacci</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> <span class="title function_">fibGenerator</span>()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (index++ &lt; n) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证</span></span><br><span class="line"><span class="title function_">fibonacci</span>(<span class="number">0</span>) <span class="comment">// 0</span></span><br><span class="line"><span class="title function_">fibonacci</span>(<span class="number">1</span>) <span class="comment">// 1</span></span><br><span class="line"><span class="title function_">fibonacci</span>(<span class="number">2</span>) <span class="comment">// 1</span></span><br><span class="line"><span class="title function_">fibonacci</span>(<span class="number">3</span>) <span class="comment">// 2</span></span><br><span class="line"><span class="title function_">fibonacci</span>(<span class="number">4</span>) <span class="comment">// 3</span></span><br><span class="line"><span class="title function_">fibonacci</span>(<span class="number">5</span>) <span class="comment">// 5</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="title function_">fibonacci</span>(<span class="number">50</span>) <span class="comment">// 12586269025</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>【踩坑记事】关于我被switch语句折腾的3小时</title>
    <url>/2023/13191/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h2><p>记一次这周在项目上遇到的一个问题，为解决这个问题我和朋友研究了大概两三个小时。我们都是第一次遇到这种问题，请大佬勿喷，下面我来讲一下这个问题的成因和解决的办法。</p>
<p>直接说结果[问题结论](#4. 问题解决)</p>
<h2 id="1-问题来源"><a href="#1-问题来源" class="headerlink" title="1. 问题来源"></a>1. 问题来源</h2><p>在目前这个项目中有一个函数需要根据后端返回返回的数据，分别进行不同操作。因为要执行不同的操作的判断有点多，所以决定使用<code>switch</code>语句来进行判断。</p>
<p>一般来说<code>switch</code>语句是长这样的：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (expr) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;Oranges&quot;</span>:</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Oranges are $0.59 a pound.&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;Apples&quot;</span>:</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Apples are $0.32 a pound.&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;Bananas&quot;</span>:</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Bananas are $0.48 a pound.&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;Cherries&quot;</span>:</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Cherries are $3.00 a pound.&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;Mangoes&quot;</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;Papayas&quot;</span>:</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Mangoes and papayas are $2.79 a pound.&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="attr">default</span>:</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Sorry, we are out of &quot;</span> + expr + <span class="string">&quot;.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Is there anything else you&#x27;d like?&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>我写的代码也是这样的格式，但是很奇怪的是在浏览器中运行会报一个非常奇怪的错误。</p>
<p><img src="https://img.duya233.top/duya-imageimage-20230827172712360.png" alt="image-20230827172712360"></p>
<p>提示我“未捕获(在promise中)ReferenceError:在初始化之前无法访问<code>orderID</code>”，就很奇怪哎，我这个<code>orderID</code>已经是在全局声明了，并且如果实在<code>switch</code>外面打印这个<code>orderID</code>是可以正常访问的。然后我开始怀疑是不是<code>switch</code>语句写错了？但是经过排查发现好像没有啥问题呀！然后我们就开始排错。</p>
<h2 id="2-问题排查"><a href="#2-问题排查" class="headerlink" title="2. 问题排查"></a>2. 问题排查</h2><p>首先我们开始尝试在<code>switch case</code>内部去let一个<code>orderID</code>，发现还是会报上述错误。于是我们想到是不是是<code>orderID</code>这个变量名的问题呢？然后我们就随便声明一个变量，用这个随便声明的变量去接函数的返回值，发现这个随便声明的变量是可以正常访问的。这就我们感觉非常奇怪的，为什么会出现这种情况呢？接着我们就在想会不会是<code>switch</code>语句内部哪里出现了问题，然后我们开始挨个注释<code>case</code>判断是哪一个<code>case</code>出现了问题。然后最后发现<code>case 1:</code>被注释掉了这个判断就正常了，那么这个<code>case 1:</code>和其他的有什么不同呢？</p>
<img src="https://img.duya233.top/duya-imageimage-20230827174333134.png" alt="image-20230827174333134" style="zoom: 50%;" />

<p>看到这，我也是没有搞明白为什么会这样？直觉来讲，其他的<code>case</code>也不会跑到<code>case</code>里面来找变量吧，然后就网上找文档到底是怎么一回事。</p>
<h2 id="3-问题结论"><a href="#3-问题结论" class="headerlink" title="3. 问题结论"></a>3. 问题结论</h2><p>最后在网站找到一篇文章说<strong>case语句的变量声明是在整个switch语句中可见的</strong>。</p>
<p>emmmm</p>
<p>这就很反直觉了。</p>
<p>这里引用部分原文</p>
<blockquote>
<p>1、case语句的变量声明是在整个switch语句中可见的。</p>
<p>2、case语句中可以变量声明和定义，但在case语句中变量初始化的话有时会产生编译错误，原因是编译器为了避免“不一致”现象。具体解释如下：</p>
<ul>
<li>因为case语句中的变量声明、定义、初始化实在整个switch语句中可见的，变量声明实在编译时完成，而变量初始化需要在执行是完成，所以，如果在一个非最后一个case的case（命名case1）中进行了变量声明加初始化（如int a=0;）,若真正执行的时候switch的条件值是该case后面的某个case（命名case2）的值，则case2中可以看到a的声明，也可以使用啊，但是因为没有执行case1，所以a没有初始化，所以在case2中使用的a并不是“预想的”a，这就产生了不一致。但如果在case1中只有声明或定义，而没有初始化，则不会产生这种不一致，编译时就不会报错。</li>
</ul>
<p>这个可以通过编译，因为此时在case ‘b ‘中a不可见（因为a在语句快中），所以不会出现上述的“不一致”现象，因此编译顺利通过。</p>
<p>此时也会顺利通过编译，因为a的定义（初始化）放在了最后一个分支中，由于在case ‘b ‘后面没有其他分支了，所以同样不会出现上述的“不一致”现象，所以仍然顺利通过编译。</p>
</blockquote>
<h2 id="4-问题解决"><a href="#4-问题解决" class="headerlink" title="4. 问题解决"></a>4. 问题解决</h2><p>这里提供一个解决问题的方法</p>
<ul>
<li>不在<code>case</code>里面使用赋值解构</li>
<li>或者是使用<code>&#123;&#125;</code>包住要判断的内</li>
</ul>
<p><strong>例如：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(val) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:&#123;</span><br><span class="line">        赋值解构、变量声明...</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        ...执行的操作</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">         <span class="attr">default</span>:</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

]]></content>
      <tags>
        <tag>踩坑记事</tag>
      </tags>
  </entry>
  <entry>
    <title>一文搞懂pinia状态管理</title>
    <url>/2023/62051/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h1 id="1-Pinaia"><a href="#1-Pinaia" class="headerlink" title="1. Pinaia"></a>1. Pinaia</h1><hr>
<p>Pinia是一个全新的Vue状态管理库，是Vuex的代替者，尤雨溪强势推荐。</p>
<p>如果你学过Vue2，那么你一定使用过Vuex。我们都知道Vuex在Vue2中主要充当状态管理的角色，所谓状态管理，简单来说就是一个存储数据的地方，存放在Vuex中的数据在各个组件中都能访问到，它是Vue生态中重要的组成部分。</p>
<p>在Vue3中，可以使用传统的Vuex来实现状态管理，也可以使用最新的pinia来实现状态管理，我们来看看官网如何解释pinia的。</p>
<p><strong>官网解释：</strong></p>
<blockquote>
<p>Pinia 是 Vue 的存储库，它允许您跨组件/页面共享状态。<br>从上面官网的解释不难看出，pinia和Vuex的作用是一样的，它也充当的是一个存储数据的作用，存储在pinia的数据允许我们在各个组件中使用。</p>
</blockquote>
<p><strong>Pinia优势：</strong></p>
<ul>
<li><p>支持Vue2和Vue3（Vue 版本大于 2.7）</p>
</li>
<li><p>抛弃传统的 <code>Mutation</code> ，只有 <code>state, getter</code> 和 <code>action</code> ，简化状态管理库</p>
</li>
<li><p>良好的Typescript支持，毕竟我们Vue3都推荐使用TS来编写，这个时候使用pinia就非常合适</p>
</li>
<li><p>不需要嵌套模块，符合 Vue3 的 Composition api，让代码扁平化</p>
</li>
<li><p>支持服务的渲染</p>
</li>
</ul>
<h3 id="1-1-Pinia基本使用"><a href="#1-1-Pinia基本使用" class="headerlink" title="1.1 Pinia基本使用"></a>1.1 Pinia基本使用</h3><ul>
<li>初始化一个Vue3 + TS + Vite项目</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init vite@latest my-vite-app --template vue-ts</span><br></pre></td></tr></table></figure>

<ul>
<li>运行项目</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 安装依赖</span><br><span class="line">npm i</span><br><span class="line"></span><br><span class="line">// 运行项目</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<ul>
<li>安装Pinia</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i pinia</span><br></pre></td></tr></table></figure>

<p>安装完成后我们需要将pinia挂载到Vue应用中，也就是我们需要创建一个根存储传递给应用程序，简单来说就是创建一个存储数据的数据桶，放到应用程序中去。</p>
<p>修改main.ts，引入pinia提供的<code>createPinia</code>方法，创建根存储</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// mian.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>()</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(pinia)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h3 id="1-2-创建store"><a href="#1-2-创建store" class="headerlink" title="1.2 创建store"></a>1.2 创建store</h3><p>store简单来说就是数据仓库的意思，我们数据都放在store里面。当然你也可以把它理解为一个公共组件，只不过该公共组件只存放数据，这些数据我们其它所有的组件都能够访问且可以修改。</p>
<p>我们需要使用pinia提供的<code>defineStore()</code>方法来创建一个store，该store用来存放我们需要全局使用的数据。</p>
<p>首先在项目src目录下新建store文件夹，用来存放我们创建的各种store，然后在该目录下新建user.ts文件，主要用来存放与user相关的store。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个参数是应用程序中 store 的唯一 id</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useUsersStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;users&#x27;</span>, &#123;</span><br><span class="line">    <span class="comment">// 其它配置项</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>创建store很简单，调用pinia中的defineStore函数即可，该函数接收两个参数：</p>
<ul>
<li>name：一个字符串，必传项，该store的唯一id。</li>
<li>options：一个对象，store的配置项，比如配置store内的数据，修改数据的方法等等。<br>我们可以定义任意数量的store，因为我们其实一个store就是一个函数，这也是pinia的好处之一，让我们的代码扁平化了，这和Vue3的实现思想是一样的。</li>
</ul>
<h3 id="1-3-使用store"><a href="#1-3-使用store" class="headerlink" title="1.3 使用store"></a>1.3 使用store</h3><p>前面我们创建了一个store，说白了就是创建了一个方法，那么我们的目的肯定是使用它，假如我们要在App.vue里面使用它，该如何使用呢？</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// /src/App.vue</span></span><br><span class="line">&lt;script setup lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; useUsersStore &#125; <span class="keyword">from</span> <span class="string">&#x27;../src/store/index&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">useUsersStore</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(store);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>使用store很简单，直接引入我们声明的useUsersStore 方法即可，我们可以先看一下执行该方法输出的是什么：</p>
<p><img src="http://img.duya233.top/duya-imageimage-20230630083853016.png" alt="image-20230630083853016"></p>
<h3 id="1-4-添加store"><a href="#1-4-添加store" class="headerlink" title="1.4 添加store"></a>1.4 添加store</h3><p>我们都知道store是用来存放公共数据的，那么数据具体存在在哪里呢？前面我们利用defineStore函数创建了一个store，该函数第二个参数是一个options配置项，我们需要存放的数据就放在options对象中的state属性内。</p>
<p>我们往store添加一些基本数据</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// /src/store/index.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个参数是应用程序中 store 的唯一 id</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useUsersStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;users&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">state</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">msg</span>: <span class="string">&#x27;Hello world&#x27;</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">            <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;法外狂徒&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>上段代码中我们给配置项添加了state属性，该属性就是用来存储数据的，我们往state中添加了4条数据。需要注意的是，state接收的是一个箭头函数返回的值，它不能直接接收一个对象。</p>
<h3 id="1-5-操作store"><a href="#1-5-操作store" class="headerlink" title="1.5 操作store"></a>1.5 操作store</h3><p>我们往store存储数据的目的就是为了操作它，那么我们接下来就尝试操作state中的数据。</p>
<h4 id="1-5-1-读取store"><a href="#1-5-1-读取store" class="headerlink" title="1.5.1 读取store"></a>1.5.1 读取store</h4><p>在App.vue中导入store</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// /src/App.vue</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123; useUsersStore &#125; from &#x27;../src/store/index&#x27;</span><br><span class="line"></span><br><span class="line">const store = useUsersStore()</span><br><span class="line"></span><br><span class="line">const msg = ref&lt;string&gt;(store.msg)</span><br><span class="line">const name = ref&lt;string&gt;(store.name)</span><br><span class="line">const age = ref&lt;number&gt;(store.age)</span><br><span class="line">const title = ref&lt;string&gt;(store.title)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &#123;&#123; msg &#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  姓名：&#123;&#123; name &#125;&#125;</span><br><span class="line">  年龄：&#123;&#123; age &#125;&#125;</span><br><span class="line">  称号：&#123;&#123; title &#125;&#125;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>效果：</p>
<img src="http://img.duya233.top/duya-imageimage-20230630085130164.png" alt="image-20230630085130164" style="zoom:50%;" />

<h4 id="1-5-2-解构store"><a href="#1-5-2-解构store" class="headerlink" title="1.5.2 解构store"></a>1.5.2 解构store</h4><p>当store中的多个参数需要被使用到的时候，为了更简洁的使用这些变量，我们通常采用结构的方式一次性获取所有的变量名。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useUsersStore &#125; <span class="keyword">from</span> <span class="string">&#x27;../src/store/index&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">useUsersStore</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; msg, name, age, title &#125; = store</span><br></pre></td></tr></table></figure>

<p>上段代码实现的效果与一个一个获取的效果一样，不过代码简洁了很多。但是<strong>ES传统方式解构取到的值，不具有响应性</strong></p>
<p>==Pinia方法解构：<code>storeToRefs</code>==</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script setup lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="comment">// Pinia中使用storeToRefs方法去解构</span></span><br><span class="line"><span class="keyword">import</span> &#123; storeToRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useUsersStore &#125; <span class="keyword">from</span> <span class="string">&#x27;../src/store/index&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">useUsersStore</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; msg, name, age, title &#125; = <span class="title function_">storeToRefs</span>(store)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="1-5-3-多组件使用store"><a href="#1-5-3-多组件使用store" class="headerlink" title="1.5.3 多组件使用store"></a>1.5.3 多组件使用store</h4><p>我们使用store的最重要的目的就是为了组件之间共享数据，那么接下来我们新建一个children.vue组件，在该组件内部也使用state数据。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// /src/children.vue</span></span><br><span class="line">&lt;script setup lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; storeToRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useUsersStore &#125; <span class="keyword">from</span> <span class="string">&#x27;../src/store/index&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">useUsersStore</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; msg, name, age, title &#125; = <span class="title function_">storeToRefs</span>(store)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这里是children组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;&#123; msg &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  姓名：&#123;&#123; name &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  年龄：&#123;&#123; age &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  称号：&#123;&#123; title &#125;&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>在页面中展示的效果与父组件一致</li>
</ul>
<h4 id="1-5-4-修改store数据"><a href="#1-5-4-修改store数据" class="headerlink" title="1.5.4 修改store数据"></a>1.5.4 修改store数据</h4><p>如果我们想要修改store中的数据，可以直接重新赋值即可，我们在App.vue里面添加一个按钮，点击按钮修改store中的某一个数据。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// /src/App.vue</span></span><br><span class="line">&lt;script setup lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; storeToRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useUsersStore &#125; <span class="keyword">from</span> <span class="string">&#x27;../src/store/index&#x27;</span></span><br><span class="line"><span class="keyword">import</span> children <span class="keyword">from</span> <span class="string">&#x27;./children.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">useUsersStore</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; msg, name, age, title &#125; = <span class="title function_">storeToRefs</span>(store)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onchange</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  store.<span class="property">name</span> = <span class="string">&quot;李四&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这里是father组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;&#123; msg &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  姓名：&#123;&#123; name &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  年龄：&#123;&#123; age &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  称号：&#123;&#123; title &#125;&#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;onchange&quot;</span>&gt;</span>点我重生一次<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;fnchange&quot;</span>&gt;</span>点我重生再一次<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">children</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>在子组件也可以添加这样一个按钮，点击就会改变页面的数据。</li>
</ul>
<h4 id="1-5-5-批量修改store数据"><a href="#1-5-5-批量修改store数据" class="headerlink" title="1.5.5 批量修改store数据"></a>1.5.5 批量修改store数据</h4><p>通过基础数据修改方式去修改多条数据也是可行的，但是在 <code>pinia</code> 官网中，已经明确表示<code>$patch</code> 的方式是经过优化的，会加快修改速度，对性能有很大好处，所以在进行多条数据修改的时候，更推荐使用 <code>$patch</code></p>
<p><code>$patch</code> 方法可以接受两个类型的参数，函数 和 对象</p>
<ul>
<li><strong>$patch + 对象</strong></li>
<li><strong>$patch + 函数：</strong> 通过函数方式去使用的时候，函数接受一个 state 的参数，state 就是 store 仓库中的 state</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script setup lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; storeToRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useUsersStore &#125; <span class="keyword">from</span> <span class="string">&#x27;../src/store/index&#x27;</span></span><br><span class="line"><span class="keyword">import</span> children <span class="keyword">from</span> <span class="string">&#x27;./children.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">useUsersStore</span>()</span><br><span class="line"><span class="comment">// 对象式</span></span><br><span class="line"><span class="keyword">const</span> &#123; msg, name, age, title &#125; = <span class="title function_">storeToRefs</span>(store)</span><br><span class="line"><span class="comment">// 使用store.$patch方法</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onchange</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  store.$patch(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;王五&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;钻石王老五&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 函数式</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fnchange</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  store.$patch(<span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">    state.<span class="property">age</span> = <span class="number">10</span></span><br><span class="line">    state.<span class="property">name</span> = <span class="string">&#x27;张三&#x27;</span> ? <span class="string">&#x27;王五&#x27;</span> : <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这里是father组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;&#123; msg &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  姓名：&#123;&#123; name &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  年龄：&#123;&#123; age &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  称号：&#123;&#123; title &#125;&#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;onchange&quot;</span>&gt;</span>点我重生有一次<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">children</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>提供action修改：</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// /src/App.vue</span></span><br><span class="line">&lt;script setup lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; storeToRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useUsersStore &#125; <span class="keyword">from</span> <span class="string">&#x27;../src/store/index&#x27;</span></span><br><span class="line"><span class="keyword">import</span> children <span class="keyword">from</span> <span class="string">&#x27;./children.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">useUsersStore</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; msg, name, age, title &#125; = <span class="title function_">storeToRefs</span>(store)</span><br><span class="line"><span class="comment">// 对象式</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onchange</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  store.$patch(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;王五&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;钻石王老五&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 函数式</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fnchange</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  store.$patch(<span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">    state.<span class="property">age</span> = <span class="number">10</span></span><br><span class="line">    state.<span class="property">name</span> = <span class="string">&#x27;张三&#x27;</span> ? <span class="string">&#x27;王五&#x27;</span> : <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// action 修改多个</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">acchange</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  store.<span class="title function_">changeState</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这里是father组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;&#123; msg &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  姓名：&#123;&#123; name &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  年龄：&#123;&#123; age &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  称号：&#123;&#123; title &#125;&#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;onchange&quot;</span>&gt;</span>点我重生一次<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;fnchange&quot;</span>&gt;</span>点我重生再一次<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;acchange&quot;</span>&gt;</span>点我重生再再一次<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">children</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>/src/store/index.ts</code></li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个参数是应用程序中 store 的唯一 id</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useUsersStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;users&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">state</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">msg</span>: <span class="string">&#x27;Hello world&#x27;</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">            <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;法外狂徒&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line">        <span class="title function_">changeState</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;王二狗&#x27;</span>,</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">35</span>,</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">title</span> = <span class="string">&#x27;隔壁偷狗的&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<ul>
<li><p><strong>直接替换整个state：</strong></p>
<ul>
<li>pinia提供了方法让我们直接替换整个state对象，使用store的$state方法。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">store.<span class="property">$state</span> = &#123; <span class="attr">age</span>: <span class="number">45</span>, <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span> &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="1-5-6-重置state"><a href="#1-5-6-重置state" class="headerlink" title="1.5.6 重置state"></a>1.5.6 重置state</h4><p>有时候我们修改了state数据，想要将它还原，这个时候该怎么做呢？就比如用户填写了一部分表单，突然想重置为最初始的状态。</p>
<p>此时，我们直接调用store的$reset()方法即可，继续使用我们的例子，添加一个重置按钮。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&lt;button @click=&quot;reset&quot;&gt;重置store&lt;/button&gt;</span><br><span class="line">// 重置store</span><br><span class="line">const reset = () =&gt; &#123;</span><br><span class="line">  store.$reset();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>当我们点击重置按钮时，store中的数据会变为初始状态，页面也会更新。</p>
<h3 id="1-6-getters属性"><a href="#1-6-getters属性" class="headerlink" title="1.6 getters属性"></a>1.6 getters属性</h3><p>getters是defineStore参数配置项里面的另一个属性，前面我们讲了state属性。getter属性值是一个对象，该对象里面是各种各样的方法。大家可以把getter想象成Vue中的计算属性，它的作用就是返回一个新的结果，既然它和Vue中的计算属性类似，那么它肯定也是会被缓存的，就和computed一样。</p>
<p>当然我们这里的getter就是处理state数据。</p>
<h4 id="1-6-1-添加getter"><a href="#1-6-1-添加getter" class="headerlink" title="1.6.1 添加getter"></a>1.6.1 添加getter</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个参数是应用程序中 store 的唯一 id</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useUsersStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;users&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">state</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">msg</span>: <span class="string">&#x27;Hello world&#x27;</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">            <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;法外狂徒&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>: &#123;</span><br><span class="line">        <span class="attr">getAddAge</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> state.<span class="property">age</span> + <span class="number">10</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line">        <span class="title function_">changeState</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;王二狗&#x27;</span>,</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">35</span>,</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">title</span> = <span class="string">&#x27;隔壁偷狗的&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>上段代码中我们在配置项参数中添加了getter属性，该属性对象中定义了一个<code>changeState</code>方法，该方法会默认接收一个state参数，也就是state对象，然后该方法返回的是一个新的数据。</p>
<h4 id="1-6-2-使用getter"><a href="#1-6-2-使用getter" class="headerlink" title="1.6.2 使用getter"></a>1.6.2 使用getter</h4><p>在App.vue中</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script setup lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; storeToRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useUsersStore &#125; <span class="keyword">from</span> <span class="string">&#x27;../src/store/index&#x27;</span></span><br><span class="line"><span class="keyword">import</span> children <span class="keyword">from</span> <span class="string">&#x27;./children.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">useUsersStore</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; msg, name, age, title &#125; = <span class="title function_">storeToRefs</span>(store)</span><br><span class="line"><span class="comment">// 对象式</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onchange</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  store.$patch(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;王五&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;钻石王老五&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 函数式</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fnchange</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  store.$patch(<span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">    state.<span class="property">age</span> = <span class="number">10</span></span><br><span class="line">    state.<span class="property">name</span> = <span class="string">&#x27;张三&#x27;</span> ? <span class="string">&#x27;王五&#x27;</span> : <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// action 修改多个</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">acchange</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  store.<span class="title function_">changeState</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getter使用</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">gtchange</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这里是father组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;&#123; msg &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  姓名：&#123;&#123; name &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  年龄：&#123;&#123; age &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  称号：&#123;&#123; title &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  新年龄：&#123;&#123; store.getAddAge &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;onchange&quot;</span>&gt;</span>点我重生一次<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;fnchange&quot;</span>&gt;</span>点我重生再一次<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;acchange&quot;</span>&gt;</span>点我重生再再一次<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">children</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>上段代码中我们直接在标签上使用了store.gettAddAge方法，这样可以保证响应式，其实我们state中的name等属性也可以以此种方式直接在标签上使用，也可以保持响应式。</p>
<p>当我们点击批量修改数据按钮时，页面上的新年龄字段也会跟着变化。</p>
<h4 id="1-6-3-getter中调用其它getter"><a href="#1-6-3-getter中调用其它getter" class="headerlink" title="1.6.3 getter中调用其它getter"></a>1.6.3 getter中调用其它getter</h4><p>前面我们的getAddAge方法只是简单的使用了state方法，但是有时候我们需要在这一个getter方法中调用其它getter方法，这个时候如何调用呢？</p>
<p>其实很简单，我们可以直接在getter方法中调用this，this指向的便是store实例，所以理所当然的能够调用到其它getter。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// /src/store/index.ts</span></span><br><span class="line"></span><br><span class="line"><span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="attr">getAddAge</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> state.<span class="property">age</span> + <span class="number">100</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">	<span class="title function_">getNameAndAge</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span> + <span class="variable language_">this</span>.<span class="property">getAddAge</span>; <span class="comment">// 调用其它getter</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>上段代码中我们又定义了一个名为getNameAndAge的getter函数，在函数内部直接使用了this来获取state数据以及调用其它getter函数。</p>
<p>细心的小伙伴可能会发现我们这里没有使用箭头函数的形式，这是因为我们在函数内部使用了this，箭头函数的this指向问题相信大家都知道吧！所以这里我们没有采用箭头函数的形式。</p>
<p>那么在组件中调用的形式没什么变化，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;调用其它getter：&#123;&#123; store.<span class="property">getNameAndAge</span> &#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<h4 id="1-6-4-getter传参"><a href="#1-6-4-getter传参" class="headerlink" title="1.6.4 getter传参"></a>1.6.4 getter传参</h4><p>既然getter函数做了一些计算或者处理，那么我们很可能会需要传递参数给getter函数，但是我们前面说getter函数就相当于store的计算属性，和vue的计算属性差不多，那么我们都知道Vue中计算属性是不能直接传递参数的，所以我们这里的getter函数如果要接受参数的话，也是需要做处理的。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// /src/store/index.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个参数是应用程序中 store 的唯一 id</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useUsersStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;users&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">state</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">msg</span>: <span class="string">&#x27;Hello world&#x27;</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">            <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;法外狂徒&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>: &#123;</span><br><span class="line">        <span class="attr">getAddAge</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="function">(<span class="params">num: <span class="built_in">number</span></span>) =&gt;</span> state.<span class="property">age</span> + num;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">getNameAndAge</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span> + <span class="variable language_">this</span>.<span class="property">getAddAge</span>; <span class="comment">// 调用其它getter</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line">        <span class="title function_">changeState</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;王二狗&#x27;</span>,</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">35</span>,</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">title</span> = <span class="string">&#x27;隔壁偷狗的&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>上段代码中我们getter函数getAddAge接收了一个参数num，这种写法其实有点闭包的概念在里面了，相当于我们整体返回了一个新的函数，并且将state传入了新的函数。</p>
<p>接下来我们在组件中使用，方式很简单，代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// /src/App.vue</span><br><span class="line"></span><br><span class="line"> &lt;p&gt;新年龄：&#123;&#123; store.getAddAge(1100) &#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<h3 id="1-7-actions属性"><a href="#1-7-actions属性" class="headerlink" title="1.7 actions属性"></a>1.7 actions属性</h3><p>前面我们提到的state和getters属性都主要是数据层面的，并没有具体的业务逻辑代码，它们两个就和我们组件代码中的data数据和computed计算属性一样。</p>
<p>那么，如果我们有业务代码的话，最好就是卸载actions属性里面，该属性就和我们组件代码中的methods相似，用来放置一些处理业务逻辑的方法。</p>
<p>actions属性值同样是一个对象，该对象里面也是存储的各种各样的方法，包括同步方法和异步方法。</p>
<h4 id="1-7-1-添加actions"><a href="#1-7-1-添加actions" class="headerlink" title="1.7.1 添加actions"></a>1.7.1 添加actions</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个参数是应用程序中 store 的唯一 id</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useUsersStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;users&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">state</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">msg</span>: <span class="string">&#x27;Hello world&#x27;</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">            <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;法外狂徒&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>: &#123;</span><br><span class="line">        <span class="attr">getAddAge</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="function">(<span class="params">num: <span class="built_in">number</span></span>) =&gt;</span> state.<span class="property">age</span> + num;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">getNameAndAge</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span> + <span class="variable language_">this</span>.<span class="property">getAddAge</span>; <span class="comment">// 调用其它getter</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line">        <span class="title function_">changeState</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;王二狗&#x27;</span>,</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">35</span>,</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">title</span> = <span class="string">&#x27;隔壁偷狗的&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>上段代码中我们定义了一个非常简单的actions方法，在实际场景中，该方法可以是任何逻辑，比如发送请求、存储token等等。大家把actions方法当作一个普通的方法即可，特殊之处在于该方法内部的this指向的是当前store。</p>
<h4 id="1-7-2-使用actions"><a href="#1-7-2-使用actions" class="headerlink" title="1.7.2  使用actions"></a>1.7.2  使用actions</h4><p>使用actions中的方法也非常简单，比如我们在App.vue中想要调用该方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">acchange</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  store.<span class="title function_">changeState</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-8-store之间的相互调用"><a href="#1-8-store之间的相互调用" class="headerlink" title="1.8 store之间的相互调用"></a>1.8 store之间的相互调用</h3><p>在 Pinia 中，可以在一个 <code>store</code> 中 <code>import</code> 另外一个 <code>store</code> ，然后通过调用引入 store 方法的形式，获取引入 <code>store</code> 的状态</p>
<h4 id="1-8-1-新建store"><a href="#1-8-1-新建store" class="headerlink" title="1.8.1 新建store"></a>1.8.1 新建store</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// /src/store/allan.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> allanStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;allan&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">state</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">moveList</span>: [<span class="string">&#x27;你的名字&#x27;</span>, <span class="string">&#x27;天气之子&#x27;</span>, <span class="string">&#x27;铃芽之旅&#x27;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="1-8-2-原store引入新建store"><a href="#1-8-2-原store引入新建store" class="headerlink" title="1.8.2 原store引入新建store"></a>1.8.2 原store引入新建store</h4><ul>
<li>在<code>getters</code>里面定义一个方法，获取moveList</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; allanStore &#125; <span class="keyword">from</span> <span class="string">&#x27;./allan&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个参数是应用程序中 store 的唯一 id</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useUsersStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;users&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">state</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">msg</span>: <span class="string">&#x27;Hello world&#x27;</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">            <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;法外狂徒&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>: &#123;</span><br><span class="line">        <span class="attr">getAddAge</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="function">(<span class="params">num: <span class="built_in">number</span></span>) =&gt;</span> state.<span class="property">age</span> + num;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">getNameAndAge</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span> + <span class="variable language_">this</span>.<span class="property">getAddAge</span>; <span class="comment">// 调用其它getter</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 另一个Store引用，获取allanStore里面的moveList</span></span><br><span class="line">        <span class="title function_">getAllanStore</span>(): <span class="built_in">string</span>[] &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">allanStore</span>().<span class="property">moveList</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line">        <span class="title function_">changeState</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;王二狗&#x27;</span>,</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">35</span>,</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">title</span> = <span class="string">&#x27;隔壁偷狗的&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>在组件中使用</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// /src/App.vue</span></span><br><span class="line"></span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in store.getAllanStore&quot;</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  &lt;/ul&gt;</span><br></pre></td></tr></table></figure>


<h3 id="1-9-使用到的全部代码"><a href="#1-9-使用到的全部代码" class="headerlink" title="1.9 使用到的全部代码"></a>1.9 使用到的全部代码</h3><ul>
<li><code>/scr/store/index.ts</code></li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; allanStore &#125; <span class="keyword">from</span> <span class="string">&#x27;./allan&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个参数是应用程序中 store 的唯一 id</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useUsersStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;users&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">state</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">msg</span>: <span class="string">&#x27;Hello world&#x27;</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">            <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;法外狂徒&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>: &#123;</span><br><span class="line">        <span class="attr">getAddAge</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="function">(<span class="params">num: <span class="built_in">number</span></span>) =&gt;</span> state.<span class="property">age</span> + num;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">getNameAndAge</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span> + <span class="variable language_">this</span>.<span class="property">getAddAge</span>; <span class="comment">// 调用其它getter</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 另一个Store引用，获取allanStore里面的moveList</span></span><br><span class="line">        <span class="title function_">getAllanStore</span>(): <span class="built_in">string</span>[] &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">allanStore</span>().<span class="property">moveList</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line">        <span class="title function_">changeState</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;王二狗&#x27;</span>,</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">35</span>,</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">title</span> = <span class="string">&#x27;隔壁偷狗的&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>scr/store/allan.ts</code></li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> allanStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;allan&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">state</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">moveList</span>: [<span class="string">&#x27;你的名字&#x27;</span>, <span class="string">&#x27;天气之子&#x27;</span>, <span class="string">&#x27;铃芽之旅&#x27;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>/scr/App.vue</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; storeToRefs &#125; from &#x27;pinia&#x27;;</span><br><span class="line">import &#123; useUsersStore &#125; from &#x27;../src/store/index&#x27;</span><br><span class="line">import children from &#x27;./children.vue&#x27;</span><br><span class="line"></span><br><span class="line">const store = useUsersStore()</span><br><span class="line"></span><br><span class="line">const &#123; msg, name, age, title &#125; = storeToRefs(store)</span><br><span class="line">// 对象式</span><br><span class="line">const onchange = () =&gt; &#123;</span><br><span class="line">  store.$patch(&#123;</span><br><span class="line">    name: &#x27;王五&#x27;,</span><br><span class="line">    age: 18,</span><br><span class="line">    title: &#x27;钻石王老五&#x27;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">// 函数式</span><br><span class="line">const fnchange = () =&gt; &#123;</span><br><span class="line">  store.$patch((state) =&gt; &#123;</span><br><span class="line">    state.age = 10</span><br><span class="line">    state.name = &#x27;张三&#x27; ? &#x27;王五&#x27; : &#x27;张三&#x27;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// action 修改多个</span><br><span class="line">const acchange = () =&gt; &#123;</span><br><span class="line">  store.changeState()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;这里是father组件&lt;/h1&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &#123;&#123; msg &#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  姓名：&#123;&#123; name &#125;&#125;</span><br><span class="line">  年龄：&#123;&#123; age &#125;&#125;</span><br><span class="line">  称号：&#123;&#123; title &#125;&#125;</span><br><span class="line">  &lt;p&gt;新年龄：&#123;&#123; store.getAddAge(1100) &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;item in store.getAllanStore&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;onchange&quot;&gt;点我重生一次&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;fnchange&quot;&gt;点我重生再一次&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;acchange&quot;&gt;点我重生再再一次&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;children /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>/scr/children.vue</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; storeToRefs &#125; from &#x27;pinia&#x27;;</span><br><span class="line">import &#123; useUsersStore &#125; from &#x27;../src/store/index&#x27;</span><br><span class="line"></span><br><span class="line">const store = useUsersStore()</span><br><span class="line"></span><br><span class="line">const &#123; msg, name, age, title &#125; = storeToRefs(store)</span><br><span class="line"></span><br><span class="line">const onchange = () =&gt; &#123;</span><br><span class="line">    store.name = &quot;王二麻子&quot;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h1&gt;这里是children组件&lt;/h1&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &#123;&#123; msg &#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    姓名：&#123;&#123; name &#125;&#125;</span><br><span class="line">    年龄：&#123;&#123; age &#125;&#125;</span><br><span class="line">    称号：&#123;&#123; title &#125;&#125;</span><br><span class="line"></span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;button @click=&quot;onchange&quot;&gt;点击改子名&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<h3 id="1-10-Pinia总结"><a href="#1-10-Pinia总结" class="headerlink" title="1.10 Pinia总结"></a>1.10 Pinia总结</h3><p>pinia的知识点很少，如果你有Vuex基础，那么学起来更是易如反掌。其实我们更应该关注的是它的函数思想，大家有没有发现我们在Vue3中的所有东西似乎都可以用一个函数来表示，pinia也是延续了这种思想。</p>
<p>所以，大家理解这种组合式编程的思想更重要，pinia无非就是以下3个大点：</p>
<ul>
<li>state</li>
<li>getters</li>
<li>actions<br>当然，本篇文章只是讲解了基础使用部分，但是在实际工作中也能满足大部分需求了，如果还有兴趣学习pinia的其它特点，比如插件、订阅等等，可以移步官网：<a href="https://link.zhihu.com/?target=https://pinia.web3doc.top/">pinia官网</a>。</li>
</ul>
<span id="more"></span>

]]></content>
      <tags>
        <tag>Vue</tag>
        <tag>Pinia</tag>
      </tags>
  </entry>
  <entry>
    <title>七牛云+PicGo-Core实现Typora图片上传自由</title>
    <url>/2023/57140/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h1 id="七牛云对象存储-PicGo-Core"><a href="#七牛云对象存储-PicGo-Core" class="headerlink" title="七牛云对象存储+PicGo-Core"></a>七牛云对象存储+PicGo-Core</h1><hr>
<p>一、概述</p>
<p>最近在做一个个人博客项目，发现博客中会插入很多图片，怎么存储成了问题，经过一番查询发现大家都是用的图床工具，之前了解过七牛云，注册认证后有10G永久免费空间，每月10G国内和10G国外流量，速度相当快，七牛云是国内专业CDN服务商，插件支持比较多，有免费ssl证书，但https流量收费，所以便想用七牛云进行图片的存储，打算以后的文章图片都使用七牛云来进行存储，不过要注意的一点是，七牛云30天后会回收测试域名，因此你必须要绑定自己的已备案的域名。我将采用Typora作为Markdown编辑器，PicGo为上传图片工具，使用七牛云做存储，Typora和PicGo需要自己下载。</p>
<p>二、配置七牛云图床</p>
<p><a href="https://www.qiniu.com/">七牛云官网</a></p>
<p>首先，需要在七牛云官网注册账号并进行实名认证，注册—–&gt;实名认证，基本上就是这个步骤，在这就不做细致介绍咯，相信难不到聪明的你。提醒一下，最好使用谷歌浏览器访问进行实名认证，我开始用的是火狐浏览器，在通过微信扫码实名认证时，怎么都刷新出二维码，换成谷歌，秒解决。</p>
<p>2、配置存储空间</p>
<p>2.1、新建空间</p>
<p>依次点击【管理控制台】—–【对象存储Kodo】进入对象存储页面</p>
<p><img src="http://img.duya233.top/duya-image06d55bb467595cdccfa3b67eb5c0a6c1.png" alt="image-20210808155345317"></p>
<p>点击【空间管理】，可以看到如下，这里我已经建好了一个空间</p>
<p><img src="http://img.duya233.top/duya-image83d9a8e385661c1fe1d142bbba360826.png" alt="image-20210808155528938"></p>
<p>大家可以根据自己的需求来新建自己的存储空间，点击【新建空间】，对空间进行配置，这里要注意，以下几点：</p>
<ul>
<li>存储空间名称不能重复，我这里也新建一个名称为：onestar-blog-img</li>
<li>存储区域选择一个离你近点的，我选的是华东，每个地点有个编号的，后面要用来配置PicGo，这里先说一下区域对应编号<ul>
<li>华东：z0；华北：z1；华南：z2：北美：na0：东南亚：as0</li>
</ul>
</li>
<li>访问控制选择公开，因为要作为外链进行访问</li>
</ul>
<p><img src="http://img.duya233.top/duya-imagec9c853d1e59d08a1e4fc5d36343d0e2e.png" alt="image-20210808160247680"></p>
<p>配置好后点击确定，可以看到如下提示信息，系统会给我们分配一个测试域名，不过这个域名只有30天有效期，我们可以先用这个域名进行测试，后面来绑定自己的域名，所以这里点击【好的，我知道了】</p>
<p><img src="http://img.duya233.top/duya-image2c8ba51166294faacf469cc1a3eec219.png" alt="img"></p>
<p>可以看到空间管理里面多了一个空间，也就是咱们刚配置的空间，新建空间完成</p>
<p><img src="http://img.duya233.top/duya-imageae3e7224af9a1d4592256b8d404ccbe2.png" alt="image-20210808160845382"></p>
<p>2.2、获取空间信息</p>
<p>新建空间后，这里有一些数据信息需要获取一下，为配置PicGo做准备，有如下数据：</p>
<ul>
<li>AccessKey：点击右上角的头像【个人中心】—-【密钥管理】</li>
<li>SecretKey：和获取AccessKey的方法一样</li>
<li>空间名称：创建空间时取的名称，我这里是：onestar-blog-img</li>
<li>访问网址：点开onestar-blog-img空间，也就是【空间概览】，咱们先用七牛云提供的CDN测试域名</li>
<li>存贮区域：我这里是华东，也就是z0</li>
</ul>
<p>密钥:</p>
<p><img src="http://img.duya233.top/duya-imageae1969d4fc1a0255fae6cc21c60954f3.png" alt="image-20210808165216703"></p>
<p><img src="http://img.duya233.top/duya-image55e432199040a972400f48266ef1547a.png" alt="image-20210808165250648"></p>
<p>访问网址：</p>
<p><img src="http://img.duya233.top/duya-imagea5caafe8d1bb795d090c0f89439c9d93.png" alt="image-20210808165432847"></p>
<p>三、七牛云配置自己的域名</p>
<p>首先， 你得有一个已经备好案的域名，并且绑定了你的服务器，然后再配置一个二级域名用来访问图片用，我的域名是：gitee.pub，配置的二级域名为：images.gitee.pub</p>
<p>1.1、配置二级域名</p>
<p>在绑定自己域名的时候，需要配置加速域名指向 CNAME，这里我们可以配置一个二级域名。</p>
<p>我的域名是：gitee.pub，这里我配置的二级域名为：images.gitee.pub，配置方式如下：</p>
<ol>
<li><p>在七牛云官网点击需要配置域名空间的【自定义域名】<img src="http://img.duya233.top/duya-imagee81762f1e0476491eeeddaf174bf32bd.png" alt="image-20210808162928312"></p>
</li>
<li><p>创建一个二级域名，我命名为：images.gitee.pub，其他按照需求来，基本保持默认就可以，然后点击确创建，这样就创建配置好了二级域名。<img src="http://img.duya233.top/duya-imagee303a430459a5f302e1a257bb98a1999.png" alt="image-20210808163134227"></p>
</li>
</ol>
<p>1.2、获取CNAME</p>
<p>找到域名管理，找到刚创建的域名，鼠标悬停在CNAME选项上，可以看到CNAME值，点击复制，即可获取CNAME</p>
<p><img src="http://img.duya233.top/duya-imageb40e806ac7cd3b3ed073f7ed82cc2b97.png" alt="image-20210808163423000"></p>
<p>2、配置服务器解析域名</p>
<p>配置服务器解析域名需要在实例控制台进行操作，先登录服务器控制台，我用的是阿里云，这里就以阿里云为例，其他服务器厂商操作基本一致</p>
<p>2.1、添加解析记录</p>
<ol>
<li>登录实例控制台后，找到域名<img src="http://img.duya233.top/duya-imageca8abe5d9dccf59353dfa7b99420604f.png" alt="image-20210808163723233"></li>
<li>点击解析<img src="http://img.duya233.top/duya-image67ec5f40feb30990d3b62685f020ff5c.png" alt="image-20210808164021879"></li>
<li>点击添加记录<img src="http://img.duya233.top/duya-image3f4dd36e27c8597eb03d28ccc12f2421.png" alt="image-20210808164133222"></li>
<li>记录如下，点击保存</li>
</ol>
<p>这里只要添加主机记录、记录值即可，其他保持默认就好</p>
<ul>
<li>主机记录：和之前在七牛云添加的二级域名保持一致，所以这里填：images</li>
<li>记录类型：选择CNAME</li>
<li>记录值：填写之前在七牛云复制的CNAME值</li>
</ul>
<p><img src="http://img.duya233.top/duya-image4e0d13cd068ff71e0cf39ff2879dc18d.png" alt="image-20210808164338958"></p>
<ol start="5">
<li>检测</li>
</ol>
<p>就这样，服务器解析域名完成，接下来就是等待审核通过，通过后可以在cmd命令窗口进行检测，【win+r】快捷键输入cmd，打开命令窗口，使用以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nslookup + 七牛云配置的二级域名：nslookup images.gitee.pub</span><br><span class="line"></span><br><span class="line">可以看到解析的CNAME值</span><br></pre></td></tr></table></figure>

<p><img src="http://img.duya233.top/duya-imagecc0e37f88243eb4f6f6650d41521641b.png" alt="image-20210808164710694"></p>
<p>四、配置PicGo-Core</p>
<p><a href="https://github.com/PicGo/PicGo-Core">PicGo-Core官网</a></p>
<p>1、安装</p>
<ul>
<li>Npm全局安装PicGo-Cpre</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># 安装</span><br><span class="line"> npm install picgo -g # 或者 yarn <span class="variable language_">global</span> add picgo</span><br><span class="line"></span><br><span class="line"># 上传具体路径图片</span><br><span class="line">picgo upload /xxx/xxx.<span class="property">jpg</span></span><br><span class="line"></span><br><span class="line"># 上传剪贴板里的第一张图片（上传时会将格式转成png）</span><br><span class="line">picgo upload</span><br></pre></td></tr></table></figure>

<p>2、配置文件</p>
<p>默认配置文件</p>
<ul>
<li>picgo 的默认配置文件为<code>~/.picgo/config.json</code>。其中<code>~</code>为用户目录。不同系统的用户目录不太一样。</li>
<li>linux 和 macOS 均为<code>~/.picgo/config.json</code>。</li>
<li>linux 和 macOS 均为<code>~/.picgo/config.json</code>。</li>
</ul>
<h3 id="自动生成"><a href="#自动生成" class="headerlink" title="自动生成"></a>自动生成</h3><p>通常来说你只需要配置 <code>Uploader</code> 即可，所以你可以通过 <code>picgo set uploader</code> 来进入交互式命令行，配置成功后会自动生成配置文件，无需复制粘贴！其他更多的命令可以参考 <a href="https://picgo.github.io/PicGo-Core-Doc/zh/guide/commands.html">CLI 命令</a> 一章。</p>
<blockquote>
<p>注意：</p>
<ul>
<li>同时，填好图床配置之后，请务必通过 <code>picgo use uploader</code> 选择当前要使用的 <code>Uploader</code>。</li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ picgo <span class="built_in">set</span> uploader</span><br><span class="line">? Choose a(n) uploader (Use arrow keys)</span><br><span class="line">  smms</span><br><span class="line">❯ tcyun</span><br><span class="line">  github</span><br><span class="line">  qiniu</span><br><span class="line">  imgur</span><br><span class="line">  aliyun</span><br><span class="line">  upyun</span><br><span class="line">(Move up and down to reveal more choices)</span><br></pre></td></tr></table></figure>

<ul>
<li>uploader:<ul>
<li>smms -&gt; SM.MS</li>
<li>tcyun -&gt; 腾讯云COS</li>
<li>upyun -&gt; 又拍云</li>
<li>aliyun -&gt; 阿里云OSS</li>
<li>qiniu -&gt; 七牛云</li>
<li>imgur -&gt; Imgur</li>
<li>github -&gt; GitHub</li>
</ul>
</li>
</ul>
<h3 id="手动生成"><a href="#手动生成" class="headerlink" title="手动生成"></a>手动生成</h3><p>如果你要手动生成配置文件，需要自己创建对应的目录、JSON 文件以及至少有如下的配置项（因此还是推荐通过命令行自动生成配置文件）：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;picBed&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;uploader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;smms&quot;</span><span class="punctuation">,</span> <span class="comment">// 代表当前的默认上传图床为 SM.MS,</span></span><br><span class="line">    <span class="attr">&quot;smms&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span> <span class="comment">// 从 https://sm.ms/home/apitoken 获取的 token</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;picgoPlugins&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span> <span class="comment">// 为插件预留</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="picBed-qiniu"><a href="#picBed-qiniu" class="headerlink" title="picBed.qiniu"></a>picBed.qiniu</h3><p>七牛图床的相关配置。可以查看 PicGo 的 <a href="https://picgo.github.io/PicGo-Doc/zh/guide/config.html#%E4%B8%83%E7%89%9B%E5%9B%BE%E5%BA%8A">wiki (opens new window)</a>进行配置。</p>
<p>默认值如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;accessKey&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;secretKey&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;bucket&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span> <span class="comment">// 存储空间名</span></span><br><span class="line">  <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span> <span class="comment">// 自定义域名</span></span><br><span class="line">  <span class="attr">&quot;area&quot;</span><span class="punctuation">:</span> <span class="string">&quot;z0&quot;</span> | <span class="string">&quot;z1&quot;</span> | <span class="string">&quot;z2&quot;</span> | <span class="string">&quot;na0&quot;</span> | <span class="string">&quot;as0&quot;</span><span class="punctuation">,</span> <span class="comment">// 存储区域编号</span></span><br><span class="line">  <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span> <span class="comment">// 网址后缀，比如？imgslim</span></span><br><span class="line">  <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span> <span class="comment">// 自定义存储路径，比如 img/</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<span id="more"></span>

]]></content>
  </entry>
  <entry>
    <title>使用Nginx代替Openwrt中的uhttpd，并支持php</title>
    <url>/2023/20781/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h1 id="使用Nginx代替Openwrt中的uhttpd，并支持php"><a href="#使用Nginx代替Openwrt中的uhttpd，并支持php" class="headerlink" title="使用Nginx代替Openwrt中的uhttpd，并支持php"></a>使用Nginx代替Openwrt中的uhttpd，并支持php</h1><p>​            在之前介绍过Openwrt部署typecho博客：<a href="https://wangyougx.com:433/blog/index.php/archives/175/">Openert部署typecho博客</a>，用的是默认的uhttpd，挺方便小巧；但是也有不足，就是性能很差，兼容性也不好，于是就萌生了使用Nginx代替uhttpd的想法。<br>于是需求就很明确了：</p>
<ol>
<li>用Nginx实现Openwrt原本的uci界面</li>
<li>用Nginx实现Openwrt实现Typecho的php页面</li>
</ol>
<p>现在Nginx已经集成在opkg源了，可以直接安装，安装之前先将uhttpd停用一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/init.d/uhttpd stop &amp;&amp; /etc/init.d/uhttpd disable</span><br></pre></td></tr></table></figure>

<p>也将之前uhttpd使用的php8-fastcgi停用一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/init.d/php8-fastcgi stop &amp;&amp; /etc/init.d/php8-fastcgi disable</span><br><span class="line">#并将/etc/config/php8-fastcgi里面的option enabled 1改成option enabled 0</span><br></pre></td></tr></table></figure>

<p>停用完之后，安装Nginx涉及的包，如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uwsgi</span><br><span class="line">uwsgi-syslog-plugin</span><br><span class="line">uwsgi-cgi-plugin</span><br><span class="line">uwsgi-luci-support</span><br><span class="line">nginx-util</span><br><span class="line">nginx-ssl-util</span><br><span class="line">nginx-ssl</span><br><span class="line">nginx</span><br><span class="line">nginx-mod-luci</span><br><span class="line">libopenssl-conf</span><br><span class="line">openssl-util</span><br><span class="line">nginx-mod-luci-ssl</span><br><span class="line">luci-ssl-nginx</span><br><span class="line">php8-fastcgi</span><br><span class="line">php8-fpm</span><br></pre></td></tr></table></figure>

<p>由于Nginx默认是不支持uci的，所以需要用uwsgi作为转发<br>装好之后，直接就可以访问Openwrt的uci界面了，接着就是折腾php这一块<br>1.先修改/etc/php8-fpm.d/<a href="http://www.conf,将chdir/">www.conf，将chdir</a> = / 改成 chdir = /www （注意/www是Typecho目录，这个看实际情况）<br>2.建立/etc/nginx/fastcgi_params文件，并放入以下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fastcgi_param  QUERY_STRING       $query_string;</span><br><span class="line">fastcgi_param  REQUEST_METHOD     $request_method;</span><br><span class="line">fastcgi_param  CONTENT_TYPE       $content_type;</span><br><span class="line">fastcgi_param  CONTENT_LENGTH     $content_length;</span><br><span class="line"></span><br><span class="line">fastcgi_param  SCRIPT_NAME        $fastcgi_script_name;</span><br><span class="line">fastcgi_param  REQUEST_URI        $request_uri;</span><br><span class="line">fastcgi_param  DOCUMENT_URI       $document_uri;</span><br><span class="line">fastcgi_param  DOCUMENT_ROOT      $document_root;</span><br><span class="line">fastcgi_param  SERVER_PROTOCOL    $server_protocol;</span><br><span class="line">fastcgi_param  HTTPS              $https if_not_empty;</span><br><span class="line">fastcgi_param  REQUEST_SCHEME     $scheme;</span><br><span class="line">fastcgi_param  PATH_INFO          $fastcgi_path_info;</span><br><span class="line">fastcgi_param  PATH_TRANSLATED    $document_root$fastcgi_path_info;</span><br><span class="line">fastcgi_param  SCRIPT_FILENAME    $document_root$fastcgi_script_name;</span><br><span class="line"></span><br><span class="line">fastcgi_param  GATEWAY_INTERFACE  CGI/1.1;</span><br><span class="line">fastcgi_param  SERVER_SOFTWARE    nginx/$nginx_version;</span><br><span class="line"></span><br><span class="line">fastcgi_param  REMOTE_ADDR        $remote_addr;</span><br><span class="line">fastcgi_param  REMOTE_PORT        $remote_port;</span><br><span class="line">fastcgi_param  SERVER_ADDR        $server_addr;</span><br><span class="line">fastcgi_param  SERVER_PORT        $server_port;</span><br><span class="line">fastcgi_param  SERVER_NAME        $server_name;</span><br><span class="line"></span><br><span class="line"># PHP only, required if PHP was built with --enable-force-cgi-redirect</span><br><span class="line">fastcgi_param  REDIRECT_STATUS    200; </span><br></pre></td></tr></table></figure>

<p>3.新建/etc/nginx/conf.d/php.locations文件，并放入以下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location ~ [^/]\.php(/|$) &#123;</span><br><span class="line">    fastcgi_split_path_info ^(.+?\.php)(/.*)$;</span><br><span class="line">    if (!-f $document_root$fastcgi_script_name) &#123;</span><br><span class="line">        return 404;</span><br><span class="line">    &#125;</span><br><span class="line">    # Mitigate https://httpoxy.org/ vulnerabilities</span><br><span class="line">    fastcgi_param HTTP_PROXY &quot;&quot;;</span><br><span class="line">    #error_log /dev/null;</span><br><span class="line">    fastcgi_connect_timeout 300s;</span><br><span class="line">    fastcgi_read_timeout 300s;</span><br><span class="line">    fastcgi_send_timeout 300s;</span><br><span class="line">    fastcgi_buffer_size 32k;</span><br><span class="line">    fastcgi_buffers 4 32k;</span><br><span class="line">    fastcgi_busy_buffers_size 32k;</span><br><span class="line">    fastcgi_temp_file_write_size 32k;</span><br><span class="line">    client_body_timeout 10s;</span><br><span class="line">    send_timeout 60s; # default, increase if experiencing a lot of timeouts.</span><br><span class="line">    output_buffers 1 32k;</span><br><span class="line">    fastcgi_index index.php;</span><br><span class="line">    #fastcgi_pass 127.0.0.1:1026;</span><br><span class="line">    fastcgi_pass unix:/var/run/php8-fpm.sock;</span><br><span class="line">    # include the fastcgi_param setting</span><br><span class="line">    include fastcgi_params;</span><br><span class="line"></span><br><span class="line">    # SCRIPT_FILENAME parameter is used for PHP FPM determining</span><br><span class="line">    #  the script name. If it is not set in fastcgi_params file,</span><br><span class="line">    # i.e. /etc/nginx/fastcgi_params or in the parent contexts,</span><br><span class="line">    # please comment off following line:</span><br><span class="line">    fastcgi_param  SCRIPT_FILENAME   $document_root$fastcgi_script_name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location = /blog/  &#123;</span><br><span class="line">    fastcgi_split_path_info ^(.+?\.php)(/.*)$;</span><br><span class="line">    if (!-f $document_root$fastcgi_script_name) &#123;</span><br><span class="line">        return 404;</span><br><span class="line">    &#125;</span><br><span class="line">    # Mitigate https://httpoxy.org/ vulnerabilities</span><br><span class="line">    fastcgi_param HTTP_PROXY &quot;&quot;;</span><br><span class="line">    #error_log /dev/null;</span><br><span class="line">    fastcgi_connect_timeout 300s;</span><br><span class="line">    fastcgi_read_timeout 300s;</span><br><span class="line">    fastcgi_send_timeout 300s;</span><br><span class="line">    fastcgi_buffer_size 32k;</span><br><span class="line">    fastcgi_buffers 4 32k;</span><br><span class="line">    fastcgi_busy_buffers_size 32k;</span><br><span class="line">    fastcgi_temp_file_write_size 32k;</span><br><span class="line">    client_body_timeout 10s;</span><br><span class="line">    send_timeout 60s; # default, increase if experiencing a lot of timeouts.</span><br><span class="line">    output_buffers 1 32k;</span><br><span class="line">    fastcgi_index index.php;</span><br><span class="line">    index index.php;</span><br><span class="line">    #fastcgi_pass 127.0.0.1:1026;</span><br><span class="line">    fastcgi_pass unix:/var/run/php8-fpm.sock;</span><br><span class="line">    # include the fastcgi_param setting</span><br><span class="line">    include fastcgi_params;</span><br><span class="line"></span><br><span class="line">    # SCRIPT_FILENAME parameter is used for PHP FPM determining</span><br><span class="line">    #  the script name. If it is not set in fastcgi_params file,</span><br><span class="line">    # i.e. /etc/nginx/fastcgi_params or in the parent contexts,</span><br><span class="line">    # please comment off following line:</span><br><span class="line">    fastcgi_param  SCRIPT_FILENAME   $document_root$fastcgi_script_name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location = /blog/admin/  &#123;</span><br><span class="line">    fastcgi_split_path_info ^(.+?\.php)(/.*)$;</span><br><span class="line">    if (!-f $document_root$fastcgi_script_name) &#123;</span><br><span class="line">        return 404;</span><br><span class="line">    &#125;</span><br><span class="line">    # Mitigate https://httpoxy.org/ vulnerabilities</span><br><span class="line">    fastcgi_param HTTP_PROXY &quot;&quot;;</span><br><span class="line">    #error_log /dev/null;</span><br><span class="line">    fastcgi_connect_timeout 300s;</span><br><span class="line">    fastcgi_read_timeout 300s;</span><br><span class="line">    fastcgi_send_timeout 300s;</span><br><span class="line">    fastcgi_buffer_size 32k;</span><br><span class="line">    fastcgi_buffers 4 32k;</span><br><span class="line">    fastcgi_busy_buffers_size 32k;</span><br><span class="line">    fastcgi_temp_file_write_size 32k;</span><br><span class="line">    client_body_timeout 10s;</span><br><span class="line">    send_timeout 60s; # default, increase if experiencing a lot of timeouts.</span><br><span class="line">    output_buffers 1 32k;</span><br><span class="line">    fastcgi_index index.php;</span><br><span class="line">    index index.php;</span><br><span class="line">    #fastcgi_pass 127.0.0.1:1026;</span><br><span class="line">    fastcgi_pass unix:/var/run/php8-fpm.sock;</span><br><span class="line">    # include the fastcgi_param setting</span><br><span class="line">    include fastcgi_params;</span><br><span class="line"></span><br><span class="line">    # SCRIPT_FILENAME parameter is used for PHP FPM determining</span><br><span class="line">    #  the script name. If it is not set in fastcgi_params file,</span><br><span class="line">    # i.e. /etc/nginx/fastcgi_params or in the parent contexts,</span><br><span class="line">    # please comment off following line:</span><br><span class="line">    fastcgi_param  SCRIPT_FILENAME   $document_root$fastcgi_script_name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此处解释一下，location ~ [^/].php(/|$)项是为了手动输入/www下多层目录的php文件，location = /blog/项是为了输入域名/blog后默认打开/blog下的index.php,location = /blog/admin项也是雷同<br>3.修改/etc/config/nginx文件，下面是我的配置，仅供参考</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">config main global</span><br><span class="line">        option uci_enable &#x27;true&#x27;</span><br><span class="line"></span><br><span class="line">config server &#x27;_lan&#x27;</span><br><span class="line">        #list listen &#x27;433 ssl default_server&#x27;</span><br><span class="line">        #list listen &#x27;[::]:433 ssl default_server&#x27;</span><br><span class="line">        option server_name &#x27;_lan&#x27;</span><br><span class="line">        list include &#x27;restrict_locally&#x27;</span><br><span class="line">        list include &#x27;conf.d/*.locations&#x27;</span><br><span class="line">        option uci_manage_ssl &#x27;self-signed&#x27;</span><br><span class="line">        option ssl_certificate &#x27;/etc/nginx/conf.d/_lan.crt&#x27;</span><br><span class="line">        option ssl_certificate_key &#x27;/etc/nginx/conf.d/_lan.key&#x27;</span><br><span class="line">        option ssl_session_cache &#x27;shared:SSL:32k&#x27;</span><br><span class="line">        option ssl_session_timeout &#x27;64m&#x27;</span><br><span class="line">        option access_log &#x27;off; # logd openwrt&#x27;</span><br><span class="line"></span><br><span class="line">config server &#x27;_redirect2ssl&#x27;</span><br><span class="line">        list listen &#x27;80&#x27;</span><br><span class="line">        list listen &#x27;[::]:80&#x27;</span><br><span class="line">        option server_name &#x27;_redirect2ssl&#x27;</span><br><span class="line">        option return &#x27;302 https://$host$request_uri&#x27;</span><br><span class="line"></span><br><span class="line">config server &#x27;_redirect2ssl&#x27;</span><br><span class="line">        list listen &#x27;90&#x27;</span><br><span class="line">        list listen &#x27;[::]:90&#x27;</span><br><span class="line">        option server_name &#x27;_redirect2ssl&#x27;</span><br><span class="line">        option return &#x27;302 https://$host:433$request_uri&#x27;</span><br></pre></td></tr></table></figure>

<p>解释：由于Openwrt的nginx启动脚本强制从/etc/config/nginx加载后转化成/var/lib/nginx/uci.conf，无法更改太多东西，所以/etc/config/nginx仅改一下端口、强制http转https，因为运营商默认屏蔽80\443端口，只能改其他端口<br>4.新建/etc/nginx/conf.d/new.conf,并放入以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123; #see uci show &#x27;nginx._lan&#x27;</span><br><span class="line">    listen 433 ssl default_server;</span><br><span class="line">    listen [::]:433 ssl default_server;</span><br><span class="line">    server_name wangyougx_com;</span><br><span class="line">    include restrict_locally;</span><br><span class="line">    include conf.d/*.locations;</span><br><span class="line">    ssl_certificate /etc/nginx/conf.d/wangyougx_com.crt;</span><br><span class="line">    ssl_certificate_key /etc/nginx/conf.d/wangyougx_com.key;</span><br><span class="line">    ssl_session_timeout 10m;</span><br><span class="line">    ssl_protocols TLSv1.2 TLSv1.3;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; </span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    include mime.types;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释：如果你的域名已有证书，就填入，切记不要试图修改Nginx默认的_lan.crt！没用的；</p>
<p>操作到这里，基本算完成了，接下来重启以下服务：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/init.d/uwsgi restart </span><br><span class="line">/etc/init.d/php8-fpm restart </span><br><span class="line">/etc/init.d/nginx restart </span><br></pre></td></tr></table></figure>

<p>附加建议：<br>1.建议将/etc/uwsgi/emperor.ini 内的vassal-set项目改成vassal-set = die-on-idle=false(进程不休眠重启)<br>2.通过logread命令查看日志，会发现提示/www/favicon.ico文件不存在，这个是网页标签图标，可不理会，也可以找个喜欢的图标放进去即可。</p>
<blockquote>
<p>引用:</p>
<p><a href="https://www.cnblogs.com/jimodetiantang/p/9246407.html">Nginx之 Location 的生成</a><br/><br><a href="https://www.cnblogs.com/jackadam/p/16271801.html">openwrt nginx 配置PHP</a></p>
</blockquote>
<span id="more"></span>

]]></content>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>使用docker的Calibre-Web项目来搭建一个自己的电子书库</title>
    <url>/2023/28557/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这次我们需要用到是一个叫做Calibre-Web的Docker项目，calibre是一个“一站式”的电子书解决方案，它可以全面满足你的电子书需求。Calibre是免费的，源代码开放，拥有跨平台的设计。它是一个完整的电子图书馆，包括图书馆管理，格式转换，新闻，将材料转换为电子书，以及电子书阅读器同步功能、整合进电子图书阅读器。——（摘自百度百科）。<br>Calibre-Web是一个Web应用程序，直接使用Calibre的数据库，用于浏览、阅读和下载电子书，该软件是<a href="https://github.com/mutschler/calibreserver">https://github.com/mutschler/calibreserver</a>的分支，并根据GPL v3许可证授权。（摘自janeczku/calibre-web <a href="https://github.com/janeczku/calibre-web">https://github.com/janeczku/calibre-web</a>）<br>Calibre-Web提供了很多强大的功能，如漂亮的WebUI、支持多语言、用户权限管理、搜索功能、自定义书架、格式转换、公共用户注册、一键发送到kindle、直接在浏览器中阅读、支持上传等功能。</p>
<h1 id="一、Calibre-Web的安装"><a href="#一、Calibre-Web的安装" class="headerlink" title="一、Calibre-Web的安装"></a>一、Calibre-Web的安装</h1><h4 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull ctiself/calibre-web</span><br></pre></td></tr></table></figure>

<h4 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker create --name=calibre -v /media/calibre/config:/config -v /media/calibre/books:/books -p 8083:8083 ctiself/calibre-web</span><br></pre></td></tr></table></figure>
<p>这里需要根据自己的情况来填写（红字的可自己调整）<br><code>-v /media/calibre/config:/config</code> 本地配置文件目录<br><code>-v /media/calibre/books:/books</code> 本地书库保存目录<br><code>-p 8083:8083</code>                             本地开放的端口</p>
<h4 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker start calibre</span><br></pre></td></tr></table></figure>


<h1 id="二、在浏览器输入ip-8083，就会出现站点配置界面。"><a href="#二、在浏览器输入ip-8083，就会出现站点配置界面。" class="headerlink" title="二、在浏览器输入ip:8083，就会出现站点配置界面。"></a>二、在浏览器输入ip:8083，就会出现站点配置界面。</h1><h4 id="书库数据库位置与服务器端口"><a href="#书库数据库位置与服务器端口" class="headerlink" title="书库数据库位置与服务器端口"></a>书库数据库位置与服务器端口</h4><p><img src="http://img.duya233.top/duya-image1637119279727-a14cb567-4902-43a8-888c-09639220186d.png" alt="image.png"></p>
<h4 id="日志文件存放位置与启用上传图书的功能"><a href="#日志文件存放位置与启用上传图书的功能" class="headerlink" title="日志文件存放位置与启用上传图书的功能"></a>日志文件存放位置与启用上传图书的功能</h4><p><code>/config/calibre-web.log</code><img src="http://img.duya233.top/duya-image1637119148430-595b4a1c-fa34-4984-98de-5eea3b566b75.png" alt="image.png"></p>
<h4 id="启用电子书格式转换功能"><a href="#启用电子书格式转换功能" class="headerlink" title="启用电子书格式转换功能"></a>启用电子书格式转换功能</h4><p><code>/usr/bin/ebook-conve</code><br><code>/usr/local/bin/unrar</code><br><img src="http://img.duya233.top/duya-image1637119930433-894331e9-dafe-42c1-a015-a58e2832c24b.png" alt="image.png"></p>
<h1 id="三、注意"><a href="#三、注意" class="headerlink" title="三、注意"></a>三、注意</h1><p>到这里先别急着点提交，这里有个大坑。就是直接点提交的话，会提示找不到数据库位置，这需要我们手动去上传一个metadata.db数据库文件。上传到我们上面设置的/media/calibre/books中，并且设置为 644 权限。这里还有一个要注意的点就是为books这个文件夹添加777的权限，不然上传书籍会报错。<br><code>chmod 777 books</code><br><code>chmod 644 metadata.db</code></p>
<p>metadata.db文件链接<br>谷歌网盘<a href="https://drive.google.com/file/d/1RMcNPzqOcQ5mwhJdwzy_bDuk4U-blHC7/view?usp=sharing">https://drive.google.com/file/d/1RMcNPzqOcQ5mwhJdwzy_bDuk4U-blHC7/view?usp=sharing</a><br>蓝奏云盘<a href="https://wwu.lanzoui.com/iJv85wl6hta">https://wwu.lanzoui.com/iJv85wl6hta</a>密码:2zxq<br><img src="http://img.duya233.top/duya-image1637120027426-b3893398-2e35-4139-bc5e-da3991410078.png" alt="image.png"><br>完成以上步骤之后，再点击提交就不会出现问题了<br><img src="http://img.duya233.top/duya-image1637119392550-3855aa25-4929-4303-8bba-7974006d9e00.png" alt="image.png"><br>接着点击登入，默认的用户名是admin 密码admin123<br>登入之后点击admin，把语言改为中文。点击submit，界面就变为中文的了。<br><img src="http://img.duya233.top/duya-image1637120319950-b77d8eef-fc14-48f1-a4b2-9709c21443e9.png" alt="image.png"><br>这样属于你自己的电子书库就搭建好了。如果还有问题就自己检查一下，是不是哪里出错了。再不行就百度一下吧。上传几本书，其他一些设置就自己去探索吧。<br><img src="http://img.duya233.top/duya-image1637122961023-8c14c2af-37ee-46aa-831d-655277b1f3de.png" alt="屏幕截图 2021-11-17 121324.png"></p>
<h1 id="四、另一种不用上传数据库文件的搭建方式。"><a href="#四、另一种不用上传数据库文件的搭建方式。" class="headerlink" title="四、另一种不用上传数据库文件的搭建方式。"></a>四、另一种不用上传数据库文件的搭建方式。</h1><p>这里补充另一个方法，但是有个问题是。在拉去GitHub库的时候容易失败，请自行执行<code>docker logs -f -t --tail 500 calibre</code>查看日志。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker create --name=calibre-web --restart=always \</span><br><span class="line">-v /books/calibre:/books \</span><br><span class="line">-v /etc/localtime:/etc/localtime:ro \</span><br><span class="line">-e PGID=0 -e PUID=0\</span><br><span class="line">-p 8083:8083 \</span><br><span class="line">technosoft2000/calibre-web</span><br></pre></td></tr></table></figure>
<p>pgid和puid在root用户下一般为0，其他都不需要修改，也不需要上传数据库文件直接下一步就好了。默认的用户名是admin密码是admin123，其他具体配置可以看官方文档<a href="https://hub.docker.com/r/technosoft2000/calibre-web">https://hub.docker.com/r/technosoft2000/calibre-web</a></p>
<span id="more"></span>

]]></content>
      <tags>
        <tag>docker</tag>
        <tag>Calibre-Web</tag>
      </tags>
  </entry>
  <entry>
    <title>写的一些小玩意</title>
    <url>/2023/49767/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<p>记录一下自己写的一些工具类的代码</p>
<h1 id="1-读取excel表格内容转换为markdown文档"><a href="#1-读取excel表格内容转换为markdown文档" class="headerlink" title="1. 读取excel表格内容转换为markdown文档"></a>1. 读取excel表格内容转换为markdown文档</h1><ul>
<li>需要安装依赖，主要是用到了一个<code>node-xlsx</code>的npm包</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install node-xlsx --save</span><br></pre></td></tr></table></figure>

<ul>
<li>主要代码部分</li>
<li><code>excelToMarkdown.js</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">XLSX</span> = <span class="built_in">require</span>(<span class="string">&#x27;xlsx&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取 Excel 文件</span></span><br><span class="line"><span class="keyword">const</span> workbook = <span class="variable constant_">XLSX</span>.<span class="title function_">readFile</span>(<span class="string">&#x27;input.xlsx&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> worksheet = workbook.<span class="property">Sheets</span>[workbook.<span class="property">SheetNames</span>[<span class="number">0</span>]];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将表格数据转换为对象数组</span></span><br><span class="line"><span class="keyword">const</span> data = <span class="variable constant_">XLSX</span>.<span class="property">utils</span>.<span class="title function_">sheet_to_json</span>(worksheet, &#123; <span class="attr">header</span>: [<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;content&#x27;</span>] &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成 Markdown 文件内容</span></span><br><span class="line"><span class="keyword">let</span> markdownContent = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">data.<span class="title function_">forEach</span>(<span class="function"><span class="params">row</span> =&gt;</span> &#123;</span><br><span class="line">  markdownContent += <span class="string">`### <span class="subst">$&#123;row.title&#125;</span>\n\n<span class="subst">$&#123;row.content&#125;</span>\n\n---\n`</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存为 Markdown 文件</span></span><br><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&#x27;output.md&#x27;</span>, markdownContent, <span class="string">&#x27;utf8&#x27;</span>, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;保存文件失败：&#x27;</span>, err);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;已成功保存为 output.md 文件&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h1 id="2-普通数组转树状结构数组"><a href="#2-普通数组转树状结构数组" class="headerlink" title="2. 普通数组转树状结构数组"></a>2. 普通数组转树状结构数组</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查找子部门的函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">listToTree</span>(<span class="params">list, id</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> result = []</span><br><span class="line">  <span class="comment">// 遍历部门</span></span><br><span class="line">  list.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 如果一个部门的pid（父级部门id）对于等于部门的id</span></span><br><span class="line">    <span class="comment">// 那么这个部门就是id部门的子部门</span></span><br><span class="line">    <span class="keyword">if</span> (item.<span class="property">pid</span> === id) &#123;</span><br><span class="line">      <span class="comment">// 查找二级部门</span></span><br><span class="line">      item.<span class="property">children</span> = <span class="title function_">listToTree</span>(list, item.<span class="property">id</span>)</span><br><span class="line">      result.<span class="title function_">push</span>(item)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="3-利用递归组件实现手搓Tree组件"><a href="#3-利用递归组件实现手搓Tree组件" class="headerlink" title="3. 利用递归组件实现手搓Tree组件"></a>3. 利用递归组件实现手搓Tree组件</h1><ul>
<li><code>/scr/views/TreeComponent.vue</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in data&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;&#123;item.name&#125;&#125;;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">TreeComponent</span> <span class="attr">v-if</span>=<span class="string">&quot;item.children&quot;</span> <span class="attr">:data</span>=<span class="string">&quot;item.children&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">type</span>:<span class="title class_">Array</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">default</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span>[]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>/src/views/Tree.vue</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">TreeComponent</span> <span class="attr">:data</span>=<span class="string">&quot;data&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">TreeComponent</span> <span class="keyword">from</span> <span class="string">&quot;@/views/TreeComponent.vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> data = <span class="title function_">ref</span>([&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;一级 1&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">children</span>: [&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">name</span>: <span class="string">&#x27;二级 1-1&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">children</span>: [&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">name</span>: <span class="string">&#x27;三级 1-1-1&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">children</span>: [&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">name</span>: <span class="string">&#x27;四级 1-1-1-1&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;一级 2&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">children</span>: [&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">name</span>: <span class="string">&#x27;二级 2-1&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">children</span>: [&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">name</span>: <span class="string">&#x27;三级 2-1-1&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">name</span>: <span class="string">&#x27;二级 2-2&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">children</span>: [&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">name</span>: <span class="string">&#x27;三级 2-2-1&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;一级 3&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">children</span>: [&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">name</span>: <span class="string">&#x27;二级 3-1&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">children</span>: [&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">name</span>: <span class="string">&#x27;三级 3-1-1&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">name</span>: <span class="string">&#x27;二级 3-2&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">children</span>: [&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">name</span>: <span class="string">&#x27;三级 3-2-1&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>/src/views/App.vue</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">	<span class="tag">&lt;<span class="name">TreeComponent</span> <span class="attr">:data</span>=<span class="string">&quot;data&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">TreeComponent</span> <span class="keyword">from</span> <span class="string">&quot;@/views/TreeComponent.vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> data = <span class="title function_">ref</span>([&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;一级 1&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">children</span>: [&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">name</span>: <span class="string">&#x27;二级 1-1&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">children</span>: [&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">name</span>: <span class="string">&#x27;三级 1-1-1&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">children</span>:[&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">name</span>:<span class="string">&#x27;四级 1-1-1-1&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;一级 2&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">children</span>: [&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">name</span>: <span class="string">&#x27;二级 2-1&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">children</span>: [&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">name</span>: <span class="string">&#x27;三级 2-1-1&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">name</span>: <span class="string">&#x27;二级 2-2&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">children</span>: [&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">name</span>: <span class="string">&#x27;三级 2-2-1&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;一级 3&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">children</span>: [&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">name</span>: <span class="string">&#x27;二级 3-1&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">children</span>: [&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">name</span>: <span class="string">&#x27;三级 3-1-1&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">name</span>: <span class="string">&#x27;二级 3-2&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">children</span>: [&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">name</span>: <span class="string">&#x27;三级 3-2-1&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h1 id="4-递归实现数组去重"><a href="#4-递归实现数组去重" class="headerlink" title="4. 递归实现数组去重"></a>4. 递归实现数组去重</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">recursiveUnique</span>(<span class="params">array</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (array.<span class="property">length</span> &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> firstItem = array[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">const</span> restArray = array.<span class="title function_">slice</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">const</span> uniqueRestArray = <span class="title function_">recursiveUnique</span>(restArray);</span><br><span class="line">        <span class="keyword">if</span> (!uniqueRestArray.<span class="title function_">includes</span>(firstItem)) &#123;</span><br><span class="line">            <span class="keyword">return</span> [firstItem].<span class="title function_">concat</span>(uniqueRestArray);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> uniqueRestArray;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">const</span> uniqueArray = <span class="title function_">recursiveUnique</span>(array);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(uniqueArray); <span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>

<h1 id="5-封装Element-Plus通用表格组件"><a href="#5-封装Element-Plus通用表格组件" class="headerlink" title="5. 封装Element Plus通用表格组件"></a>5. 封装Element Plus通用表格组件</h1><ul>
<li><code>/src/PageList.vue</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script setup lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line"><span class="keyword">const</span> &#123; tableData, total, <span class="title class_">PageSizes</span> &#125; = <span class="title function_">defineProps</span>(&#123;</span><br><span class="line">    <span class="attr">tableData</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="title class_">Array</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">total</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="title class_">Number</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title class_">PageSizes</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="title class_">Array</span>,</span><br><span class="line">        <span class="attr">default</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> [<span class="number">10</span>, <span class="number">20</span>, <span class="number">50</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">tableColumn</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="title class_">Array</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">buttonlist</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="title class_">Array</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>([<span class="string">&#x27;changePage&#x27;</span>])</span><br><span class="line"><span class="keyword">const</span> pageParams = <span class="title function_">ref</span>(&#123;</span><br><span class="line">    <span class="attr">page</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">pageSize</span>: <span class="title class_">PageSizes</span>[<span class="number">0</span>]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">SizeChage</span> = (<span class="params">val: number</span>) =&gt; &#123;</span><br><span class="line">    pageParams.<span class="property">value</span>.<span class="property">pageSize</span> = val</span><br><span class="line"></span><br><span class="line">    <span class="title function_">emit</span>(<span class="string">&#x27;getPage&#x27;</span>, pageParams.<span class="property">value</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">CurrentChange</span> = (<span class="params">val: number</span>) =&gt; &#123;</span><br><span class="line">    pageParams.<span class="property">value</span>.<span class="property">page</span> = val</span><br><span class="line">    <span class="title function_">emit</span>(<span class="string">&#x27;getPage&#x27;</span>, pageParams.<span class="property">value</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拆分数组</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">splitStr</span>(<span class="params">str: any</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> str.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">tableHandler</span>(<span class="params">emitname: any, scope: object</span>) &#123;</span><br><span class="line">    <span class="title function_">emit</span>(emitname, scope)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;tableData&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">v-for</span>=<span class="string">&quot;item in tableColumn&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;splitStr(item)[0]&quot;</span> <span class="attr">:prop</span>=<span class="string">&quot;splitStr(item)[0]&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">:label</span>=<span class="string">&quot;splitStr(item)[1]&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;操作&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">v-for</span>=<span class="string">&quot;item in  buttonlist &quot;</span> <span class="attr">:type</span>=<span class="string">&quot;item.type&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;tableHandler(item.emit, scope)&quot;</span>&gt;</span>&#123;&#123;</span></span><br><span class="line"><span class="language-xml">                        item.text &#125;&#125;<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-pagination</span> <span class="attr">layout</span>=<span class="string">&quot;sizes, prev, pager, next&quot;</span> <span class="attr">:total</span>=<span class="string">&quot;total&quot;</span> <span class="attr">:page-size</span>=<span class="string">&quot;pageParams.pageSize&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:page-sizes</span>=<span class="string">&quot;PageSizes&quot;</span> @<span class="attr">size-change</span>=<span class="string">&quot;SizeChage&quot;</span> @<span class="attr">current-change</span>=<span class="string">&quot;CurrentChange&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>src/App.vue</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script setup lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PageList</span> <span class="keyword">from</span> <span class="string">&#x27;./components/PageList.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> page = <span class="number">1</span>; <span class="comment">// 当前页数</span></span><br><span class="line"><span class="keyword">const</span> limit = <span class="number">10</span>; <span class="comment">// 每页显示的数据条数</span></span><br><span class="line"><span class="keyword">const</span> tableData = <span class="title function_">ref</span>([])</span><br><span class="line"><span class="keyword">const</span> total = <span class="title function_">ref</span>(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给子组件传递的列表信息</span></span><br><span class="line"><span class="keyword">const</span> tableColumn = [</span><br><span class="line">  <span class="string">&quot;name,姓名&quot;</span>,</span><br><span class="line">  <span class="string">&quot;gender,性别&quot;</span>,</span><br><span class="line">  <span class="string">&quot;mobile,手机号码&quot;</span>,</span><br><span class="line">  <span class="string">&quot;county,地址&quot;</span>,</span><br><span class="line">]</span><br><span class="line"><span class="comment">// 给子组件传递的按钮信息</span></span><br><span class="line"><span class="keyword">const</span> buttonlist = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">text</span>: <span class="string">&#x27;新增&#x27;</span>,</span><br><span class="line">    <span class="attr">emit</span>: <span class="string">&#x27;add&#x27;</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;text&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">text</span>: <span class="string">&#x27;编辑&#x27;</span>,</span><br><span class="line">    <span class="attr">emit</span>: <span class="string">&#x27;edit&#x27;</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;text&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">text</span>: <span class="string">&#x27;删除&#x27;</span>,</span><br><span class="line">    <span class="attr">emit</span>: <span class="string">&#x27;del&#x27;</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;text&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getLiist</span>(<span class="params">val: object</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">page</span>: _page, <span class="attr">pageSize</span>: _limit &#125; = val</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:3001/userinfo&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">      _page,</span><br><span class="line">      _limit,</span><br><span class="line">      <span class="attr">_size</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 表格数据</span></span><br><span class="line">  tableData.<span class="property">value</span> = res.<span class="property">data</span></span><br><span class="line">  <span class="comment">// 总条数</span></span><br><span class="line">  total.<span class="property">value</span> = <span class="title class_">Number</span>(res.<span class="property">headers</span>[<span class="string">&#x27;x-total-count&#x27;</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getLiist</span>(&#123; <span class="attr">page</span>: <span class="number">1</span>, <span class="attr">_limit</span>: <span class="number">10</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getPage</span> = (<span class="params">val: any</span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">getLiist</span>(val)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">scope: any</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(scope.<span class="property">row</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">PageList</span> <span class="attr">:tableColumn</span>=<span class="string">&quot;tableColumn&quot;</span> <span class="attr">:buttonlist</span>=<span class="string">&quot;buttonlist&quot;</span> <span class="attr">:total</span>=<span class="string">&quot;200&quot;</span> <span class="attr">:tableData</span>=<span class="string">&quot;tableData&quot;</span> @<span class="attr">getPage</span>=<span class="string">&quot;getPage&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    @<span class="attr">add</span>=<span class="string">&quot;add&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">PageList</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<span id="more"></span>

]]></content>
  </entry>
  <entry>
    <title>前端使用vue-qr生成二维码并下载</title>
    <url>/2023/60902/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h4 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h4><p>vue-qr(<a href="https://www.npmjs.com/package/vue-qr">项目地址</a>)一款可以生成带logo和背景图片二维码的vue前端插件，功能强大但使用简单，你可以使用该插件生成各种漂亮的二维码图片。需要注意的就是<strong>不支持ie浏览器</strong></p>
<h4 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// npm</span><br><span class="line">npm install vue-qr --save</span><br><span class="line"></span><br><span class="line">// yarn</span><br><span class="line">yarn add vue-qr</span><br></pre></td></tr></table></figure>



<h4 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h4><hr>
<p>如果多出组件中需要使用，在<code>main.js</code>中全局导入注册</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// vue2.x </span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueQr</span> <span class="keyword">from</span> <span class="string">&#x27;vue-qr&#x27;</span></span><br><span class="line"><span class="comment">// vue3.x </span></span><br><span class="line"><span class="keyword">import</span> vueQr <span class="keyword">from</span> <span class="string">&#x27;vue-qr/src/packages/vue-qr.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueQr</span>)</span><br></pre></td></tr></table></figure>



<span id="more"></span>

<table>
<thead>
<tr>
<th align="center">属性</th>
<th>说明</th>
<th>是否必须</th>
</tr>
</thead>
<tbody><tr>
<td align="center">text</td>
<td>欲编码的内容</td>
<td>是</td>
</tr>
<tr>
<td align="center">correctLevel</td>
<td>容错级别 0-3</td>
<td></td>
</tr>
<tr>
<td align="center">size</td>
<td>尺寸, 长宽一致, 包含外边距</td>
<td></td>
</tr>
<tr>
<td align="center">margin</td>
<td>二维码图像的外边距, 默认 20px</td>
<td></td>
</tr>
<tr>
<td align="center">colorDark</td>
<td>实点的颜色</td>
<td></td>
</tr>
<tr>
<td align="center">colorLight</td>
<td>空白区的颜色</td>
<td></td>
</tr>
<tr>
<td align="center">bgSrc</td>
<td>欲嵌入的背景图地址</td>
<td></td>
</tr>
<tr>
<td align="center">gifBgSrc</td>
<td>欲嵌入的背景图 gif 地址,设置后普通的背景图将失效。设置此选项会影响性能</td>
<td></td>
</tr>
<tr>
<td align="center">backgroundColor</td>
<td>背景色</td>
<td></td>
</tr>
<tr>
<td align="center">backgroundDimming</td>
<td>叠加在背景图上的颜色, 在解码有难度的时有一定帮助</td>
<td></td>
</tr>
<tr>
<td align="center">logoSrc</td>
<td>嵌入至二维码中心的 LOGO 地址</td>
<td></td>
</tr>
<tr>
<td align="center">logoScale</td>
<td>用于计算 LOGO 大小的值, 过大将导致解码失败, LOGO 尺寸计算公式 <code>logoScale*(size-2*margin)</code>, 默认 0.2</td>
<td></td>
</tr>
<tr>
<td align="center">logoMargin</td>
<td>LOGO 标识周围的空白边框, 默认为0</td>
<td></td>
</tr>
<tr>
<td align="center">logoBackgroundColor</td>
<td>Logo 背景色,需要设置 logo margin</td>
<td></td>
</tr>
<tr>
<td align="center">logoCornerRadius</td>
<td>LOGO 标识及其边框的圆角半径, 默认为0</td>
<td></td>
</tr>
<tr>
<td align="center">whiteMargin</td>
<td>若设为 true, 背景图外将绘制白色边框</td>
<td></td>
</tr>
<tr>
<td align="center">dotScale</td>
<td>数据区域点缩小比例,默认为1</td>
<td></td>
</tr>
<tr>
<td align="center">autoColor</td>
<td>若为 true, 背景图的主要颜色将作为实点的颜色, 即 colorDark,默认 true</td>
<td></td>
</tr>
<tr>
<td align="center">binarize</td>
<td>若为 true, 图像将被二值化处理, 未指定阈值则使用默认值</td>
<td></td>
</tr>
<tr>
<td align="center">callback</td>
<td>生成的二维码 Data URI 可以在回调中取得,第一个参数为二维码 data URL, 第二个参数为 props 传过来的 qid(因为二维码生成是异步的,所以加个 id 用于排序)</td>
<td></td>
</tr>
<tr>
<td align="center">bindElement</td>
<td>指定是否需要自动将生成的二维码绑定到HTML上, 默认是true</td>
<td></td>
</tr>
</tbody></table>
]]></content>
  </entry>
  <entry>
    <title>彻底搞懂HTTP缓存策略</title>
    <url>/2023/11456/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h2 id="0-前言："><a href="#0-前言：" class="headerlink" title="0. 前言："></a>0. 前言：</h2><p>在web中，http请求一般都是浏览器发起的，所以我们这里所说的http的缓存策略，其实也就是浏览器端的缓存策略，因为http本身只是一种协议，真正实现缓存还是要靠浏览器（其实就是浏览器指定存储在硬盘下。）</p>
<p>我们使用 HTTP 缓存，通过复用缓存资源，减少了客户端等待时间和网络流量，同时也能缓解服务器端的压力。可以显著的提升我们网站和应用的性能。虽然 HTTP 缓存不是必须的，但重用缓存的资源通常是必要的，HTTP 缓存是一个 web 性能优化的重要手段。</p>
<p><strong>要想实现一个完整的缓存，需要考虑很多因素。例如：</strong></p>
<ol>
<li>请求的资源发生改变的时候，如何让浏览器去获取新的资源。</li>
<li>设置缓存失效时间之后，如果服务器资源没有发生改变，浏览器如何判断。</li>
</ol>
<p><strong>什么样的HTTP响应会被客户端缓存？</strong></p>
<ul>
<li><p>默认情况下，请求方法如 GET、HEAD的响应内容是可缓存的，在包含新鲜度信息的情况下，POST的响应内容也可以被缓存；</p>
</li>
<li><p>默认情况下，响应码如 200、206、300、301、302、404 等的响应内容可以被缓存；</p>
</li>
<li><p>响应头和请求头没有指明不使用缓存，如 Cache-Control: no-store。 以上是几种比较常见的情况。</p>
</li>
</ul>
<blockquote>
<p><strong>MDN：</strong></p>
<ul>
<li>HTTP 缓存会存储与请求关联的响应，并将存储的响应复用于后续请求。</li>
<li>首先，由于不需要将请求传递到源服务器，因此客户端和缓存越近，响应速度就越快。最典型的例子是浏览器本身为浏览器请求存储缓存。</li>
<li>当响应可复用时，源服务器不需要处理请求——因为它不需要解析和路由请求、根据 cookie 恢复会话、查询数据库以获取结果或渲染模板引擎。这减少了服务器上的负载。</li>
</ul>
</blockquote>
<h2 id="1-HTTP缓存类型"><a href="#1-HTTP缓存类型" class="headerlink" title="1. HTTP缓存类型"></a>1. HTTP缓存类型</h2><p>通常 HTTP 缓存类型分为两种：<strong>私有缓存：浏览器</strong>（强缓存）和<strong>共享缓存：各种中间代理服务器</strong>（协商缓存）。从字面意思我们可以很直观的看到它们的差别。强缓存即强制直接使用缓存。协商缓存就得和服务器协商确认下这个缓存能不能用。</p>
<p><strong>私用缓存：</strong></p>
<ul>
<li>仅供一个客户端使用的缓存，即客户端上的缓存仅供自己使用，通常只存在于如浏览器这样的客户端上。</li>
</ul>
<p><img src="http://img.duya233.top/duya-imageimage-20230710181501724.png" alt="image-20230710181501724"></p>
<blockquote>
<p>每一个客户端发起的第一个请求都会被源服务器处理。在缓存生效的情况下，同一个客户端后续的相同请求甚至不会被发送，而是由本地缓存提供服务。</p>
</blockquote>
<p><strong>共享缓存：</strong></p>
<ul>
<li>可以供多个客户端使用的缓存，通常依赖于代理服务器。</li>
</ul>
<p><img src="http://img.duya233.top/duya-imageimage-20230710181738672.png" alt="image-20230710181738672"></p>
<blockquote>
<p>客户端发起的第一个请求通过代理服务器访问源服务器，缓存生效后会存放在代理服务器，后续客户端发起的相同请求，均由代理服务器提供缓存服务，共享缓存可以减轻源服务器的压力。</p>
</blockquote>
<h2 id="2-HTTP缓存的处理流程"><a href="#2-HTTP缓存的处理流程" class="headerlink" title="2. HTTP缓存的处理流程"></a>2. HTTP缓存的处理流程</h2><p>在正式开始之前，我们通过下面这张图通过宏观视角了解下HTTP 缓存的处理流程（执行顺序）。</p>
<p><img src="http://img.duya233.top/duya-image49218569.jpg" alt="49218569"></p>
<p><img src="http://img.duya233.top/duya-image39aa830e10cd18056f10546eee30d14.png" alt="39aa830e10cd18056f10546eee30d14"></p>
<p><img src="http://img.duya233.top/duya-image2c8663059564cec57e840f998b47940.png" alt="2c8663059564cec57e840f998b47940"></p>
<h2 id="3-HTTP缓存策略"><a href="#3-HTTP缓存策略" class="headerlink" title="3. HTTP缓存策略"></a>3. HTTP缓存策略</h2><p>首先，我们要知道一点：<strong>HTTP的缓存策略，是由客户端和服务器端共同去控制的，客户端可以通过在请求头里添加Cache-Control等字段来决定是否走缓存，服务器端也可以在响应头中添加Cache-Control等字段来告诉客户端是否可以缓存数据。</strong></p>
<p>不管是客户端还是服务端都是提供HTTP响应头中的不同字段来控制的。</p>
<h3 id="3-1-服务器端的缓存控制"><a href="#3-1-服务器端的缓存控制" class="headerlink" title="3.1 服务器端的缓存控制"></a><strong>3.1 服务器端的缓存控制</strong></h3><ul>
<li>HTTP响应头中的关于服务器缓存字段说明<ul>
<li><code>Expires</code></li>
<li><code>Cache-Control</code></li>
<li><code>Last-Modified</code></li>
<li><code>Etag</code></li>
</ul>
</li>
</ul>
<ol>
<li><p><code>Expires</code></p>
<ul>
<li>Expires表示服务器端告诉客户端当前资源的失效时间，截止到哪个时间点，是一个绝对时间，即过了这个时间点请求的话，就说明缓存已经失效啦，但是由于服务器端时间和客户端时间可能存在偏差，这也就是导致了最后缓存的时间误差，另一方面，该字段是http1.0提出来的，现在我们基本都是用cache-control:max-age:30来替代。</li>
</ul>
</li>
<li><p><code>Cache-Control</code></p>
<ul>
<li>对于网站来说，缓存是达到高性能的重要组成部分，缓存需要合理配置，因为并不是所有资源都是永久不变的。Cache-Control 首部可以对缓存进行控制，Cache-Control 能用于 HTTP 请求和响应中，支持多个指令，以逗号分隔：</li>
</ul>
</li>
</ol>
<table>
<thead>
<tr>
<th align="left">响应首部</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>Cache-Control: no-store</code></td>
<td align="left"><strong>不使用缓存。</strong></td>
</tr>
<tr>
<td align="left"><code>Cache-Control: no-cache</code></td>
<td align="left"><strong>使用缓存前，无论本地副本是否过期，都需要请求源服务器进行验证（协商缓存验证）。</strong></td>
</tr>
<tr>
<td align="left"><code>Cache-Control: max-age=秒</code></td>
<td align="left">设置缓存存储的最大期限，超过这个期限缓存被认为过期，时间是相对于请求的时间。</td>
</tr>
<tr>
<td align="left"><code>Cache-Control: s-maxage=秒</code></td>
<td align="left">同 <code>max-age</code>，仅适用于共享缓存。</td>
</tr>
<tr>
<td align="left"><code>Cache-Control: private</code></td>
<td align="left">私有缓存，响应只能被单个客户端缓存。</td>
</tr>
<tr>
<td align="left"><code>Cache-Control: public</code></td>
<td align="left">共享缓存，即由缓存代理服务器提供的缓存，响应可以被多个客户端缓存。</td>
</tr>
<tr>
<td align="left"><code>Cache-Control: must-revalidate</code></td>
<td align="left">如果本地副本未过期，则可继续供客户端使用，不需要向源服务器再验证；如果本地副本已过期（比如已经超过<code>max-age</code>），在成功向源服务器验证之前，缓存不能用该资源响应后续请求。</td>
</tr>
<tr>
<td align="left"><code>Cache-Control: proxy-revalidate</code></td>
<td align="left">同 <code>must-revalidate</code>，仅适用于共享缓存。</td>
</tr>
</tbody></table>
<p><code>Cache-Control</code>有几个指令特别容易混淆，不能望文生义。比如<code>no-cache</code>，并不是指不能用 cache，客户端仍会把带有 <code>no-cache</code> 的响应缓存下来，只不过每次不会直接用缓存，而是要先去服务端验证一下，所以其实<code>no-cache</code>真正合适的名字才是 <code>must-revalidate</code>。如果你想让客户端完全不缓存响应，应该用<code>no-store</code>，带有<code>no-store</code>的响应不会被缓存到任意的磁盘或者内存里，它才是真正的 <code>no-cache</code>。</p>
<p>==下面是对三个容易混淆的指令进行对比说明：==</p>
<table>
<thead>
<tr>
<th>首部</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>Cache-Control: no-store</code></td>
<td>不使用缓存。</td>
</tr>
<tr>
<td><code>Cache-Control: no-cache</code></td>
<td>无论本地副本是否过期，都需要请求源服务器进行验证。</td>
</tr>
<tr>
<td><code>Cache-Control: must-revalidate</code></td>
<td>如果本地副本未过期，可以使用本地副本；否则，需要请求源服务器进行验证。</td>
</tr>
</tbody></table>
<p><img src="http://img.duya233.top/duya-imageimage-20230710201001928.png" alt="image-20230710201001928"></p>
<h3 id="3-2-客户端的缓存策略"><a href="#3-2-客户端的缓存策略" class="headerlink" title="3.2 客户端的缓存策略"></a>3.2 客户端的缓存策略</h3><ul>
<li><p>上面我们介绍了，服务器端如何在响应头中添加响应的字段来浏览来是否可以使用缓存，同样，客户端自己也可以控制，即浏览器也可以在请求中添加Cache-Control等字段。</p>
</li>
<li><p>客户端的缓存策略主要依赖以下几种实现：</p>
<ul>
<li><strong>浏览器的Refresh（刷新)或Reload（重载）按钮；</strong></li>
</ul>
<p>（Refresh）我们按F5刷新页面的时候，该页面的http请求中会添加：<code>Cache-Control:max-age:0</code>; 即说明缓存直接失效啦，就不走缓存了，直接从服务器端读取数据。</p>
<p>（Reload）我们按ctrl+f5强制刷新页面的时候，该页面的http请求会添加：<code>Cache-Control:no-cache</code>; 即表示此时要首先去服务器端验证资源是否有更新，如果有更新则直接返回最新资源，如果没有更新，则返回304，然后浏览器端判断是304的话，则从缓存中读取数据。</p>
<ul>
<li><strong>浏览器的无痕模式；</strong></li>
<li><strong>浏览器的前进、后退；</strong></li>
</ul>
<p>当我们点击浏览器的前进后退操作时，这个时候请求中不会有Cache-Control的字段，没有该字段，就表示会检查缓存，直接利用之前的资源，不再重新请求服务器。</p>
<ul>
<li><strong>浏览器开发者工具的Disable cache（禁用缓存）</strong>。</li>
</ul>
</li>
</ul>
<h4 id="3-2-2-客户端查找缓存的顺序"><a href="#3-2-2-客户端查找缓存的顺序" class="headerlink" title="3.2.2 客户端查找缓存的顺序"></a><strong>3.2.2 客户端查找缓存的顺序</strong></h4><ol>
<li>先从内存找，如果内存中存在，从内存中加载</li>
<li>如果内存中没有，那就去硬盘中找，如果硬盘中有，从硬盘中加载；</li>
<li>如果硬盘没有，就进行网络请求；</li>
<li>加载到资源缓存到硬盘和内存中。</li>
</ol>
<h4 id="3-2-3-强制再验证：Pragma：no-cache"><a href="#3-2-3-强制再验证：Pragma：no-cache" class="headerlink" title="3.2.3 强制再验证：Pragma：no-cache"></a><strong>3.2.3 强制再验证：Pragma：no-cache</strong></h4><p>与 <code>Cache-Control: no-cache</code> 效果一致，当响应头中包含该指令时，当客户端再次发起请求时，会强制要求使用缓存之前将请求提交到源服务器进行验证。</p>
<blockquote>
<p><code>Pragma: no-cache</code> 用来向后兼容只支持 HTTP/1.0 协议的缓存服务器。</p>
</blockquote>
<h2 id="4-缓存的新鲜度"><a href="#4-缓存的新鲜度" class="headerlink" title="4. 缓存的新鲜度"></a>4. 缓存的新鲜度</h2><h4 id="4-1-缓存新鲜度概念"><a href="#4-1-缓存新鲜度概念" class="headerlink" title="4.1 缓存新鲜度概念"></a>4.1 缓存新鲜度概念</h4><p>在缓存文档过期之前，缓存可以以任意频率使用这些副本，而无需与源服务器联系。当然，除非客户端请求中包含有阻止提供已缓存或未验证资源的首部。一旦已缓存文档过期，缓存就必须与服务器进行核对，询问源服务器该文档是否被修改过，如果被修改过，就要获取一份新鲜（带有新的过期日期）的副本。</p>
<h4 id="4-2-如何检测缓存是否新鲜"><a href="#4-2-如何检测缓存是否新鲜" class="headerlink" title="4.2 如何检测缓存是否新鲜"></a>4.2 如何检测缓存是否新鲜</h4><p><strong>使用日期：Cache-Control:max-age=秒</strong></p>
<p>我们可以通过指定一个缓存的最大使用期限，相对于缓存的创建时间，如果超过了最大使用期限，就说明缓存已经不新鲜了。</p>
<ul>
<li><code>Cache-Control: max-age=秒</code></li>
</ul>
<p>例如：</p>
<img src="http://img.duya233.top/duya-imageimage-20230710204703092.png" alt="image-20230710204703092" style="zoom:50%;" />

<p>如图所示，当响应头中Cache-Control的max-age设置为10秒时，意味着从第一次请求开始，该资源的缓存有效期是10秒，10秒内再次请求该资源会从缓存中读取；超过10秒，则客户端向源服务器发起请求，缓存的有效期又重新开始计时。</p>
<p><strong>过期日期：Expires</strong></p>
<p>我们还可以通过指定一个绝对的过期日期，如果过期日期已经过了，就说明缓存已经不新鲜了。</p>
<p><code>Expires：过期日期</code></p>
<blockquote>
<p><strong>tips：</strong></p>
<p>Expires 是 HTTP/1.0 的首部，Cache-Control 是 HTTP/1.1 的首部，Expires 首部和 Cache-Control:max-age 首部所做的事情本质上是一样的，但由于 Cache-Control 首部使用的是相对时间而不是绝对日期，所以更倾向于使用比较新的Cache-Control首部。绝对日期依赖于计算机时钟的正确设置。</p>
</blockquote>
<h2 id="5-服务端再验证"><a href="#5-服务端再验证" class="headerlink" title="5. 服务端再验证"></a>5. 服务端再验证</h2><h4 id="5-1-服务端再验证概念"><a href="#5-1-服务端再验证概念" class="headerlink" title="5.1 服务端再验证概念"></a>5.1 服务端再验证概念</h4><p>仅仅是已缓存文档过期了并不意味着它和源服务器上的文档有实际的区别，这只是意味着要和服务器进行核对了，说明缓存需要询问源服务器文档是否发生了变化，这种情况称为“服务器再验证”。</p>
<p><strong>服务端再验证有两种情况：</strong></p>
<ul>
<li>服务端文档发生了变化：缓存会获取一份新的文档副本，并将其存储在旧文档的位置上，然后将该文档发送给客户端；</li>
<li>服务端文档没有发生变化：缓存只需要获取新的首部，包含一个新的过期日期，并对缓存中的首部进行更新就行了，该文档还可以继续使用。</li>
</ul>
<blockquote>
<p>缓存并不一定要为每条请求验证文档的有效性——只有在文档过期时它才需要与服务器进行再验证。</p>
</blockquote>
<h4 id="5-2-如何进行服务端再验证"><a href="#5-2-如何进行服务端再验证" class="headerlink" title="5.2 如何进行服务端再验证"></a>5.2 如何进行服务端再验证</h4><h5 id="5-2-1-Last-Modified、If-Modified-Since"><a href="#5-2-1-Last-Modified、If-Modified-Since" class="headerlink" title="5.2.1 Last-Modified、If-Modified-Since"></a>5.2.1 Last-Modified、If-Modified-Since</h5><p><code>Last-Modified</code>与<code>If-Modified-Since</code> 的值都是 GMT 格式的时间字符串，代表的是文件的最后修改时间。</p>
<ol>
<li>在服务器在响应请求时，会通过<code>Last-Modified</code>告诉浏览器资源的最后修改时间。</li>
<li>浏览器再次请求服务器的时候，请求头会包含<code>Last-Modified</code>字段，后面跟着在缓存中获得的最后修改时间。</li>
<li>服务端收到此请求头发现有<code>if-Modified-Since</code>，则与被请求资源的最后修改时间进行对比，如果一致则返回 304 和响应报文头，浏览器只需要从缓存中获取信息即可。如果已经修改，那么开始传输响应一个整体，服务器返回：200 OK</li>
</ol>
<p>但是在服务器上经常会出现这种情况，一个资源被修改了，但其实际内容根本没发生改变，会因为<code>Last-Modified</code>时间匹配不上而返回了整个实体给客户端（即使客户端缓存里有个一模一样的资源）。为了解决这个问题，HTTP/1.1 推出了<code>Etag</code>。Etag 优先级高与<code>Last-Modified</code>。</p>
<p><img src="http://img.duya233.top/duya-imageimage-20230710210444734.png" alt="image-20230710210444734"></p>
<h5 id="5-2-2-Etag、If-None-Match"><a href="#5-2-2-Etag、If-None-Match" class="headerlink" title="5.2.2 Etag、If-None-Match"></a>5.2.2 Etag、If-None-Match</h5><p><code>Etag</code>都是服务器为每份资源生成的唯一标识，就像一个指纹，资源变化都会导致 ETag 变化，跟最后修改时间没有关系，<code>ETag</code>可以保证每一个资源是唯一的。</p>
<p>在浏览器发起请求，浏览器的请求报文头会包含 <code>If-None-Match</code> 字段，其值为上次返回的<code>Etag</code>发送给服务器，服务器接收到次报文后发现 <code>If-None-Match</code> 则与被请求资源的唯一标识进行对比。如果相同说明资源没有修改，则响应返 304，浏览器直接从缓存中获取数据信息。如果不同则说明资源被改动过，则响应整个资源内容，返回状态码 200。</p>
<p><img src="http://img.duya233.top/duya-imageimage-20230710210505087.png" alt="image-20230710210505087"></p>
<h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h2><ol>
<li>首先，浏览器端会根据Cache-Control是否是no-store来判断是否可以对返回的数据进行缓存，如果是no-store表示不允许缓存，之后的请求都不会走缓存，而是重新想服务器端发送请求。</li>
<li>如果不是no-store，一般就是返回max-age: 5000;来告诉浏览器端可以对数据进行缓存，并且设置缓存的失效时间，通过max-age一般会搭配no-cache或者must-revalidate一起返回，no-cache和must-revalidate就是控制要去服务器端进行验证数据是否真的有变化。</li>
<li>那如何验证变化呢？就是借助Last-Modified/if-Modified-Since，或者ETag/If-None-Match来判断，如果确实有变化，则返回最新数据，如果没有变化，则返回304，同时更新缓存的失效时间。</li>
</ol>
<p>以上就是缓存的整个工作机制，其实我们没必要去记忆什么强制缓存，协商缓存等概念，重要的是我们要理解缓存的整个设计思想，每一步的策略到底是解决了什么问题。</p>
<blockquote>
<p>参考文章：</p>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching">MDN-HTTP 缓存</a></li>
<li><a href="https://juejin.cn/post/7087759660391858183">30分钟搞懂 HTTP 缓存</a></li>
<li><a href="https://juejin.cn/post/6907592506779631623">彻底搞懂 Http 缓存策略，切记死背概念！</a></li>
<li><a href="https://www.liuxing.io/blog/http-cache">深入理解 HTTP 缓存机制</a></li>
</ul>
</blockquote>
<span id="more"></span>

]]></content>
  </entry>
  <entry>
    <title>微信小程序搭配wechat-http，实现封装http请求响应拦截器和Promise</title>
    <url>/2023/37462/</url>
    <content><![CDATA[<ul>
<li>代码部分<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// http.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入 http 模块</span></span><br><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">&#x27;wechat-http&#x27;</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置接口基础路径</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">http.<span class="property">baseURL</span> = <span class="string">&#x27;https://live-api.itheima.net&#x27;</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 挂载方法到全局</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">wx.<span class="property">http</span> = http</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置请求拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">http.<span class="property">intercept</span>.<span class="property">request</span> = <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;config -----&gt; &#x27;</span>, config);</span><br><span class="line">  <span class="keyword">const</span> app = <span class="title function_">getApp</span>()</span><br><span class="line">  <span class="keyword">if</span> (app.<span class="property">token</span>) &#123;</span><br><span class="line">    config.<span class="property">header</span> = &#123;</span><br><span class="line">      <span class="title class_">Authorization</span>: <span class="string">`Bearer <span class="subst">$&#123;app.token&#125;</span>`</span>,</span><br><span class="line">      <span class="comment">// 写在后，按用户传递过来的属性为准</span></span><br><span class="line">      ...config.<span class="property">header</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置响应拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">http.<span class="property">intercept</span>.<span class="property">response</span> = <span class="keyword">async</span> (res) =&gt; &#123;</span><br><span class="line">  <span class="comment">/* </span></span><br><span class="line"><span class="comment">    假如返回的是 401，那么代表 token 过期，我们需要发送 refreshToken</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">if</span> (res.<span class="property">statusCode</span> === <span class="number">401</span>) &#123;</span><br><span class="line">    <span class="comment">// 假如 /refreshToken 的请求都失败了，不要再发，请跳转登录页</span></span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">config</span>.<span class="property">url</span>.<span class="title function_">includes</span>(<span class="string">&#x27;/refreshToken&#x27;</span>)) &#123;</span><br><span class="line">      wx.<span class="title function_">navigateTo</span>(&#123; <span class="attr">url</span>: <span class="string">&#x27;/pages/login/index&#x27;</span> &#125;)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> app = <span class="title function_">getApp</span>()</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> wx.<span class="title function_">http</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;/refreshToken&#x27;</span>, <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>, <span class="attr">header</span>: &#123;</span><br><span class="line">        <span class="title class_">Authorization</span>: <span class="string">`Bearer <span class="subst">$&#123;app.refreshToken&#125;</span>`</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;无感刷新refreshToken -----&gt; &#x27;</span>, result);</span><br><span class="line">    app.<span class="title function_">setToken</span>(result.<span class="property">data</span>.<span class="property">token</span>, result.<span class="property">data</span>.<span class="property">refreshToken</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// console.log(&#x27;token处理完成了 -----&gt; &#x27;, res);</span></span><br><span class="line">    <span class="comment">// 要么跳转登录页，要么就把数据拿到</span></span><br><span class="line">    <span class="comment">// 请求接口可以在 res.config 拿到，注意里面的请求头还是失败的请求头，要修改为可以用的即可</span></span><br><span class="line">    <span class="keyword">return</span> wx.<span class="title function_">http</span>(&#123;</span><br><span class="line">      ...res.<span class="property">config</span>,</span><br><span class="line">      <span class="attr">header</span>: <span class="string">`Bearer <span class="subst">$&#123;result.data.token&#125;</span>`</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对返回码做判断，10000才是成功，否则要 Promise.reject(res)</span></span><br><span class="line">  <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">code</span> === <span class="number">10000</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="property">data</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    wx.<span class="property">utils</span>.<span class="title function_">toast</span>(<span class="string">&quot;请求失败&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(res)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模块导出</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> http</span><br></pre></td></tr></table></figure></li>
</ul>
<meta name="referrer" content="no-referrer" />



<span id="more"></span>

]]></content>
  </entry>
  <entry>
    <title>微信小程序自定义tabbar栏【中间突出样式】</title>
    <url>/2023/61095/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<ul>
<li>这两天开发一个微信小程序，需要让底部导航栏中间图标往上突出一点来。之前都是用组件或者直接原生没有太多定制样式，所以记录一下完成步骤。</li>
</ul>
<h1 id="1-自定义tabbar栏配置"><a href="#1-自定义tabbar栏配置" class="headerlink" title="1. 自定义tabbar栏配置"></a>1. 自定义tabbar栏配置</h1><ul>
<li>在 app.json 文件中的 tabBar 中指定 custom 字段为 true（意思是允许使用自定义 tabBar）；</li>
<li>在 app.json 中全局开启使用组件，或者在所有涉及的 tab 页 json 中申明usingComponents 项；</li>
<li>在 app.json 中添加作为 tabBar 栏的页面；</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;tabBar&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;custom&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;color&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#cccccc&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;selectedColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#eb585b&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;borderStyle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;black&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;backgroundColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#ffffff&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;pagePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pages/index/index&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;iconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;images/home.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;selectedIconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;images/home-active.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;首页&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;pagePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pages/follow/index&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;iconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;images/zhizhen.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;selectedIconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;images/zhizhen-active.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;关注&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;pagePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pages/add-house/index&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;iconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;images/plus.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;selectedIconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;images/plus.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;bulge&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;pagePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pages/message/index&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;iconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;images/xiaoxi.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;selectedIconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;images/xiaoxi-active.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;消息&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;pagePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pages/home/index&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;iconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;images/my.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;selectedIconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;images/my-active.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;我的&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><code>pagePath</code> 是自己添加的页面，<code>text</code> 是tabBar上展示的文字。</p>
<h1 id="2-添加自定义tabbar组件栏"><a href="#2-添加自定义tabbar组件栏" class="headerlink" title="2. 添加自定义tabbar组件栏"></a>2. 添加自定义tabbar组件栏</h1><p>在根目录下创建 <code>custom-tab-bar</code> 文件夹，并在该文件夹下新建 <code>Component</code>，或者新建 <code>Page</code>，但是这种创建方式需要自己改动一些代码，在这里我们选用新建 <code>Component</code> 的方式。</p>
<h3 id="2-1-添加组件代码"><a href="#2-1-添加组件代码" class="headerlink" title="2.1 添加组件代码"></a>2.1 添加组件代码</h3><h4 id="2-1-1-完善-wxml-文件代码，tabBar-栏需要展示的页面是一个固定的数组，可以使用-wx-for-循环展示，在这里用到-selected-这个字段，这个字段的作用是帮助展示-tabBar-选中和未选中的样式。"><a href="#2-1-1-完善-wxml-文件代码，tabBar-栏需要展示的页面是一个固定的数组，可以使用-wx-for-循环展示，在这里用到-selected-这个字段，这个字段的作用是帮助展示-tabBar-选中和未选中的样式。" class="headerlink" title="2.1.1 完善 wxml 文件代码，tabBar 栏需要展示的页面是一个固定的数组，可以使用 wx:for 循环展示，在这里用到 selected 这个字段，这个字段的作用是帮助展示 tabBar 选中和未选中的样式。"></a>2.1.1 完善 <code>wxml</code> 文件代码，<code>tabBar</code> 栏需要展示的页面是一个固定的数组，可以使用 <code>wx:for</code> 循环展示，在这里用到 <code>selected</code> 这个字段，这个字段的作用是帮助展示 <code>tabBar</code> 选中和未选中的样式。</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- custom-tab-bar/index.wxml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;tab-bar&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;list&#125;&#125;&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;index&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tab-bar-item &#123;&#123;item.bulge?&#x27;bulge&#x27;:&#x27;&#x27;&#125;&#125;&quot;</span> <span class="attr">data-path</span>=<span class="string">&quot;&#123;&#123;item.pagePath&#125;&#125;&quot;</span> <span class="attr">data-index</span>=<span class="string">&quot;&#123;&#123;index&#125;&#125;&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;switchTab&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123;item.bulge&#125;&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tab-bar-bulge&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span>=<span class="string">&quot;image&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123;selected == index ? item.selectedIconPath : item.iconPath&#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;tab-bar-view&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: &#123;&#123;selected === index ? selectedColor : color&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123;item.text&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-1-2-完善-js-文件代码，list-数组就是在-tabBar-栏展示的页面信息，switchTab-方法作用可以出看来是负责跳转页面。其它的字段相信各位都知道，这里就不再描述。"><a href="#2-1-2-完善-js-文件代码，list-数组就是在-tabBar-栏展示的页面信息，switchTab-方法作用可以出看来是负责跳转页面。其它的字段相信各位都知道，这里就不再描述。" class="headerlink" title="2.1.2 完善 js 文件代码，list 数组就是在 tabBar 栏展示的页面信息，switchTab 方法作用可以出看来是负责跳转页面。其它的字段相信各位都知道，这里就不再描述。"></a>2.1.2 完善 <code>js</code> 文件代码，<code>list</code> 数组就是在 <code>tabBar</code> 栏展示的页面信息，<code>switchTab</code> 方法作用可以出看来是负责跳转页面。其它的字段相信各位都知道，这里就不再描述。</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// custom-tab-bar/index.js</span></span><br><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">selected</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">color</span>: <span class="string">&quot;#ccc&quot;</span>,</span><br><span class="line">    <span class="attr">selectedColor</span>: <span class="string">&quot;#eb585b&quot;</span>,</span><br><span class="line">    <span class="attr">list</span>: [&#123;</span><br><span class="line">      <span class="attr">pagePath</span>: <span class="string">&quot;/pages/index/index&quot;</span>,</span><br><span class="line">      <span class="attr">iconPath</span>: <span class="string">&quot;/images/home.png&quot;</span>,</span><br><span class="line">      <span class="attr">selectedIconPath</span>: <span class="string">&quot;/images/home-active.png&quot;</span>,</span><br><span class="line">      <span class="attr">text</span>: <span class="string">&quot;首页&quot;</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      <span class="attr">pagePath</span>: <span class="string">&quot;/pages/follow/index&quot;</span>,</span><br><span class="line">      <span class="attr">iconPath</span>: <span class="string">&quot;/images/zhizhen.png&quot;</span>,</span><br><span class="line">      <span class="attr">selectedIconPath</span>: <span class="string">&quot;/images/zhizhen-active.png&quot;</span>,</span><br><span class="line">      <span class="attr">text</span>: <span class="string">&quot;关注&quot;</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      <span class="attr">pagePath</span>: <span class="string">&quot;pages/add-house/index&quot;</span>,</span><br><span class="line">      <span class="attr">iconPath</span>: <span class="string">&quot;/images/plus.png&quot;</span>,</span><br><span class="line">      <span class="attr">selectedIconPath</span>: <span class="string">&quot;/images/plus.png&quot;</span>,</span><br><span class="line">      <span class="comment">// text: &quot;&quot;,</span></span><br><span class="line">      <span class="attr">bulge</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      <span class="attr">pagePath</span>: <span class="string">&quot;/pages/message/index&quot;</span>,</span><br><span class="line">      <span class="attr">iconPath</span>: <span class="string">&quot;/images/xiaoxi.png&quot;</span>,</span><br><span class="line">      <span class="attr">selectedIconPath</span>: <span class="string">&quot;/images/xiaoxi-active.png&quot;</span>,</span><br><span class="line">      <span class="attr">text</span>: <span class="string">&quot;消息&quot;</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      <span class="attr">pagePath</span>: <span class="string">&quot;/pages/home/index&quot;</span>,</span><br><span class="line">      <span class="attr">iconPath</span>: <span class="string">&quot;/images/my.png&quot;</span>,</span><br><span class="line">      <span class="attr">selectedIconPath</span>: <span class="string">&quot;/images/my-active.png&quot;</span>,</span><br><span class="line">      <span class="attr">text</span>: <span class="string">&quot;我的&quot;</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">attached</span>(<span class="params"></span>) &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">switchTab</span>(<span class="params">e</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> data = e.<span class="property">currentTarget</span>.<span class="property">dataset</span></span><br><span class="line">      <span class="keyword">const</span> url = data.<span class="property">path</span></span><br><span class="line">      wx.<span class="title function_">switchTab</span>(&#123; url &#125;)</span><br><span class="line">      <span class="comment">// this.setData(&#123;</span></span><br><span class="line">      <span class="comment">//   selected: data.index</span></span><br><span class="line">      <span class="comment">// &#125;)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="2-1-3-完善wxss文件代码"><a href="#2-1-3-完善wxss文件代码" class="headerlink" title="2.1.3 完善wxss文件代码"></a>2.1.3 完善<code>wxss</code>文件代码</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.tab-bar</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#FFF</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.2</span>;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="built_in">env</span>(safe-area-inset-bottom);</span><br><span class="line">  -moz-<span class="attribute">box-shadow</span>:<span class="number">0px</span> -<span class="number">1px</span> <span class="number">8px</span> <span class="number">#eee</span>; </span><br><span class="line">  -webkit-<span class="attribute">box-shadow</span>:<span class="number">0px</span> -<span class="number">1px</span> <span class="number">8px</span> <span class="number">#eee</span>; </span><br><span class="line">  <span class="attribute">box-shadow</span>:<span class="number">0px</span> -<span class="number">1px</span> <span class="number">8px</span> <span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tab-bar-item</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tab-bar-item</span> <span class="selector-class">.image</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">26px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">26px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bulge</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#FFF</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bulge</span> <span class="selector-class">.tab-bar-bulge</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">64px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">64px</span>;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#FFF</span>;</span><br><span class="line">  -moz-<span class="attribute">box-shadow</span>:<span class="number">0px</span> -<span class="number">1px</span> <span class="number">8px</span> <span class="number">#eee</span>; </span><br><span class="line">  -webkit-<span class="attribute">box-shadow</span>:<span class="number">0px</span> -<span class="number">1px</span> <span class="number">8px</span> <span class="number">#eee</span>; </span><br><span class="line">  <span class="attribute">box-shadow</span>:<span class="number">0px</span> -<span class="number">1px</span> <span class="number">8px</span> <span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bulge</span> <span class="selector-class">.image</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">1</span>rpx,-<span class="number">25</span>rpx);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bulge</span> <span class="selector-class">.tab-bar-view</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">bottom</span>: -<span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tab-bar-item</span> <span class="selector-class">.tab-bar-view</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-修复bug"><a href="#2-2-修复bug" class="headerlink" title="2.2 修复bug"></a>2.2 修复bug</h4><p>这样就大致完成了一个自定义tabbar栏，当时它目前还是有点问题的。在每一个tabbar标签的页面的js中添加以下代码，另外还有一个问题就是会出现初次进入小程序点击底部tabbar-item跳转时会闪烁。这是微信那边的问题，网上有方法解决，这个奇怪的问题留给下次在修复吧。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// pages/follow/index.js</span></span><br><span class="line"><span class="title function_">onShow</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">this</span>.<span class="property">getTabBar</span> === <span class="string">&#x27;function&#x27;</span> &amp;&amp;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getTabBar</span>()) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getTabBar</span>().<span class="title function_">setData</span>(&#123;</span><br><span class="line">      <span class="attr">selected</span>: <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<span id="more"></span>

]]></content>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>生成文件夹目录树结构给markdown使用</title>
    <url>/2023/12217/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h2 id="treer是一款生成文件夹目录的node插件"><a href="#treer是一款生成文件夹目录的node插件" class="headerlink" title="treer是一款生成文件夹目录的node插件"></a>treer是一款生成文件夹目录的node插件</h2><h3 id="1、treer安装"><a href="#1、treer安装" class="headerlink" title="1、treer安装"></a>1、treer安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install treer -g	//-g 表示全局安装</span><br></pre></td></tr></table></figure>

<h3 id="2、treer语法使用"><a href="#2、treer语法使用" class="headerlink" title="2、treer语法使用"></a>2、treer语法使用</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\Administrator&gt;treer -h</span><br><span class="line">Usage: index [options]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -V, --version          查看版本信息</span><br><span class="line">  -d, --directory [<span class="built_in">dir</span>]  指定要生成目录树结构的目录 (默认: <span class="string">&quot;C:\\Users\\Administrator&quot;</span>)</span><br><span class="line">  -i, --ignore [ig]      在目录树结构中忽略的目录</span><br><span class="line">  -e, --<span class="built_in">export</span> [epath]   将目录树结构的信息输出到文件中</span><br><span class="line">  -h, --<span class="built_in">help</span>             查看帮助信息</span><br></pre></td></tr></table></figure>

<h3 id="3、生成目录树结构"><a href="#3、生成目录树结构" class="headerlink" title="3、生成目录树结构"></a>3、生成目录树结构</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">D:\&gt;treer -d D:\<span class="built_in">test</span> -e D:\test.txt</span><br><span class="line">D:\<span class="built_in">test</span></span><br><span class="line">├─test2</span><br><span class="line">|   ├─test22</span><br><span class="line">|   |   └test22.txt</span><br><span class="line">|   ├─test21</span><br><span class="line">├─test1</span><br><span class="line">|   ├─test12</span><br><span class="line">|   ├─test11</span><br><span class="line">|   |   └test11.txt</span><br></pre></td></tr></table></figure>

<h3 id="4、直接导出为markdown文件"><a href="#4、直接导出为markdown文件" class="headerlink" title="4、直接导出为markdown文件"></a>4、直接导出为markdown文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">D:\&gt;treer -d D:\<span class="built_in">test</span> -e D:\test.md</span><br></pre></td></tr></table></figure>

<ul>
<li>或者直接在markdown中使用，直接在markdown文档中输入```开启代码块；</li>
</ul>
<span id="more"></span>

]]></content>
  </entry>
  <entry>
    <title>用户名、密码等常用正则表达式</title>
    <url>/2023/20828/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h3 id="1、用户名正则"><a href="#1、用户名正则" class="headerlink" title="1、用户名正则"></a>1、用户名正则</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用户名正则，4到16位（字母，数字，下划线，减号）</span></span><br><span class="line"><span class="keyword">const</span> uPattern = <span class="regexp">/^[a-zA-Z0-9_-]&#123;4,16&#125;$/</span>;</span><br><span class="line"><span class="comment">//输出 true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(uPattern.<span class="title function_">test</span>(<span class="string">&quot;iFat3&quot;</span>));</span><br></pre></td></tr></table></figure>



<h3 id="2、密码强度正则"><a href="#2、密码强度正则" class="headerlink" title="2、密码强度正则"></a>2、密码强度正则</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//密码强度正则，最少6位，包括至少1个大写字母，1个小写字母，1个数字，1个特殊字符</span></span><br><span class="line"><span class="keyword">const</span> pPattern = <span class="regexp">/^.*(?=.&#123;6,&#125;)(?=.*\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&amp;*? ]).*$/</span>;</span><br><span class="line"><span class="comment">//输出 true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;==&quot;</span>+pPattern.<span class="title function_">test</span>(<span class="string">&quot;iFat3#&quot;</span>));</span><br></pre></td></tr></table></figure>



<h3 id="3、整数正则"><a href="#3、整数正则" class="headerlink" title="3、整数正则"></a>3、整数正则</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//正整数正则</span></span><br><span class="line"><span class="keyword">const</span> posPattern = <span class="regexp">/^\d+$/</span>;</span><br><span class="line"><span class="comment">//负整数正则</span></span><br><span class="line"><span class="keyword">const</span> negPattern = <span class="regexp">/^-\d+$/</span>;</span><br><span class="line"><span class="comment">//整数正则</span></span><br><span class="line"><span class="keyword">const</span> intPattern = <span class="regexp">/^-?\d+$/</span>;</span><br><span class="line"><span class="comment">//输出 true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(posPattern.<span class="title function_">test</span>(<span class="string">&quot;42&quot;</span>));</span><br><span class="line"><span class="comment">//输出 true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(negPattern.<span class="title function_">test</span>(<span class="string">&quot;-42&quot;</span>));</span><br><span class="line"><span class="comment">//输出 true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(intPattern.<span class="title function_">test</span>(<span class="string">&quot;-42&quot;</span>));</span><br></pre></td></tr></table></figure>



<h3 id="4、数字正则"><a href="#4、数字正则" class="headerlink" title="4、数字正则"></a>4、数字正则</h3><p>可以是整数也可以是浮点数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//正数正则</span></span><br><span class="line"><span class="keyword">const</span> posPattern = <span class="regexp">/^\d*\.?\d+$/</span>;</span><br><span class="line"><span class="comment">//负数正则</span></span><br><span class="line"><span class="keyword">const</span> negPattern = <span class="regexp">/^-\d*\.?\d+$/</span>;</span><br><span class="line"><span class="comment">//数字正则</span></span><br><span class="line"><span class="keyword">const</span> numPattern = <span class="regexp">/^-?\d*\.?\d+$/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(posPattern.<span class="title function_">test</span>(<span class="string">&quot;42.2&quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(negPattern.<span class="title function_">test</span>(<span class="string">&quot;-42.2&quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numPattern.<span class="title function_">test</span>(<span class="string">&quot;-42.2&quot;</span>));</span><br></pre></td></tr></table></figure>



<h3 id="5、Email正则"><a href="#5、Email正则" class="headerlink" title="5、Email正则"></a>5、Email正则</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Email正则</span></span><br><span class="line"><span class="keyword">const</span> ePattern = <span class="regexp">/^([A-Za-z0-9_\-\.])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]&#123;2,4&#125;)$/</span>;</span><br><span class="line"><span class="comment">//输出 true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ePattern.<span class="title function_">test</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;mailto:1941377389@qq.com&quot;</span>&gt;</span>1941377389@qq.com<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>));</span><br></pre></td></tr></table></figure>



<h3 id="6、手机号码正则"><a href="#6、手机号码正则" class="headerlink" title="6、手机号码正则"></a>6、手机号码正则</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//手机号正则</span></span><br><span class="line"><span class="keyword">const</span> mPattern = <span class="regexp">/^((13[0-9])|(14[5|7])|(15([0-3]|[5-9]))|(18[0,5-9]))\d&#123;8&#125;$/</span>;</span><br><span class="line"><span class="comment">//输出 true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mPattern.<span class="title function_">test</span>(<span class="string">&quot;18600000000&quot;</span>));</span><br></pre></td></tr></table></figure>



<h3 id="7、身份证号正则"><a href="#7、身份证号正则" class="headerlink" title="7、身份证号正则"></a>7、身份证号正则</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//身份证号（18位）正则</span></span><br><span class="line"><span class="keyword">const</span> cP = <span class="regexp">/^[1-9]\d&#123;5&#125;(18|19|([23]\d))\d&#123;2&#125;((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\d&#123;3&#125;[0-9Xx]$/</span>;</span><br><span class="line"><span class="comment">//输出 true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cP.<span class="title function_">test</span>(<span class="string">&quot;11010519880605371X&quot;</span>));</span><br></pre></td></tr></table></figure>



<h3 id="8、URL正则"><a href="#8、URL正则" class="headerlink" title="8、URL正则"></a>8、URL正则</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> urlP = ((http|ftp|https):<span class="comment">//)(([a-zA-Z0-9\._-]+\.[a-zA-Z]&#123;2,6&#125;)|([0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;))(:[0-9]&#123;1,4&#125;)*(/[a-zA-Z0-9\&amp;%_\./-~-]*)?</span></span><br><span class="line"></span><br><span class="line">((http|ftp|https):<span class="comment">//)：协议</span></span><br><span class="line"></span><br><span class="line">(([a-zA-<span class="variable constant_">Z0</span>-<span class="number">9</span>\.<span class="property">_</span>-]+\.[a-zA-Z]&#123;<span class="number">2</span>,<span class="number">6</span>&#125;)：字母host，前半部分（+号及以前）host、二级域名，后半部分表示一定有类似.<span class="property">cn</span>、.<span class="property">com</span>、.<span class="property">net</span>的跟在后面</span><br><span class="line"></span><br><span class="line">([<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">1</span>,<span class="number">3</span>&#125;\.[<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">1</span>,<span class="number">3</span>&#125;\.[<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">1</span>,<span class="number">3</span>&#125;\.[<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">1</span>,<span class="number">3</span>&#125;))：<span class="variable constant_">IP</span> host，可以进一步简化([<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">1</span>,<span class="number">3</span>&#125;(\.[<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">1</span>,<span class="number">3</span>&#125;)&#123;<span class="number">3</span>&#125;)</span><br><span class="line">橙、绿组合成hostname</span><br><span class="line"></span><br><span class="line">(:[<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;)*：端口</span><br><span class="line"></span><br><span class="line">(<span class="regexp">/[a-zA-Z0-9\&amp;%_\./-~-]*)?：/</span>path及后面内容，第一个/匹配host后紧跟的斜杠，host后可能有 / ，/ 后可能还有n多字符，当然，也可能没有了。最后四个字符/-~-有些问题，/的<span class="variable constant_">ASCII</span>码为<span class="number">47</span>，~的为<span class="number">126</span>，（<span class="variable constant_">ASCII</span>码表）这之间包括了数字、大小写字母（与前面的重复），还有些如&lt;&gt;=?&#123;&#125;，这些在正常的url中也会被编码的，不会出现在url中，中括号中的 - 如果不成组就表示 - 字符（一般放在中括号两边或加转义）</span><br><span class="line">容易理解，可以满足大部分需求，不能匹配url+锚点、ftp有<span class="attr">user</span>:pass@host的情况</span><br></pre></td></tr></table></figure>



<h3 id="9、IPv4-IPv6地址正则"><a href="#9、IPv4-IPv6地址正则" class="headerlink" title="9、IPv4/IPv6地址正则"></a>9、IPv4/IPv6地址正则</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ipv4地址正则</span></span><br><span class="line"><span class="keyword">const</span> ipv4P = <span class="regexp">/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.)&#123;3&#125;(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/</span>;</span><br><span class="line"><span class="comment">//输出 true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ipP.<span class="title function_">test</span>(<span class="string">&quot;115.28.47.26&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//ipv6地址正则</span></span><br><span class="line"><span class="title class_">IPv6</span>是英文“<span class="title class_">Internet</span> <span class="title class_">Protocol</span> <span class="title class_">Version</span> <span class="number">6</span>”（互联网协议第<span class="number">6</span>版）的缩写，是互联网工程任务组（<span class="variable constant_">IETF</span>）设计的用于替代<span class="title class_">IPv4</span>的下一代<span class="variable constant_">IP</span>协议，其地址数量号称可以为全世界的每一粒沙子编上一个地址 。</span><br><span class="line"></span><br><span class="line">以下为正则表达式的代码，可用于匹配任何一个合法的<span class="title class_">IPv6</span>地址。：</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ipv6P = <span class="regexp">/^\s*((([0-9A-Fa-f]&#123;1,4&#125;:)&#123;7&#125;([0-9A-Fa-f]&#123;1,4&#125;|:))|(([0-9A-Fa-f]&#123;1,4&#125;:)&#123;6&#125;(:[0-9A-Fa-f]&#123;1,4&#125;|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d))&#123;3&#125;)|:))|(([0-9A-Fa-f]&#123;1,4&#125;:)&#123;5&#125;(((:[0-9A-Fa-f]&#123;1,4&#125;)&#123;1,2&#125;)|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d))&#123;3&#125;)|:))|(([0-9A-Fa-f]&#123;1,4&#125;:)&#123;4&#125;(((:[0-9A-Fa-f]&#123;1,4&#125;)&#123;1,3&#125;)|((:[0-9A-Fa-f]&#123;1,4&#125;)?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d))&#123;3&#125;))|:))|(([0-9A-Fa-f]&#123;1,4&#125;:)&#123;3&#125;(((:[0-9A-Fa-f]&#123;1,4&#125;)&#123;1,4&#125;)|((:[0-9A-Fa-f]&#123;1,4&#125;)&#123;0,2&#125;:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d))&#123;3&#125;))|:))|(([0-9A-Fa-f]&#123;1,4&#125;:)&#123;2&#125;(((:[0-9A-Fa-f]&#123;1,4&#125;)&#123;1,5&#125;)|((:[0-9A-Fa-f]&#123;1,4&#125;)&#123;0,3&#125;:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d))&#123;3&#125;))|:))|(([0-9A-Fa-f]&#123;1,4&#125;:)&#123;1&#125;(((:[0-9A-Fa-f]&#123;1,4&#125;)&#123;1,6&#125;)|((:[0-9A-Fa-f]&#123;1,4&#125;)&#123;0,4&#125;:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d))&#123;3&#125;))|:))|(:(((:[0-9A-Fa-f]&#123;1,4&#125;)&#123;1,7&#125;)|((:[0-9A-Fa-f]&#123;1,4&#125;)&#123;0,5&#125;:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d))&#123;3&#125;))|:)))(%.+)?\s*$/</span>  </span><br><span class="line"></span><br><span class="line">这个正则表达式匹配以下<span class="title class_">IPv6</span>地址形式。注意,这些都是相同的地址:</span><br><span class="line"><span class="attr">fe80</span>:<span class="number">0000</span>:<span class="number">0000</span>:<span class="number">0000</span>:<span class="number">0204</span>:61<span class="attr">ff</span>:<span class="attr">fe9d</span>:f156 <span class="comment">// full form of IPv6 </span></span><br><span class="line"><span class="attr">fe80</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">204</span>:61<span class="attr">ff</span>:<span class="attr">fe9d</span>:f156 <span class="comment">// drop leading zeroes </span></span><br><span class="line"><span class="attr">fe80</span>::<span class="number">204</span>:61<span class="attr">ff</span>:<span class="attr">fe9d</span>:f156 <span class="comment">// collapse multiple zeroes to :: in the IPv6 address </span></span><br><span class="line"><span class="attr">fe80</span>:<span class="number">0000</span>:<span class="number">0000</span>:<span class="number">0000</span>:<span class="number">0204</span>:61<span class="attr">ff</span>:<span class="number">254.157</span><span class="number">.241</span><span class="number">.86</span> <span class="comment">// IPv4 dotted quad at the end </span></span><br><span class="line"><span class="attr">fe80</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0204</span>:61<span class="attr">ff</span>:<span class="number">254.157</span><span class="number">.241</span><span class="number">.86</span> <span class="comment">// drop leading zeroes, IPv4 dotted quad at the end </span></span><br><span class="line"><span class="attr">fe80</span>::<span class="number">204</span>:61<span class="attr">ff</span>:<span class="number">254.157</span><span class="number">.241</span><span class="number">.86</span> <span class="comment">// dotted quad at the end, multiple zeroes collapsed </span></span><br><span class="line"></span><br><span class="line">此外,正则表达式匹配这些<span class="title class_">IPv6</span>形式:</span><br><span class="line"></span><br><span class="line">::<span class="number">1</span> <span class="comment">// localhost </span></span><br><span class="line"><span class="attr">fe80</span>:: <span class="comment">// link-local prefix </span></span><br><span class="line"><span class="number">2001</span>:: <span class="comment">// global unicast prefix </span></span><br></pre></td></tr></table></figure>



<h3 id="10、十六进制颜色正则"><a href="#10、十六进制颜色正则" class="headerlink" title="10、十六进制颜色正则"></a>10、十六进制颜色正则</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//RGB Hex颜色正则</span></span><br><span class="line"><span class="keyword">const</span> cPattern = <span class="regexp">/^#?([a-fA-F0-9]&#123;6&#125;|[a-fA-F0-9]&#123;3&#125;)$/</span>;</span><br><span class="line"><span class="comment">//输出 true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cPattern.<span class="title function_">test</span>(<span class="string">&quot;#b8b8b8&quot;</span>));</span><br></pre></td></tr></table></figure>



<h3 id="11、日期正则"><a href="#11、日期正则" class="headerlink" title="11、日期正则"></a>11、日期正则</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//日期正则，简单判定,未做月份及日期的判定</span></span><br><span class="line"><span class="keyword">const</span> dP1 = <span class="regexp">/^\d&#123;4&#125;(\-)\d&#123;1,2&#125;\1\d&#123;1,2&#125;$/</span>;</span><br><span class="line"><span class="comment">//输出 true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dP1.<span class="title function_">test</span>(<span class="string">&quot;2017-05-11&quot;</span>));</span><br><span class="line"><span class="comment">//输出 true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dP1.<span class="title function_">test</span>(<span class="string">&quot;2017-15-11&quot;</span>));</span><br><span class="line"><span class="comment">//日期正则，复杂判定</span></span><br><span class="line"><span class="keyword">const</span> dP2 = <span class="regexp">/^(?:(?!0000)[0-9]&#123;4&#125;-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[0-9]&#123;2&#125;(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)-02-29)$/</span>;</span><br><span class="line"><span class="comment">//输出 true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dP2.<span class="title function_">test</span>(<span class="string">&quot;2017-02-11&quot;</span>));</span><br><span class="line"><span class="comment">//输出 false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dP2.<span class="title function_">test</span>(<span class="string">&quot;2017-15-11&quot;</span>));</span><br><span class="line"><span class="comment">//输出 false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dP2.<span class="title function_">test</span>(<span class="string">&quot;2017-02-29&quot;</span>));</span><br></pre></td></tr></table></figure>



<h3 id="12、QQ号码正则"><a href="#12、QQ号码正则" class="headerlink" title="12、QQ号码正则"></a>12、QQ号码正则</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//QQ号正则，5至11位</span></span><br><span class="line"><span class="keyword">const</span> qqPattern = <span class="regexp">/^[1-9][0-9]&#123;4,10&#125;$/</span>;</span><br><span class="line"><span class="comment">//输出 true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(qqPattern.<span class="title function_">test</span>(<span class="string">&quot;65974040&quot;</span>));</span><br></pre></td></tr></table></figure>



<h3 id="13、微信号正则"><a href="#13、微信号正则" class="headerlink" title="13、微信号正则"></a>13、微信号正则</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//微信号正则，6至20位，以字母开头，字母，数字，减号，下划线</span></span><br><span class="line"><span class="keyword">const</span> wxPattern = <span class="regexp">/^[a-zA-Z]([-_a-zA-Z0-9]&#123;5,19&#125;)+$/</span>;</span><br><span class="line"><span class="comment">//输出 true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(wxPattern.<span class="title function_">test</span>(<span class="string">&quot;RuilongMao&quot;</span>));</span><br></pre></td></tr></table></figure>



<h3 id="14、车牌号正则"><a href="#14、车牌号正则" class="headerlink" title="14、车牌号正则"></a>14、车牌号正则</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//车牌号正则</span></span><br><span class="line"><span class="keyword">const</span> cPattern = <span class="regexp">/^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]&#123;1&#125;[A-Z]&#123;1&#125;[A-Z0-9]&#123;4&#125;[A-Z0-9挂学警港澳]&#123;1&#125;$/</span>;</span><br><span class="line"><span class="comment">//输出 true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cPattern.<span class="title function_">test</span>(<span class="string">&quot;京K39006&quot;</span>));</span><br></pre></td></tr></table></figure>



<h3 id="15、包含中文正则"><a href="#15、包含中文正则" class="headerlink" title="15、包含中文正则"></a>15、包含中文正则</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//包含中文正则</span></span><br><span class="line"><span class="keyword">const</span> cnPattern = <span class="regexp">/[\u4E00-\u9FA5]/</span>;</span><br><span class="line"><span class="comment">//输出 true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cnPattern.<span class="title function_">test</span>(<span class="string">&quot;42度&quot;</span>));</span><br></pre></td></tr></table></figure>



<span id="more"></span>

]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Hexo使用部分图床图片不显示问题</title>
    <url>/2023/26254/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h3 id="图片不显示"><a href="#图片不显示" class="headerlink" title="图片不显示"></a>图片不显示</h3><p>在使用过程中，会发现有的引用图片无法显示的问题。但是如果直接复制图片地址到浏览器打开的话显示正常<br><img src="https://images2018.cnblogs.com/blog/1469487/201809/1469487-20180911100900123-612645852.png"></p>
<p>403 forbidden，说明了这个网络资源这样获取是被拒绝的，那么通过简单的百度，找到了相关的解决方法，并去实际尝试：<br><strong>解决方法：</strong>只需要在头部添加一个meta <code>&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt;</code></p>
<p>当然在Hexo中呢，应该在你的 md文件中添加meta，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: <span class="built_in">test</span></span><br><span class="line"><span class="built_in">date</span>: 2018-09-01 14:38:14</span><br><span class="line">tags: <span class="built_in">test</span>,测试</span><br><span class="line">description: 测试</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">&lt;meta name=<span class="string">&quot;referrer&quot;</span> content=<span class="string">&quot;no-referrer&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这是一篇测试文章</span></span><br><span class="line"><span class="comment">## 内容</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这样只要你在每篇文章中添加这行meta就可以解决图片不显示的问题啦！</p>
<h3 id="修改文章模板"><a href="#修改文章模板" class="headerlink" title="修改文章模板"></a>修改文章模板</h3><p>每当你使用命令 <code>hexo new &#39;文章名称&#39;</code> 新建一篇文章时，你可能需要在里面书写 <code>&lt;!--more--&gt;</code> ，或者还要写 meta，这样你会觉得很麻烦。所以这里我说下修改模板的方法，解决你每次都要写重复的内容.</p>
<ul>
<li>打开你的博客目录下的<code>scaffolds - post.md</code>文件<br><img src="https://images2018.cnblogs.com/blog/1469487/201809/1469487-20180911100842691-779330320.png"></li>
</ul>
<p>它默认是这样的：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line"><span class="built_in">date</span>: &#123;&#123; <span class="built_in">date</span> &#125;&#125;</span><br><span class="line">tags:</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>你可以将每次重复书写的内容放在里面，这样每次新建的时候都要按这个模板生成。我的模板如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line"><span class="built_in">date</span>: &#123;&#123; <span class="built_in">date</span> &#125;&#125;</span><br><span class="line">tags:</span><br><span class="line">description: </span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">&lt;meta name=<span class="string">&quot;referrer&quot;</span> content=<span class="string">&quot;no-referrer&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<span id="more"></span>

]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次开发微信小程序使用高德地图sdk踩坑经历</title>
    <url>/2023/48016/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<p>最近开发一个微信小程序项目的时候有一个需求就是逆地址解析和<code>poi</code>检索，一般来说微信小程序最好还是使用腾讯地图最合适，不会出现奇怪的地理位置偏移什么的。但本着折腾一下的心理去使用高德地图的微信插件，但万万没想到这一下直接掉坑里面去了。</p>
<p>这个坑主要体现在微信使用<code>wx.getLocation()</code>和<code>wx.chooseLocation()</code>方法获取到的数据默认来说是<strong>纬度</strong>在<strong>经度</strong>前面，导致数据直接给高德地图sdk使用，就会在失败的回调中报错误代码<code>20011</code>。然后就去翻高德的<a href="https://lbs.amap.com/api/webservice/guide/tools/info/">错误代码说明</a>,说是”查询坐标或规划点（包括起点、终点、途经点）在海外，但没有海外地图权限”。但是我使用腾讯地图就很正常，那时我就在想有没有可能是单词写错了，但是经过排查发现并不是。于是我就在想有没有可能是经度纬度搞反了，但是我查了网上的帖子都是我这样的写的呀，不过我还是抱着试试的心态将经度纬度互换了一下位置。然后…… 然后……数据就出来了。这就让我很是无语了，于是再去翻看高德的文档最后还是在<a href="https://lbs.amap.com/api/webservice/guide/api/georegeo">Web服务API</a>下才看到这么一条信息。</p>
<p><img src="http://img.duya233.top/duya-imageimage-20230612185003389.png" alt="image-20230612185003389"></p>
<p>我只想说，“高德，你文档可以写的全一点嘛，我只是想在微信小程序上用上你的逆地址解析，真的犯不着把你的文档全部读一遍吧！”</p>
<p>最后提供一个简单的使用代码</p>
<ul>
<li>导入全局注册</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入下载的js文件</span></span><br><span class="line"><span class="keyword">import</span> amapFile <span class="keyword">from</span> <span class="string">&#x27;../libs/amap-wx.130&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化</span></span><br><span class="line"><span class="keyword">const</span> amap = <span class="keyword">new</span> amapFile.<span class="title class_">AMapWX</span>(&#123;</span><br><span class="line">  <span class="attr">key</span>: <span class="string">&#x27;你的key&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出实例</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> amap</span><br></pre></td></tr></table></figure>

<ul>
<li>页面中使用它</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入amap</span></span><br><span class="line"><span class="keyword">import</span> amap <span class="keyword">from</span> <span class="string">&#x27;../../../utils/amap&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动获取</span></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">getLocation</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    latitude,</span><br><span class="line">    longitude</span><br><span class="line">  &#125; = <span class="keyword">await</span> wx.<span class="title function_">getLocation</span>()</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">reverseGeocoder</span>(latitude, longitude)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 用户选择</span></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">chooseLocation</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    latitude,</span><br><span class="line">    longitude</span><br><span class="line">  &#125; = <span class="keyword">await</span> wx.<span class="title function_">chooseLocation</span>()</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">reverseGeocoder</span>(latitude, longitude)</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 逆地址解析</span></span><br><span class="line"><span class="title function_">reverseGeocoder</span>(<span class="params">longitude, latitude</span>) &#123;</span><br><span class="line">  amap.<span class="title function_">getRegeo</span>(&#123;</span><br><span class="line">    <span class="comment">// 经度在前，纬度在后</span></span><br><span class="line">    <span class="attr">location</span>: <span class="string">`<span class="subst">$&#123;latitude&#125;</span>,<span class="subst">$&#123;longitude&#125;</span>`</span>,</span><br><span class="line">    <span class="comment">// 成功的回调</span></span><br><span class="line">    <span class="attr">success</span>: <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;11&#x27;</span>, data);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123; <span class="attr">address</span>: data[<span class="number">0</span>].<span class="property">name</span> &#125;)</span><br><span class="line">      <span class="comment">// poi</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123; <span class="attr">points</span>: data[<span class="number">0</span>].<span class="property">regeocodeData</span>.<span class="property">pois</span> &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 失败的回调</span></span><br><span class="line">    <span class="attr">fail</span>: <span class="function">(<span class="params">info</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;22&#x27;</span>, info);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>



<span id="more"></span>
]]></content>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>赋值解构</title>
    <url>/2023/23640/</url>
    <content><![CDATA[<p><strong>解构赋值</strong>语法是一种 Javascript 表达式。可以将数组中的值或对象的属性取出，赋值给其他变量。</p>
<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [a, b] = array;</span><br><span class="line"><span class="keyword">const</span> [a, , b] = array;</span><br><span class="line"><span class="keyword">const</span> [a = aDefault, b] = array;</span><br><span class="line"><span class="keyword">const</span> [a, b, ...rest] = array;</span><br><span class="line"><span class="keyword">const</span> [a, , b, ...rest] = array;</span><br><span class="line"><span class="keyword">const</span> [a, b, ...&#123; pop, push &#125;] = array;</span><br><span class="line"><span class="keyword">const</span> [a, b, ...[c, d]] = array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; a, b &#125; = obj;</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">a</span>: a1, <span class="attr">b</span>: b1 &#125; = obj;</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">a</span>: a1 = aDefault, b = bDefault &#125; = obj;</span><br><span class="line"><span class="keyword">const</span> &#123; a, b, ...rest &#125; = obj;</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">a</span>: a1, <span class="attr">b</span>: b1, ...rest &#125; = obj;</span><br><span class="line"><span class="keyword">const</span> &#123; [key]: a &#125; = obj;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a, b, a1, b1, c, d, rest, pop, push;</span><br><span class="line">[a, b] = array;</span><br><span class="line">[a, , b] = array;</span><br><span class="line">[a = aDefault, b] = array;</span><br><span class="line">[a, b, ...rest] = array;</span><br><span class="line">[a, , b, ...rest] = array;</span><br><span class="line">[a, b, ...&#123; pop, push &#125;] = array;</span><br><span class="line">[a, b, ...[c, d]] = array;</span><br><span class="line"></span><br><span class="line">(&#123; a, b &#125; = obj); <span class="comment">// brackets are required</span></span><br><span class="line">(&#123; <span class="attr">a</span>: a1, <span class="attr">b</span>: b1 &#125; = obj);</span><br><span class="line">(&#123; <span class="attr">a</span>: a1 = aDefault, b = bDefault &#125; = obj);</span><br><span class="line">(&#123; a, b, ...rest &#125; = obj);</span><br><span class="line">(&#123; <span class="attr">a</span>: a1, <span class="attr">b</span>: b1, ...rest &#125; = obj);</span><br></pre></td></tr></table></figure>



<h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>对象和数组字面量表达式提供了一种简单的方法来创建<em>特别的</em>数据包。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br></pre></td></tr></table></figure>

<p>解构赋值使用类似的语法，但在赋值的左侧定义了要从原变量中取出哪些值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const x = [1, 2, 3, 4, 5];</span><br><span class="line">const [y, z] = x;</span><br><span class="line">console.log(y); // 1</span><br><span class="line">console.log(z); // 2</span><br></pre></td></tr></table></figure>

<p>同样，你可以在赋值语句的左侧解构对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> &#123; a, b &#125; = obj;</span><br><span class="line"><span class="comment">// is equivalent to:</span></span><br><span class="line"><span class="comment">// const a = obj.a;</span></span><br><span class="line"><span class="comment">// const b = obj.b;</span></span><br></pre></td></tr></table></figure>



<h1 id="绑定与赋值"><a href="#绑定与赋值" class="headerlink" title="绑定与赋值"></a>绑定与赋值</h1><p>对于对象和数组的解构，有两种解构模式：<em>绑定模式</em>和<em>赋值模式</em>，它们的语法略有不同。</p>
<p>在绑定模式中，模式以声明关键字（<code>var</code>、<code>let</code> 或 <code>const</code>）开始。然后，每个单独的属性必须绑定到一个变量或进一步解构。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">2</span> &#125; &#125;;</span><br><span class="line"><span class="keyword">const</span> &#123; a, <span class="attr">b</span>: &#123; <span class="attr">c</span>: d &#125; &#125; = obj;</span><br><span class="line"><span class="comment">// Two variables are bound: `a` and `d`</span></span><br></pre></td></tr></table></figure>

<p>所有变量共享相同的声明，因此，如果你希望某些变量可重新分配，而其他变量是只读的，则可能需要解构两次——一次使用 <code>let</code>，一次使用 <code>const</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">2</span> &#125; &#125;;</span><br><span class="line"><span class="keyword">const</span> &#123; a &#125; = obj; <span class="comment">// a is constant</span></span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">b</span>: &#123; <span class="attr">c</span>: d &#125; &#125; = obj; <span class="comment">// d is re-assignable</span></span><br></pre></td></tr></table></figure>

<p>在赋值模式中，模式不以关键字开头。每个解构属性都被赋值给一个赋值目标——这个赋值目标可以事先用 <code>var</code> 或 <code>let</code> 声明，也可以是另一个对象的属性——一般来说，可以是任何可以出现在赋值表达式左侧的东西。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [];</span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line">(&#123; <span class="attr">a</span>: numbers[<span class="number">0</span>], <span class="attr">b</span>: numbers[<span class="number">1</span>] &#125; = obj);</span><br><span class="line"><span class="comment">// The properties `a` and `b` are assigned to properties of `numbers`</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>备注：</strong> 当使用对象文字解构赋值而不带声明时，在赋值语句周围必须添加括号 <code>( ... )</code>。</p>
</blockquote>
<p><code>&#123; a, b &#125; = &#123; a: 1, b: 2 &#125;</code> 不是有效的独立语法，因为左侧的 <code>&#123;a, b&#125;</code> 被视为块而不是对象字面量。但是，<code>(&#123; a, b &#125; = &#123; a: 1, b: 2 &#125;)</code> 是有效的，<code>const &#123; a, b &#125; = &#123; a: 1， b: 2 &#125;</code> 也是有效的。</p>
<p>如果你的编码风格不包括尾随分号，则 <code>( ... )</code> 表达式前面需要有一个分号，否则它可能用于执行前一行的函数。</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>随机动漫图片API集合</title>
    <url>/2023/38553/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<table>
<thead>
<tr>
<th align="center">序号</th>
<th>地址</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td><a href="http://www.dmoe.cc/random.php">http://www.dmoe.cc/random.php</a></td>
<td></td>
</tr>
<tr>
<td align="center">2</td>
<td><a href="https://api.btstu.cn/sjbz/?lx=dongman">https://api.btstu.cn/sjbz/?lx=dongman</a></td>
<td></td>
</tr>
<tr>
<td align="center">3</td>
<td><a href="https://api.hanximeng.com/ranimg/api.php">https://api.hanximeng.com/ranimg/api.php</a></td>
<td></td>
</tr>
<tr>
<td align="center">4</td>
<td><a href="https://img.xjh.me/random_img.php?type=bg&amp;return=302">https://img.xjh.me/random_img.php?type=bg&amp;return=302</a></td>
<td></td>
</tr>
<tr>
<td align="center">5</td>
<td><a href="https://air.moe/ranimg/api.php">https://air.moe/ranimg/api.php</a></td>
<td></td>
</tr>
<tr>
<td align="center">6</td>
<td><a href="https://www.dmoe.cc/random.php">https://www.dmoe.cc/random.php</a></td>
<td></td>
</tr>
<tr>
<td align="center">7</td>
<td><a href="https://air.moe/ranimg/api2.php">https://air.moe/ranimg/api2.php</a></td>
<td></td>
</tr>
<tr>
<td align="center">8</td>
<td><a href="https://air.moe/ranimg/api1.php">https://air.moe/ranimg/api1.php</a></td>
<td></td>
</tr>
<tr>
<td align="center">9</td>
<td><a href="https://www.dmoe.cc/random.php">https://www.dmoe.cc/random.php</a></td>
<td></td>
</tr>
<tr>
<td align="center">10</td>
<td><a href="https://air.moe/ranimg/api.php">https://air.moe/ranimg/api.php</a></td>
<td></td>
</tr>
<tr>
<td align="center">11</td>
<td><a href="https://api.btstu.cn/sjbz/?lx=dongman">https://api.btstu.cn/sjbz/?lx=dongman</a></td>
<td></td>
</tr>
</tbody></table>
<span id="more"></span>

]]></content>
      <tags>
        <tag>API</tag>
      </tags>
  </entry>
</search>
